
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## not necessarily reproducible examples.
> 
> library(parallel)
> 
> 
> cl <- makeCluster(getOption("cl.cores", 2))
> 
> clusterApply(cl, 1:2, get("+"), 3)
[[1]]
[1] 4

[[2]]
[1] 5

> xx <- 1
> clusterExport(cl, "xx")
> clusterCall(cl, function(y) xx + y, 2)
[[1]]
[1] 3

[[2]]
[1] 3

> 
> ## Use clusterMap like an mapply example
> clusterMap(cl, function(x,y) seq_len(x) + y,
+           c(a =  1, b = 2, c = 3), c(A = 10, B = 0, C = -10))
$a
[1] 11

$b
[1] 1 2

$c
[1] -9 -8 -7

> 
> 
> parSapply(cl, 1:20, get("+"), 3)
 [1]  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
> 
> ## PR14898
> parSapply(cl, 1, identity)
[1] 1
> 
> if(require(boot, quietly = TRUE)) {
+     set.seed(11)
+     ## A bootstrapping example, which can be done in many ways:
+     clusterEvalQ(cl, {
+         ## set up each worker.  Could also use clusterExport()
+         library(boot)
+         cd4.rg <- function(data, mle) MASS::mvrnorm(nrow(data), mle$m, mle$v)
+         cd4.mle <- list(m = colMeans(cd4), v = var(cd4))
+         NULL
+     })
+     res <- clusterEvalQ(cl, boot(cd4, corr, R = 100,
+                                  sim = "parametric", ran.gen = cd4.rg, mle = cd4.mle))
+     cd4.boot <- do.call(c, res)
+     print(boot.ci(cd4.boot,  type = c("norm", "basic", "perc"),
+                   conf = 0.9, h = atanh, hinv = tanh))
+ }
BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
Based on 200 bootstrap replicates

CALL : 
boot.ci(boot.out = cd4.boot, conf = 0.9, type = c("norm", "basic", 
    "perc"), h = atanh, hinv = tanh)

Intervals : 
Level      Normal              Basic              Percentile     
90%   ( 0.5006,  0.8664 )   ( 0.5038,  0.8651 )   ( 0.4741,  0.8549 )  
Calculations on Transformed Scale;  Intervals on Original Scale
> stopCluster(cl)
> 
> 
> 
> proc.time()
   user  system elapsed 
  0.244   0.104   1.358 
