
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Matrix"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Matrix')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BunchKaufman-class")
> ### * BunchKaufman-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BunchKaufman-class
> ### Title: Dense Bunch-Kaufman Factorizations
> ### Aliases: BunchKaufman-class pBunchKaufman-class
> ###   coerce,BunchKaufman,dtrMatrix-method
> ###   coerce,pBunchKaufman,dtpMatrix-method
> ###   determinant,BunchKaufman,logical-method
> ###   determinant,pBunchKaufman,logical-method
> ### Keywords: algebra array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("BunchKaufman")
Class "BunchKaufman" [package "Matrix"]

Slots:
                                                        
Name:       uplo         x      perm       Dim  Dimnames
Class: character   numeric   integer   integer      list

Extends: 
Class "BunchKaufmanFactorization", directly
Class "MatrixFactorization", by class "BunchKaufmanFactorization", distance 2
> set.seed(1)
> 
> n <- 6L
> (A <- forceSymmetric(Matrix(rnorm(n * n), n, n)))
6 x 6 Matrix of class "dsyMatrix"
           [,1]        [,2]       [,3]        [,4]        [,5]        [,6]
[1,] -0.6264538  0.48742905 -0.6212406  0.82122120  0.61982575  1.35867955
[2,]  0.4874291  0.73832471 -2.2146999  0.59390132 -0.05612874 -0.10278773
[3,] -0.6212406 -2.21469989  1.1249309  0.91897737 -0.15579551  0.38767161
[4,]  0.8212212  0.59390132  0.9189774  0.78213630 -1.47075238 -0.05380504
[5,]  0.6198257 -0.05612874 -0.1557955 -1.47075238 -0.47815006 -1.37705956
[6,]  1.3586796 -0.10278773  0.3876716 -0.05380504 -1.37705956 -0.41499456
> 
> ## With dimnames, to see that they are propagated :
> dimnames(A) <- rep.int(list(paste0("x", seq_len(n))), 2L)
> 
> (bk.A <- BunchKaufman(A))
Bunch-Kaufman factorization of Formal class 'BunchKaufman' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ x       : num [1:36] -0.726 0 0 0 0 ...
  ..@ perm    : int [1:6] 1 -2 -2 4 -5 -5
  ..@ Dim     : int [1:2] 6 6
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:6] "x1" "x2" "x3" "x4" ...
  .. ..$ : chr [1:6] "x1" "x2" "x3" "x4" ...
> str(e.bk.A <- expand2(bk.A, complete = FALSE), max.level = 2L)
List of 3
 $ U :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
 $ DU:Formal class 'dsCMatrix' [package "Matrix"] with 7 slots
 $ U.:Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
> str(E.bk.A <- expand2(bk.A, complete =  TRUE), max.level = 2L)
List of 17
 $ :Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ :Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ :Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ :Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ :Formal class 'dsCMatrix' [package "Matrix"] with 7 slots
 $ :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ :Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ :Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ :Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ :Formal class 'pMatrix' [package "Matrix"] with 5 slots
> 
> ## Underlying LAPACK representation
> (m.bk.A <- as(bk.A, "dtrMatrix"))
6 x 6 Matrix of class "dtrMatrix"
     [,1]        [,2]        [,3]        [,4]        [,5]        [,6]       
[1,] -0.72555450 -0.05748438 -0.49161210 -1.53065172 -0.95046421 -0.12008285
[2,]           . -0.53207259 -2.96649303  1.83012123  0.06964736  0.01657652
[3,]           .           .  0.53053617  1.08460713 -0.35250257  0.23553420
[4,]           .           .           .  0.38097326 -0.31584491  1.17770770
[5,]           .           .           .           . -0.47815006 -1.37705956
[6,]           .           .           .           .           . -0.41499456
> stopifnot(identical(as(m.bk.A, "matrix"), `dim<-`(bk.A@x, bk.A@Dim)))
> 
> ## Number of factors is 2*b+1, b <= n, which can be nontrivial ...
> (b <- (length(E.bk.A) - 1L) %/% 2L)
[1] 8
> 
> ae1 <- function(a, b, ...) all.equal(as(a, "matrix"), as(b, "matrix"), ...)
> ae2 <- function(a, b, ...) ae1(unname(a), unname(b), ...)
> 
> ## A ~ U DU U', U := prod(Pk Uk) in floating point
> stopifnot(exprs = {
+     identical(names(e.bk.A), c("U", "DU", "U."))
+     identical(e.bk.A[["U" ]], Reduce(`%*%`, E.bk.A[seq_len(b)]))
+     identical(e.bk.A[["U."]], t(e.bk.A[["U"]]))
+     ae1(A, with(e.bk.A, U %*% DU %*% U.))
+ })
> 
> ## Factorization handled as factorized matrix
> b <- rnorm(n)
> stopifnot(identical(det(A), det(bk.A)),
+           identical(solve(A, b), solve(bk.A, b)))
> 
> 
> 
> cleanEx()
> nameEx("BunchKaufman-methods")
> ### * BunchKaufman-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BunchKaufman-methods
> ### Title: Methods for Bunch-Kaufman Factorization
> ### Aliases: BunchKaufman BunchKaufman-methods
> ###   BunchKaufman,dspMatrix-method BunchKaufman,dsyMatrix-method
> ###   BunchKaufman,matrix-method
> ### Keywords: algebra array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showMethods("BunchKaufman", inherited = FALSE)
Function: BunchKaufman (package Matrix)
x="dspMatrix"
x="dsyMatrix"
x="matrix"

> set.seed(0)
> 
> data(CAex, package = "Matrix")
> class(CAex) # dgCMatrix
[1] "dgCMatrix"
attr(,"package")
[1] "Matrix"
> isSymmetric(CAex) # symmetric, but not formally
[1] TRUE
> 
> A <- as(CAex, "symmetricMatrix")
> class(A) # dsCMatrix
[1] "dsCMatrix"
attr(,"package")
[1] "Matrix"
> 
> ## Have methods for denseMatrix (unpacked and packed),
> ## but not yet sparseMatrix ...
> ## Not run: 
> ##D (bk.A <- BunchKaufman(A))
> ## End(Not run)
> (bk.A <- BunchKaufman(as(A, "unpackedMatrix")))
Bunch-Kaufman factorization of Formal class 'BunchKaufman' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ x       : num [1:5184] 4.16e-16 0.00 0.00 0.00 0.00 ...
  ..@ perm    : int [1:72] 1 2 3 4 5 6 7 8 9 10 ...
  ..@ Dim     : int [1:2] 72 72
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> 
> ## A ~ U DU U' in floating point
> str(e.bk.A <- expand2(bk.A), max.level = 2L)
List of 3
 $ U :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
 $ DU:Formal class 'dsCMatrix' [package "Matrix"] with 7 slots
 $ U.:Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
> stopifnot(all.equal(as(A, "matrix"), as(Reduce(`%*%`, e.bk.A), "matrix")))
> 
> 
> 
> cleanEx()
> nameEx("CAex")
> ### * CAex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CAex
> ### Title: Albers' example Matrix with "Difficult" Eigen Factorization
> ### Aliases: CAex
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> data(CAex, package = "Matrix")
> str(CAex) # of class "dgCMatrix"
Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:216] 0 24 48 1 25 49 2 26 50 3 ...
  ..@ p       : int [1:73] 0 3 6 9 12 15 18 21 24 27 ...
  ..@ Dim     : int [1:2] 72 72
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:216] 0.999998 -0.001312 -0.000527 0.999999 -0.000903 ...
  ..@ factors : list()
> 
> image(CAex)# -> it's a simple band matrix with 5 bands
> ## and the eigen values are basically 1 (42 times) and 0 (30 x):
> zapsmall(ev <- eigen(CAex, only.values=TRUE)$values)
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[39] 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
> ## i.e., the matrix is symmetric, hence
> sCA <- as(CAex, "symmetricMatrix")
> ## and
> stopifnot(class(sCA) == "dsCMatrix",
+           as(sCA, "matrix") == as(CAex, "matrix"))
> 
> 
> 
> cleanEx()
> nameEx("CHMfactor-class")
> ### * CHMfactor-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CHMfactor-class
> ### Title: Sparse Cholesky Factorizations
> ### Aliases: CHMfactor-class CHMsimpl-class CHMsuper-class dCHMsimpl-class
> ###   dCHMsuper-class nCHMsimpl-class nCHMsuper-class
> ###   coerce,CHMsimpl,dtCMatrix-method coerce,CHMsuper,dgCMatrix-method
> ###   determinant,CHMfactor,logical-method diag,CHMfactor-method
> ###   update,CHMfactor-method isLDL
> ### Keywords: algebra array classes programming utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("dCHMsimpl")
Class "dCHMsimpl" [package "Matrix"]

Slots:
                                                                              
Name:         x        p        i       nz      nxt      prv     type colcount
Class:  numeric  integer  integer  integer  integer  integer  integer  integer
                                 
Name:      perm      Dim Dimnames
Class:  integer  integer     list

Extends: 
Class "CHMsimpl", directly
Class "CHMfactor", by class "CHMsimpl", distance 2
Class "CholeskyFactorization", by class "CHMsimpl", distance 3
Class "MatrixFactorization", by class "CHMsimpl", distance 4
> showClass("dCHMsuper")
Class "dCHMsuper" [package "Matrix"]

Slots:
                                                                              
Name:         x    super       pi       px        s     type colcount     perm
Class:  numeric  integer  integer  integer  integer  integer  integer  integer
                        
Name:       Dim Dimnames
Class:  integer     list

Extends: 
Class "CHMsuper", directly
Class "CHMfactor", by class "CHMsuper", distance 2
Class "CholeskyFactorization", by class "CHMsuper", distance 3
Class "MatrixFactorization", by class "CHMsuper", distance 4
> set.seed(2)
> 
> m <- 1000L
> n <- 200L
> M <- rsparsematrix(m, n, 0.01)
> A <- crossprod(M)
> 
> ## With dimnames, to see that they are propagated :
> dimnames(A) <- dn <- rep.int(list(paste0("x", seq_len(n))), 2L)
> 
> (ch.A <- Cholesky(A)) # pivoted, by default
Cholesky factorization of Formal class 'dCHMsimpl' [package "Matrix"] with 11 slots
  ..@ x       : num [1:10105] 4.2231 0.0947 0.0831 -0.2842 -0.1314 ...
  ..@ p       : int [1:201] 0 10 20 43 54 66 76 84 105 138 ...
  ..@ i       : int [1:10105] 0 102 107 112 122 159 161 177 191 195 ...
  ..@ nz      : int [1:200] 10 10 23 11 12 10 8 21 33 6 ...
  ..@ nxt     : int [1:202] 1 2 3 4 5 6 7 8 9 10 ...
  ..@ prv     : int [1:202] 201 0 1 2 3 4 5 6 7 8 ...
  ..@ type    : int [1:6] 2 0 0 1 0 0
  ..@ colcount: int [1:200] 10 10 23 11 12 10 8 21 33 6 ...
  ..@ perm    : int [1:200] 106 60 28 149 188 84 178 102 98 185 ...
  ..@ Dim     : int [1:2] 200 200
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:200] "x1" "x2" "x3" "x4" ...
  .. ..$ : chr [1:200] "x1" "x2" "x3" "x4" ...
> str(e.ch.A <- expand2(ch.A, LDL =  TRUE), max.level = 2L)
List of 5
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L1 :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ D  :Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
 $ L1.:Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ P1 :Formal class 'pMatrix' [package "Matrix"] with 5 slots
> str(E.ch.A <- expand2(ch.A, LDL = FALSE), max.level = 2L)
List of 4
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L  :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ L. :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ P1 :Formal class 'pMatrix' [package "Matrix"] with 5 slots
> 
> ae1 <- function(a, b, ...) all.equal(as(a, "matrix"), as(b, "matrix"), ...)
> ae2 <- function(a, b, ...) ae1(unname(a), unname(b), ...)
> 
> ## A ~ P1' L1 D L1' P1 ~ P1' L L' P1 in floating point
> stopifnot(exprs = {
+     identical(names(e.ch.A), c("P1.", "L1", "D", "L1.", "P1"))
+     identical(names(E.ch.A), c("P1.", "L" ,      "L." , "P1"))
+     identical(e.ch.A[["P1"]],
+               new("pMatrix", Dim = c(n, n), Dimnames = c(list(NULL), dn[2L]),
+                   margin = 2L, perm = invertPerm(ch.A@perm, 0L, 1L)))
+     identical(e.ch.A[["P1."]], t(e.ch.A[["P1"]]))
+     identical(e.ch.A[["L1."]], t(e.ch.A[["L1"]]))
+     identical(E.ch.A[["L." ]], t(E.ch.A[["L" ]]))
+     identical(e.ch.A[["D"]], Diagonal(x = diag(ch.A)))
+     all.equal(E.ch.A[["L"]], with(e.ch.A, L1 %*% sqrt(D)))
+     ae1(A, with(e.ch.A, P1. %*% L1 %*% D %*% L1. %*% P1))
+     ae1(A, with(E.ch.A, P1. %*% L  %*%         L.  %*% P1))
+     ae2(A[ch.A@perm + 1L, ch.A@perm + 1L], with(e.ch.A, L1 %*% D %*% L1.))
+     ae2(A[ch.A@perm + 1L, ch.A@perm + 1L], with(E.ch.A, L  %*%         L. ))
+ })
> 
> ## Factorization handled as factorized matrix
> ## (in some cases only optionally, depending on arguments)
> b <- rnorm(n)
> stopifnot(identical(det(A), det(ch.A, sqrt = FALSE)),
+           identical(solve(A, b), solve(ch.A, b, system = "A")))
> 
> u1 <- update(ch.A,   A , mult = sqrt(2))
> u2 <- update(ch.A, t(M), mult = sqrt(2)) # updating with crossprod(M), not M
> stopifnot(all.equal(u1, u2, tolerance = 1e-14))
> 
> 
> 
> cleanEx()
> nameEx("Cholesky-class")
> ### * Cholesky-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Cholesky-class
> ### Title: Dense Cholesky Factorizations
> ### Aliases: Cholesky-class pCholesky-class
> ###   coerce,Cholesky,dtrMatrix-method coerce,pCholesky,dtpMatrix-method
> ###   determinant,Cholesky,logical-method
> ###   determinant,pCholesky,logical-method diag,Cholesky-method
> ###   diag,pCholesky-method
> ### Keywords: algebra array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("Cholesky")
Class "Cholesky" [package "Matrix"]

Slots:
                                                        
Name:       uplo         x      perm       Dim  Dimnames
Class: character   numeric   integer   integer      list

Extends: 
Class "CholeskyFactorization", directly
Class "MatrixFactorization", by class "CholeskyFactorization", distance 2
> set.seed(1)
> 
> m <- 30L
> n <- 6L
> (A <- crossprod(Matrix(rnorm(m * n), m, n)))
6 x 6 Matrix of class "dpoMatrix"
           [,1]       [,2]       [,3]       [,4]       [,5]       [,6]
[1,] 24.9699603  1.3658061  0.6673915  0.3077886  0.6145040 -7.6270511
[2,]  1.3658061 18.8724279 10.4969009 -2.0000204 -7.8836985  0.1955594
[3,]  0.6673915 10.4969009 27.1105459  0.3994417 -0.4068157  4.4884069
[4,]  0.3077886 -2.0000204  0.3994417 22.9601129 -3.7806013 -3.6029281
[5,]  0.6145040 -7.8836985 -0.4068157 -3.7806013 27.9716577 -9.8757902
[6,] -7.6270511  0.1955594  4.4884069 -3.6029281 -9.8757902 33.9927949
> 
> ## With dimnames, to see that they are propagated :
> dimnames(A) <- dn <- rep.int(list(paste0("x", seq_len(n))), 2L)
> 
> (ch.A <- Cholesky(A)) # pivoted, by default
Cholesky factorization of Formal class 'Cholesky' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ x       : num [1:36] 5.83 0 0 0 0 ...
  ..@ perm    : int [1:6] 6 3 5 1 4 2
  ..@ Dim     : int [1:2] 6 6
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:6] "x1" "x2" "x3" "x4" ...
  .. ..$ : chr [1:6] "x1" "x2" "x3" "x4" ...
> str(e.ch.A <- expand2(ch.A, LDL =  TRUE), max.level = 2L)
List of 5
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L1 :Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
 $ D  :Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
 $ L1.:Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
 $ P1 :Formal class 'pMatrix' [package "Matrix"] with 5 slots
> str(E.ch.A <- expand2(ch.A, LDL = FALSE), max.level = 2L)
List of 4
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L  :Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
 $ L. :Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
 $ P1 :Formal class 'pMatrix' [package "Matrix"] with 5 slots
> 
> ## Underlying LAPACK representation
> (m.ch.A <- as(ch.A, "dtrMatrix")) # which is L', not L, because
6 x 6 Matrix of class "dtrMatrix"
     [,1]        [,2]        [,3]        [,4]        [,5]        [,6]       
[1,]  5.83033403  0.76983701 -1.69386353 -1.30816709 -0.61796255  0.03354172
[2,]           .  5.14955308  0.17422544  0.32516742  0.16995109  2.03339574
[3,]           .           .  5.00720776 -0.33112366 -0.96999278 -1.63387523
[4,]           .           .           .  4.80034190 -0.18270778  0.04322098
[5,]           .           .           .           .  4.64489868 -0.84002286
[6,]           .           .           .           .           .  3.37039314
> A@uplo == "U"
[1] TRUE
> stopifnot(identical(as(m.ch.A, "matrix"), `dim<-`(ch.A@x, ch.A@Dim)))
> 
> ae1 <- function(a, b, ...) all.equal(as(a, "matrix"), as(b, "matrix"), ...)
> ae2 <- function(a, b, ...) ae1(unname(a), unname(b), ...)
> 
> ## A ~ P1' L1 D L1' P1 ~ P1' L L' P1 in floating point
> stopifnot(exprs = {
+     identical(names(e.ch.A), c("P1.", "L1", "D", "L1.", "P1"))
+     identical(names(E.ch.A), c("P1.", "L" ,      "L." , "P1"))
+     identical(e.ch.A[["P1"]],
+               new("pMatrix", Dim = c(n, n), Dimnames = c(list(NULL), dn[2L]),
+                   margin = 2L, perm = invertPerm(ch.A@perm)))
+     identical(e.ch.A[["P1."]], t(e.ch.A[["P1"]]))
+     identical(e.ch.A[["L1."]], t(e.ch.A[["L1"]]))
+     identical(E.ch.A[["L." ]], t(E.ch.A[["L" ]]))
+     identical(e.ch.A[["D"]], Diagonal(x = diag(ch.A)))
+     all.equal(E.ch.A[["L"]], with(e.ch.A, L1 %*% sqrt(D)))
+     ae1(A, with(e.ch.A, P1. %*% L1 %*% D %*% L1. %*% P1))
+     ae1(A, with(E.ch.A, P1. %*% L  %*%         L.  %*% P1))
+     ae2(A[ch.A@perm, ch.A@perm], with(e.ch.A, L1 %*% D %*% L1.))
+     ae2(A[ch.A@perm, ch.A@perm], with(E.ch.A, L  %*%         L. ))
+ })
> 
> ## Factorization handled as factorized matrix
> b <- rnorm(n)
> all.equal(det(A), det(ch.A), tolerance = 0)
[1] TRUE
> all.equal(solve(A, b), solve(ch.A, b), tolerance = 0)
[1] "Mean relative difference: 1.705785e-16"
> 
> ## For identical results, we need the _unpivoted_ factorization
> ## computed by det(A) and solve(A, b)
> (ch.A.nopivot <- Cholesky(A, perm = FALSE))
Cholesky factorization of Formal class 'Cholesky' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ x       : num [1:36] 5 0 0 0 0 ...
  ..@ perm    : int(0) 
  ..@ Dim     : int [1:2] 6 6
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:6] "x1" "x2" "x3" "x4" ...
  .. ..$ : chr [1:6] "x1" "x2" "x3" "x4" ...
> stopifnot(identical(det(A), det(ch.A.nopivot)),
+           identical(solve(A, b), solve(ch.A.nopivot, b)))
> 
> 
> 
> cleanEx()
> nameEx("Cholesky")
> ### * Cholesky
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Cholesky-methods
> ### Title: Methods for Cholesky Factorization
> ### Aliases: Cholesky Cholesky-methods Cholesky,ddiMatrix-method
> ###   Cholesky,diagonalMatrix-method Cholesky,dsCMatrix-method
> ###   Cholesky,dsRMatrix-method Cholesky,dsTMatrix-method
> ###   Cholesky,dspMatrix-method Cholesky,dsyMatrix-method
> ###   Cholesky,generalMatrix-method Cholesky,matrix-method
> ###   Cholesky,symmetricMatrix-method Cholesky,triangularMatrix-method
> ### Keywords: algebra array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showMethods("Cholesky", inherited = FALSE)
Function: Cholesky (package Matrix)
A="ddiMatrix"
A="diagonalMatrix"
A="dsCMatrix"
A="dsRMatrix"
A="dsTMatrix"
A="dspMatrix"
A="dsyMatrix"
A="generalMatrix"
A="matrix"
A="symmetricMatrix"
A="triangularMatrix"

> set.seed(0)
> 
> ## ---- Dense ----------------------------------------------------------
> 
> ## .... Positive definite ..............................................
> 
> n <- 6L
> (A1 <- crossprod(Matrix(rnorm(n * n), n, n)))
6 x 6 Matrix of class "dpoMatrix"
            [,1]       [,2]        [,3]        [,4]       [,5]        [,6]
[1,]  7.63229784  3.5225440 -0.79842454 -0.04717246 -0.2763557 -2.99574643
[2,]  3.52254404  7.9529788  1.06842082  0.32822575 -2.7814087 -1.54583164
[3,] -0.79842454  1.0684208  2.51891543 -0.91363629 -0.4864619 -0.01953766
[4,] -0.04717246  0.3282258 -0.91363629  2.57854419 -1.2860880  1.44447913
[5,] -0.27635568 -2.7814087 -0.48646192 -1.28608796  3.5655733 -1.16142166
[6,] -2.99574643 -1.5458316 -0.01953766  1.44447913 -1.1614217  2.81492383
> (ch.A1.nopivot <- Cholesky(A1, perm = FALSE))
Cholesky factorization of Formal class 'Cholesky' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ x       : num [1:36] 2.76 0 0 0 0 ...
  ..@ perm    : int(0) 
  ..@ Dim     : int [1:2] 6 6
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> (ch.A1 <- Cholesky(A1))
Cholesky factorization of Formal class 'Cholesky' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ x       : num [1:36] 2.82 0 0 0 0 ...
  ..@ perm    : int [1:6] 2 1 4 5 3 6
  ..@ Dim     : int [1:2] 6 6
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> stopifnot(exprs = {
+     length(ch.A1@perm) == ncol(A1)
+     isPerm(ch.A1@perm)
+     is.unsorted(ch.A1@perm) # typically not the identity permutation
+     length(ch.A1.nopivot@perm) == 0L
+ })
> 
> ## A ~ P1' L D L' P1 ~ P1' L L' P1 in floating point
> str(e.ch.A1 <- expand2(ch.A1, LDL =  TRUE), max.level = 2L)
List of 5
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L1 :Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
 $ D  :Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
 $ L1.:Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
 $ P1 :Formal class 'pMatrix' [package "Matrix"] with 5 slots
> str(E.ch.A1 <- expand2(ch.A1, LDL = FALSE), max.level = 2L)
List of 4
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L  :Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
 $ L. :Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
 $ P1 :Formal class 'pMatrix' [package "Matrix"] with 5 slots
> stopifnot(exprs = {
+     all.equal(as(A1, "matrix"), as(Reduce(`%*%`, e.ch.A1), "matrix"))
+     all.equal(as(A1, "matrix"), as(Reduce(`%*%`, E.ch.A1), "matrix"))
+ })
> 
> ## .... Positive semidefinite but not positive definite ................
> 
> A2 <- A1
> A2[1L, ] <- A2[, 1L] <- 0
> A2
6 x 6 Matrix of class "dgeMatrix"
     [,1]       [,2]        [,3]       [,4]       [,5]        [,6]
[1,]    0  0.0000000  0.00000000  0.0000000  0.0000000  0.00000000
[2,]    0  7.9529788  1.06842082  0.3282258 -2.7814087 -1.54583164
[3,]    0  1.0684208  2.51891543 -0.9136363 -0.4864619 -0.01953766
[4,]    0  0.3282258 -0.91363629  2.5785442 -1.2860880  1.44447913
[5,]    0 -2.7814087 -0.48646192 -1.2860880  3.5655733 -1.16142166
[6,]    0 -1.5458316 -0.01953766  1.4444791 -1.1614217  2.81492383
> try(Cholesky(A2, perm = FALSE)) # fails as not positive definite
Error in .local(A, ...) : 
  LAPACK routine 'dpotrf': leading principal minor of order 1 is not positive
> ch.A2 <- Cholesky(A2) # returns, with a warning and ...
Warning in .local(A, ...) :
  LAPACK routine 'dpstrf': matrix is rank deficient or not positive definite, the _computed_ rank is 5
> A2.hat <- Reduce(`%*%`, expand2(ch.A2, LDL = FALSE))
> norm(A2 - A2.hat, "2") / norm(A2, "2") # 7.670858e-17
[1] 9.604062e-17
> 
> ## .... Not positive semidefinite ......................................
> 
> A3 <- A1
> A3[1L, ] <- A3[, 1L] <- -1
> A3
6 x 6 Matrix of class "dgeMatrix"
     [,1]       [,2]        [,3]       [,4]       [,5]        [,6]
[1,]   -1 -1.0000000 -1.00000000 -1.0000000 -1.0000000 -1.00000000
[2,]   -1  7.9529788  1.06842082  0.3282258 -2.7814087 -1.54583164
[3,]   -1  1.0684208  2.51891543 -0.9136363 -0.4864619 -0.01953766
[4,]   -1  0.3282258 -0.91363629  2.5785442 -1.2860880  1.44447913
[5,]   -1 -2.7814087 -0.48646192 -1.2860880  3.5655733 -1.16142166
[6,]   -1 -1.5458316 -0.01953766  1.4444791 -1.1614217  2.81492383
> try(Cholesky(A3, perm = FALSE)) # fails as not positive definite
Error in .local(A, ...) : 
  LAPACK routine 'dpotrf': leading principal minor of order 1 is not positive
> ch.A3 <- Cholesky(A3) # returns, with a warning and ...
Warning in .local(A, ...) :
  LAPACK routine 'dpstrf': matrix is rank deficient or not positive definite, the _computed_ rank is 5
> A3.hat <- Reduce(`%*%`, expand2(ch.A3, LDL = FALSE))
> norm(A3 - A3.hat, "2") / norm(A3, "2") # 1.781568
[1] 0.5916916
> 
> ## Indeed, 'A3' is not positive semidefinite, but 'A3.hat' _is_
> ch.A3.hat <- Cholesky(A3.hat)
Warning in .local(A, ...) :
  LAPACK routine 'dpstrf': matrix is rank deficient or not positive definite, the _computed_ rank is 5
> A3.hat.hat <- Reduce(`%*%`, expand2(ch.A3.hat, LDL = FALSE))
> norm(A3.hat - A3.hat.hat, "2") / norm(A3.hat, "2") # 1.777944e-16
[1] 1.038264e-16
> 
> ## ---- Sparse ---------------------------------------------------------
> 
> ## Really just three cases modulo permutation :
> ##
> ##            type        factorization  minors of P1 A P1'
> ##   1  simplicial  P1 A P1' = L1 D L1'             nonzero
> ##   2  simplicial  P1 A P1' = L    L '            positive
> ##   3  supernodal  P1 A P2' = L    L '            positive
> 
> data(KNex, package = "Matrix")
> A4 <- crossprod(KNex[["mm"]])
> 
> ch.A4 <-
+ list(pivoted =
+      list(simpl1 = Cholesky(A4, perm =  TRUE, super = FALSE, LDL =  TRUE),
+           simpl0 = Cholesky(A4, perm =  TRUE, super = FALSE, LDL = FALSE),
+           super0 = Cholesky(A4, perm =  TRUE, super =  TRUE             )),
+      unpivoted =
+      list(simpl1 = Cholesky(A4, perm = FALSE, super = FALSE, LDL =  TRUE),
+           simpl0 = Cholesky(A4, perm = FALSE, super = FALSE, LDL = FALSE),
+           super0 = Cholesky(A4, perm = FALSE, super =  TRUE             )))
> ch.A4
$pivoted
$pivoted$simpl1
Cholesky factorization of Formal class 'dCHMsimpl' [package "Matrix"] with 11 slots
  ..@ x       : num [1:7451] 1 0.0919 -0.1241 -0.0984 1 ...
  ..@ p       : int [1:713] 0 4 8 12 16 24 31 39 46 54 ...
  ..@ i       : int [1:7451] 0 692 697 708 1 690 696 707 2 690 ...
  ..@ nz      : int [1:712] 4 4 4 4 8 7 8 7 8 7 ...
  ..@ nxt     : int [1:714] 1 2 3 4 5 6 7 8 9 10 ...
  ..@ prv     : int [1:714] 713 0 1 2 3 4 5 6 7 8 ...
  ..@ type    : int [1:6] 2 0 0 1 0 0
  ..@ colcount: int [1:712] 4 4 4 4 8 7 8 7 8 7 ...
  ..@ perm    : int [1:712] 256 243 242 241 213 693 212 692 125 633 ...
  ..@ Dim     : int [1:2] 712 712
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL

$pivoted$simpl0
Cholesky factorization of Formal class 'dCHMsimpl' [package "Matrix"] with 11 slots
  ..@ x       : num [1:7451] 1 0.0919 -0.1241 -0.0984 1 ...
  ..@ p       : int [1:713] 0 4 8 12 16 24 31 39 46 54 ...
  ..@ i       : int [1:7451] 0 692 697 708 1 690 696 707 2 690 ...
  ..@ nz      : int [1:712] 4 4 4 4 8 7 8 7 8 7 ...
  ..@ nxt     : int [1:714] 1 2 3 4 5 6 7 8 9 10 ...
  ..@ prv     : int [1:714] 713 0 1 2 3 4 5 6 7 8 ...
  ..@ type    : int [1:6] 2 1 0 1 0 0
  ..@ colcount: int [1:712] 4 4 4 4 8 7 8 7 8 7 ...
  ..@ perm    : int [1:712] 256 243 242 241 213 693 212 692 125 633 ...
  ..@ Dim     : int [1:2] 712 712
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL

$pivoted$super0
Cholesky factorization of Formal class 'dCHMsuper' [package "Matrix"] with 10 slots
  ..@ x       : num [1:16616] 1 0.0919 -0.1241 -0.0984 1 ...
  ..@ super   : int [1:132] 0 1 2 3 4 6 8 10 11 12 ...
  ..@ pi      : int [1:132] 0 4 8 12 16 24 32 40 45 50 ...
  ..@ px      : int [1:132] 0 4 8 12 16 32 48 64 69 74 ...
  ..@ s       : int [1:1713] 0 692 697 708 1 690 696 707 2 690 ...
  ..@ type    : int [1:6] 2 1 1 1 676 26
  ..@ colcount: int [1:712] 4 4 4 4 8 7 8 7 8 7 ...
  ..@ perm    : int [1:712] 256 243 242 241 213 693 212 692 125 633 ...
  ..@ Dim     : int [1:2] 712 712
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL


$unpivoted
$unpivoted$simpl1
Cholesky factorization of Formal class 'dCHMsimpl' [package "Matrix"] with 11 slots
  ..@ x       : num [1:71848] 1 0.2774 0.1961 0.2774 0.0958 ...
  ..@ p       : int [1:713] 0 16 22 36 55 63 76 82 90 101 ...
  ..@ i       : int [1:71848] 0 257 261 280 419 421 426 427 431 449 ...
  ..@ nz      : int [1:712] 16 6 14 19 8 13 6 8 11 9 ...
  ..@ nxt     : int [1:714] 1 2 3 4 5 6 7 8 9 10 ...
  ..@ prv     : int [1:714] 713 0 1 2 3 4 5 6 7 8 ...
  ..@ type    : int [1:6] 0 0 0 1 0 0
  ..@ colcount: int [1:712] 16 6 14 19 8 13 6 8 11 9 ...
  ..@ perm    : int(0) 
  ..@ Dim     : int [1:2] 712 712
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL

$unpivoted$simpl0
Cholesky factorization of Formal class 'dCHMsimpl' [package "Matrix"] with 11 slots
  ..@ x       : num [1:71848] 1 0.2774 0.1961 0.2774 0.0958 ...
  ..@ p       : int [1:713] 0 16 22 36 55 63 76 82 90 101 ...
  ..@ i       : int [1:71848] 0 257 261 280 419 421 426 427 431 449 ...
  ..@ nz      : int [1:712] 16 6 14 19 8 13 6 8 11 9 ...
  ..@ nxt     : int [1:714] 1 2 3 4 5 6 7 8 9 10 ...
  ..@ prv     : int [1:714] 713 0 1 2 3 4 5 6 7 8 ...
  ..@ type    : int [1:6] 0 1 0 1 0 0
  ..@ colcount: int [1:712] 16 6 14 19 8 13 6 8 11 9 ...
  ..@ perm    : int(0) 
  ..@ Dim     : int [1:2] 712 712
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL

$unpivoted$super0
Cholesky factorization of Formal class 'dCHMsuper' [package "Matrix"] with 10 slots
  ..@ x       : num [1:139052] 1 0.2774 0.1961 0.2774 0.0958 ...
  ..@ super   : int [1:268] 0 1 2 3 4 5 6 7 8 9 ...
  ..@ pi      : int [1:268] 0 16 22 36 55 63 76 82 90 101 ...
  ..@ px      : int [1:268] 0 16 22 36 55 63 76 82 90 101 ...
  ..@ s       : int [1:3723] 0 257 261 280 419 421 426 427 431 449 ...
  ..@ type    : int [1:6] 0 1 1 1 44944 212
  ..@ colcount: int [1:712] 16 6 14 19 8 13 6 8 11 9 ...
  ..@ perm    : int(0) 
  ..@ Dim     : int [1:2] 712 712
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL


> 
> s <- simplify2array
> rapply2 <- function(object, f, ...) rapply(object, f, , , how = "list", ...)
> 
> s(rapply2(ch.A4, isLDL))
       pivoted unpivoted
simpl1 TRUE    TRUE     
simpl0 FALSE   FALSE    
super0 FALSE   FALSE    
> s(m.ch.A4 <- rapply2(ch.A4, expand1, "L")) # giving L = L1 sqrt(D)
       pivoted                                               
simpl1 <S4 class ‘dtCMatrix’ [package “Matrix”] with 7 slots>
simpl0 <S4 class ‘dtCMatrix’ [package “Matrix”] with 7 slots>
super0 <S4 class ‘dgCMatrix’ [package “Matrix”] with 6 slots>
       unpivoted                                             
simpl1 <S4 class ‘dtCMatrix’ [package “Matrix”] with 7 slots>
simpl0 <S4 class ‘dtCMatrix’ [package “Matrix”] with 7 slots>
super0 <S4 class ‘dgCMatrix’ [package “Matrix”] with 6 slots>
> 
> ## By design, the pivoted and simplicial factorizations
> ## are more sparse than the unpivoted and supernodal ones ...
> s(rapply2(m.ch.A4, object.size))
       pivoted      unpivoted    
simpl1 94056 bytes  866816 bytes 
simpl0 94056 bytes  866816 bytes 
super0 203744 bytes 1672976 bytes
> 
> ## Which is nicely visualized by lattice-based methods for 'image'
> inm <- c("pivoted", "unpivoted")
> jnm <- c("simpl1", "simpl0", "super0")
> for(i in 1:2)
+   for(j in 1:3)
+     print(image(m.ch.A4[[c(i, j)]], main = paste(inm[i], jnm[j])),
+           split = c(j, i, 3L, 2L), more = i * j < 6L)
> 
> simpl1 <- ch.A4[[c("pivoted", "simpl1")]]
> stopifnot(exprs = {
+     length(simpl1@perm) == ncol(A4)
+     isPerm(simpl1@perm, 0L)
+     is.unsorted(simpl1@perm) # typically not the identity permutation
+ })
> 
> ## One can expand with and without D regardless of isLDL(.),
> ## but "without" requires L = L1 sqrt(D), which is conditional
> ## on min(diag(D)) >= 0, hence "with" is the default
> isLDL(simpl1)
[1] TRUE
> stopifnot(min(diag(simpl1)) >= 0)
> str(e.ch.A4 <- expand2(simpl1, LDL =  TRUE), max.level = 2L) # default
List of 5
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L1 :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ D  :Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
 $ L1.:Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ P1 :Formal class 'pMatrix' [package "Matrix"] with 5 slots
> str(E.ch.A4 <- expand2(simpl1, LDL = FALSE), max.level = 2L)
List of 4
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L  :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ L. :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ P1 :Formal class 'pMatrix' [package "Matrix"] with 5 slots
> stopifnot(exprs = {
+     all.equal(E.ch.A4[["L" ]], e.ch.A4[["L1" ]] %*% sqrt(e.ch.A4[["D"]]))
+     all.equal(E.ch.A4[["L."]], sqrt(e.ch.A4[["D"]]) %*% e.ch.A4[["L1."]])
+     all.equal(A4, as(Reduce(`%*%`, e.ch.A4), "symmetricMatrix"))
+     all.equal(A4, as(Reduce(`%*%`, E.ch.A4), "symmetricMatrix"))
+ })
> 
> ## The "same" permutation matrix with "alternate" representation
> ## [i, perm[i]] {margin=1} <-> [invertPerm(perm)[j], j] {margin=2}
> alt <- function(P) {
+     P@margin <- 1L + !(P@margin - 1L) # 1 <-> 2
+     P@perm <- invertPerm(P@perm)
+     P
+ }
> 
> ## Expansions are elegant but inefficient (transposes are redundant)
> ## hence programmers should consider methods for 'expand1' and 'diag'
> stopifnot(exprs = {
+     identical(expand1(simpl1, "P1"), alt(e.ch.A4[["P1"]]))
+     identical(expand1(simpl1, "L"), E.ch.A4[["L"]])
+     identical(Diagonal(x = diag(simpl1)), e.ch.A4[["D"]])
+ })
> 
> ## chol(A, pivot = value) is a simple wrapper around
> ## Cholesky(A, perm = value, LDL = FALSE, super = FALSE),
> ## returning L' = sqrt(D) L1' _but_ giving no information
> ## about the permutation P1
> selectMethod("chol", "dsCMatrix")
Method Definition:

function (x, ...) 
{
    .local <- function (x, pivot = FALSE, ...) 
    {
        ch <- t(as(Cholesky(x, perm = pivot, LDL = FALSE, super = FALSE), 
            "dtCMatrix"))
        ch@Dimnames <- dimnames(x)
        ch
    }
    .local(x, ...)
}
<bytecode: 0x55da87e260e8>
<environment: namespace:Matrix>

Signatures:
        x          
target  "dsCMatrix"
defined "dsCMatrix"
> stopifnot(all.equal(chol(A4, pivot = TRUE), E.ch.A4[["L."]]))
> 
> ## Now a symmetric matrix with positive _and_ negative eigenvalues,
> ## hence _not_ positive semidefinite
> A5 <- new("dsCMatrix",
+           Dim = c(7L, 7L),
+           p = c(0:1, 3L, 6:7, 10:11, 15L),
+           i = c(0L, 0:1, 0:3, 2:5, 3:6),
+           x = c(1, 6, 38, 10, 60, 103, -4, 6, -32, -247, -2, -16, -128, -2, -67))
> (ev <- eigen(A5, only.values = TRUE)$values)
[1]  1.398039e+02  3.058801e+00  2.680774e-01 -8.437545e-03 -1.396242e-01
[6] -3.356906e+00 -3.176258e+02
> (t.ev <- table(factor(sign(ev), -1:1))) # the matrix "inertia"

-1  0  1 
 4  0  3 
> 
> ch.A5 <- Cholesky(A5)
> isLDL(ch.A5)
[1] TRUE
> (d.A5 <- diag(ch.A5)) # diag(D) is partly negative
[1] -2 -4 -1  9  1  2 -1
> 
> ## Sylvester's law of inertia holds here, but not in general
> ## in finite precision arithmetic
> stopifnot(identical(table(factor(sign(d.A5), -1:1)), t.ev))
> 
> try(expand1(ch.A5, "L"))         # unable to compute L = L1 sqrt(D)
Error in expand1(ch.A5, "L") : D[i,i] is negative, i=1
> try(expand2(ch.A5, LDL = FALSE)) # ditto
Error in .local(x, ...) : D[i,i] is negative, i=1
> try(chol(A5, pivot = TRUE))      # ditto
Warning in .local(A, ...) :
  CHOLMOD warning 'not positive definite' at file '../Cholesky/t_cholmod_rowfac.c', line 430
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'x' in selecting a method for function 't': leading principal minor of order 1 is not positive
> 
> ## The default expansion is "square root free" and still works here
> str(e.ch.A5 <- expand2(ch.A5, LDL = TRUE), max.level = 2L)
List of 5
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L1 :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ D  :Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
 $ L1.:Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ P1 :Formal class 'pMatrix' [package "Matrix"] with 5 slots
> stopifnot(all.equal(A5, as(Reduce(`%*%`, e.ch.A5), "symmetricMatrix")))
> 
> ## Version of the SuiteSparse library, which includes CHOLMOD
> Mv <- Matrix.Version()
> Mv[["SuiteSparse"]]
NULL
> 
> 
> 
> cleanEx()
> nameEx("CsparseMatrix-class")
> ### * CsparseMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CsparseMatrix-class
> ### Title: Class "CsparseMatrix" of Sparse Matrices in Column-compressed
> ###   Form
> ### Aliases: CsparseMatrix-class Arith,CsparseMatrix,CsparseMatrix-method
> ###   Arith,CsparseMatrix,numeric-method Arith,numeric,CsparseMatrix-method
> ###   Compare,CsparseMatrix,CsparseMatrix-method
> ###   Logic,CsparseMatrix,CsparseMatrix-method
> ###   coerce,matrix,CsparseMatrix-method coerce,vector,CsparseMatrix-method
> ###   diag,CsparseMatrix-method diag<-,CsparseMatrix-method
> ###   t,CsparseMatrix-method .validateCsparse
> ### Keywords: array classes
> 
> ### ** Examples
> 
> getClass("CsparseMatrix")
Virtual Class "CsparseMatrix" [package "Matrix"]

Slots:
                                          
Name:         i        p      Dim Dimnames
Class:  integer  integer  integer     list

Extends: 
Class "sparseMatrix", directly
Class "Matrix", by class "sparseMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 3

Known Subclasses: "ngCMatrix", "ntCMatrix", "nsCMatrix", "lgCMatrix", "ltCMatrix", "lsCMatrix", 
"dgCMatrix", "dtCMatrix", "dsCMatrix"
> 
> ## The common validity check function (based on C code):
> getValidity(getClass("CsparseMatrix"))
function (object) 
.Call(CsparseMatrix_validate, object)
<bytecode: 0x55da82b70768>
<environment: namespace:Matrix>
> 
> 
> 
> cleanEx()
> nameEx("Diagonal")
> ### * Diagonal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Diagonal
> ### Title: Construct a Diagonal Matrix
> ### Aliases: Diagonal .sparseDiagonal .trDiagonal .symDiagonal
> ### Keywords: array utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> Diagonal(3)
3 x 3 diagonal matrix of class "ddiMatrix"
     [,1] [,2] [,3]
[1,]    1    .    .
[2,]    .    1    .
[3,]    .    .    1
> Diagonal(x = 10^(3:1))
3 x 3 diagonal matrix of class "ddiMatrix"
     [,1] [,2] [,3]
[1,] 1000    .    .
[2,]    .  100    .
[3,]    .    .   10
> Diagonal(x = (1:4) >= 2)#-> "ldiMatrix"
4 x 4 diagonal matrix of class "ldiMatrix"
     [,1]  [,2] [,3] [,4]
[1,] FALSE    .    .    .
[2,]     . TRUE    .    .
[3,]     .    . TRUE    .
[4,]     .    .    . TRUE
> 
> ## Use Diagonal() + kronecker() for "repeated-block" matrices:
> M1 <- Matrix(0+0:5, 2,3)
> (M <- kronecker(Diagonal(3), M1))
6 x 9 sparse Matrix of class "dgCMatrix"
                      
[1,] . 2 4 . . . . . .
[2,] 1 3 5 . . . . . .
[3,] . . . . 2 4 . . .
[4,] . . . 1 3 5 . . .
[5,] . . . . . . . 2 4
[6,] . . . . . . 1 3 5
> 
> (S <- crossprod(Matrix(rbinom(60, size=1, prob=0.1), 10,6)))
6 x 6 sparse Matrix of class "dsCMatrix"
                
[1,] 2 . . . . .
[2,] . 1 . . . .
[3,] . . 1 . . .
[4,] . . . . . .
[5,] . . . . . .
[6,] . . . . . .
> (SI <- S + 10*.symDiagonal(6)) # sparse symmetric still
6 x 6 sparse Matrix of class "dsCMatrix"
                      
[1,] 12  .  .  .  .  .
[2,]  . 11  .  .  .  .
[3,]  .  . 11  .  .  .
[4,]  .  .  . 10  .  .
[5,]  .  .  .  . 10  .
[6,]  .  .  .  .  . 10
> stopifnot(is(SI, "dsCMatrix"))
> (I4 <- .sparseDiagonal(4, shape="t"))# now (2012-10) unitriangular
4 x 4 sparse Matrix of class "dtCMatrix" (unitriangular)
            
[1,] I . . .
[2,] . I . .
[3,] . . I .
[4,] . . . I
> stopifnot(I4@diag == "U", all(I4 == diag(4)))
> ## Don't show: 
>   L <- Diagonal(5, TRUE)
>   stopifnot(L@diag == "U", identical(L, Diagonal(5) > 0))
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("Hilbert")
> ### * Hilbert
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Hilbert
> ### Title: Generate a Hilbert matrix
> ### Aliases: Hilbert
> ### Keywords: array utilities
> 
> ### ** Examples
> 
> Hilbert(6)
6 x 6 Matrix of class "dpoMatrix"
          [,1]      [,2]      [,3]      [,4]      [,5]       [,6]
[1,] 1.0000000 0.5000000 0.3333333 0.2500000 0.2000000 0.16666667
[2,] 0.5000000 0.3333333 0.2500000 0.2000000 0.1666667 0.14285714
[3,] 0.3333333 0.2500000 0.2000000 0.1666667 0.1428571 0.12500000
[4,] 0.2500000 0.2000000 0.1666667 0.1428571 0.1250000 0.11111111
[5,] 0.2000000 0.1666667 0.1428571 0.1250000 0.1111111 0.10000000
[6,] 0.1666667 0.1428571 0.1250000 0.1111111 0.1000000 0.09090909
> 
> 
> 
> cleanEx()
> nameEx("KNex")
> ### * KNex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: KNex
> ### Title: Koenker-Ng Example Sparse Model Matrix and Response Vector
> ### Aliases: KNex
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> data(KNex, package = "Matrix")
> class(KNex$mm)
[1] "dgCMatrix"
attr(,"package")
[1] "Matrix"
> dim(KNex$mm)
[1] 1850  712
> image(KNex$mm)
> str(KNex)
List of 2
 $ mm:Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:8755] 0 2 25 27 163 165 1258 1261 1276 1278 ...
  .. ..@ p       : int [1:713] 0 13 17 26 38 43 52 56 61 67 ...
  .. ..@ Dim     : int [1:2] 1850 712
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:8755] 0.277 0.277 0.277 0.277 0.277 ...
  .. ..@ factors : list()
 $ y : num [1:1850] 64.07 5.88 64.03 5.96 76.41 ...
> 
> system.time( # a fraction of a second
+   sparse.sol <- with(KNex, solve(crossprod(mm), crossprod(mm, y))))
   user  system elapsed 
  0.005   0.000   0.004 
> 
> head(round(sparse.sol,3))
6 x 1 Matrix of class "dgeMatrix"
        [,1]
[1,] 823.361
[2,] 340.116
[3,] 472.976
[4,] 349.317
[5,] 187.560
[6,] 159.052
> 
> ## Compare with QR-based solution ("more accurate, but slightly slower"):
> system.time(
+   sp.sol2 <- with(KNex, qr.coef(qr(mm), y) ))
   user  system elapsed 
  0.009   0.000   0.009 
> 
> all.equal(sparse.sol, sp.sol2, tolerance = 1e-13) # TRUE
[1] "typeof(target) is \"S4\", typeof(current) is \"double\""                                       
[2] "class(target) is structure(\"dgeMatrix\", package = \"Matrix\"), class(current) is \"numeric\""
[3] "dim: < Modes: numeric, NULL >"                                                                 
[4] "dim: < Lengths: 2, 0 >"                                                                        
[5] "dim: < target is numeric, current is NULL >"                                                   
> 
> 
> 
> cleanEx()
> nameEx("KhatriRao")
> ### * KhatriRao
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: KhatriRao
> ### Title: Khatri-Rao Matrix Product
> ### Aliases: KhatriRao
> ### Keywords: algebra arith array utilities
> 
> ### ** Examples
> 
> ## Example with very small matrices:
> m <- matrix(1:12,3,4)
> d <- diag(1:4)
> KhatriRao(m,d)
12 x 4 sparse Matrix of class "dgCMatrix"
                
 [1,] 1  .  .  .
 [2,] .  8  .  .
 [3,] .  . 21  .
 [4,] .  .  . 40
 [5,] 2  .  .  .
 [6,] . 10  .  .
 [7,] .  . 24  .
 [8,] .  .  . 44
 [9,] 3  .  .  .
[10,] . 12  .  .
[11,] .  . 27  .
[12,] .  .  . 48
> KhatriRao(d,m)
12 x 4 sparse Matrix of class "dgCMatrix"
                
 [1,] 1  .  .  .
 [2,] 2  .  .  .
 [3,] 3  .  .  .
 [4,] .  8  .  .
 [5,] . 10  .  .
 [6,] . 12  .  .
 [7,] .  . 21  .
 [8,] .  . 24  .
 [9,] .  . 27  .
[10,] .  .  . 40
[11,] .  .  . 44
[12,] .  .  . 48
> dimnames(m) <- list(LETTERS[1:3], letters[1:4])
> KhatriRao(m,d, make.dimnames=TRUE)
12 x 4 sparse Matrix of class "dgCMatrix"
      a  b  c  d
 [1,] 1  .  .  .
 [2,] .  8  .  .
 [3,] .  . 21  .
 [4,] .  .  . 40
 [5,] 2  .  .  .
 [6,] . 10  .  .
 [7,] .  . 24  .
 [8,] .  .  . 44
 [9,] 3  .  .  .
[10,] . 12  .  .
[11,] .  . 27  .
[12,] .  .  . 48
> KhatriRao(d,m, make.dimnames=TRUE)
12 x 4 sparse Matrix of class "dgCMatrix"
                
 [1,] 1  .  .  .
 [2,] 2  .  .  .
 [3,] 3  .  .  .
 [4,] .  8  .  .
 [5,] . 10  .  .
 [6,] . 12  .  .
 [7,] .  . 21  .
 [8,] .  . 24  .
 [9,] .  . 27  .
[10,] .  .  . 40
[11,] .  .  . 44
[12,] .  .  . 48
> dimnames(d) <- list(NULL, paste0("D", 1:4))
> KhatriRao(m,d, make.dimnames=TRUE)
12 x 4 sparse Matrix of class "dgCMatrix"
      a  b  c  d
 [1,] 1  .  .  .
 [2,] .  8  .  .
 [3,] .  . 21  .
 [4,] .  .  . 40
 [5,] 2  .  .  .
 [6,] . 10  .  .
 [7,] .  . 24  .
 [8,] .  .  . 44
 [9,] 3  .  .  .
[10,] . 12  .  .
[11,] .  . 27  .
[12,] .  .  . 48
> KhatriRao(d,m, make.dimnames=TRUE)
12 x 4 sparse Matrix of class "dgCMatrix"
      D1 D2 D3 D4
 [1,]  1  .  .  .
 [2,]  2  .  .  .
 [3,]  3  .  .  .
 [4,]  .  8  .  .
 [5,]  . 10  .  .
 [6,]  . 12  .  .
 [7,]  .  . 21  .
 [8,]  .  . 24  .
 [9,]  .  . 27  .
[10,]  .  .  . 40
[11,]  .  .  . 44
[12,]  .  .  . 48
> dimnames(d) <- list(paste0("d", 10*1:4), paste0("D", 1:4))
> (Kmd <- KhatriRao(m,d, make.dimnames=TRUE))
12 x 4 sparse Matrix of class "dgCMatrix"
      a  b  c  d
d10:A 1  .  .  .
d20:A .  8  .  .
d30:A .  . 21  .
d40:A .  .  . 40
d10:B 2  .  .  .
d20:B . 10  .  .
d30:B .  . 24  .
d40:B .  .  . 44
d10:C 3  .  .  .
d20:C . 12  .  .
d30:C .  . 27  .
d40:C .  .  . 48
> (Kdm <- KhatriRao(d,m, make.dimnames=TRUE))
12 x 4 sparse Matrix of class "dgCMatrix"
      D1 D2 D3 D4
A:d10  1  .  .  .
B:d10  2  .  .  .
C:d10  3  .  .  .
A:d20  .  8  .  .
B:d20  . 10  .  .
C:d20  . 12  .  .
A:d30  .  . 21  .
B:d30  .  . 24  .
C:d30  .  . 27  .
A:d40  .  .  . 40
B:d40  .  .  . 44
C:d40  .  .  . 48
> 
> nm <- as(m, "nsparseMatrix")
> nd <- as(d, "nsparseMatrix")
> KhatriRao(nm,nd, make.dimnames=TRUE)
12 x 4 sparse Matrix of class "ngCMatrix"
      a b c d
d10:A | . . .
d20:A . | . .
d30:A . . | .
d40:A . . . |
d10:B | . . .
d20:B . | . .
d30:B . . | .
d40:B . . . |
d10:C | . . .
d20:C . | . .
d30:C . . | .
d40:C . . . |
> KhatriRao(nd,nm, make.dimnames=TRUE)
12 x 4 sparse Matrix of class "ngCMatrix"
      D1 D2 D3 D4
A:d10  |  .  .  .
B:d10  |  .  .  .
C:d10  |  .  .  .
A:d20  .  |  .  .
B:d20  .  |  .  .
C:d20  .  |  .  .
A:d30  .  .  |  .
B:d30  .  .  |  .
C:d30  .  .  |  .
A:d40  .  .  .  |
B:d40  .  .  .  |
C:d40  .  .  .  |
> 
> stopifnot(dim(KhatriRao(m,d)) == c(nrow(m)*nrow(d), ncol(d)))
> ## border cases / checks:
> zm <- nm; zm[] <- FALSE # all FALSE matrix
> stopifnot(all(K1 <- KhatriRao(nd, zm) == 0), identical(dim(K1), c(12L, 4L)),
+           all(K2 <- KhatriRao(zm, nd) == 0), identical(dim(K2), c(12L, 4L)))
> 
> d0 <- d; d0[] <- 0; m0 <- Matrix(d0[-1,])
> stopifnot(all(K3 <- KhatriRao(d0, m) == 0), identical(dim(K3), dim(Kdm)),
+ 	  all(K4 <- KhatriRao(m, d0) == 0), identical(dim(K4), dim(Kmd)),
+ 	  all(KhatriRao(d0, d0) == 0), all(KhatriRao(m0, d0) == 0),
+ 	  all(KhatriRao(d0, m0) == 0), all(KhatriRao(m0, m0) == 0),
+ 	  identical(dimnames(KhatriRao(m, d0, make.dimnames=TRUE)), dimnames(Kmd)))
> 
> ## a matrix with "structural" and non-structural zeros:
> m01 <- new("dgCMatrix", i = c(0L, 2L, 0L, 1L), p = c(0L, 0L, 0L, 2L, 4L),
+            Dim = 3:4, x = c(1, 0, 1, 0))
> D4 <- Diagonal(4, x=1:4) # "as" d
> DU <- Diagonal(4)# unit-diagonal: uplo="U"
> (K5  <- KhatriRao( d, m01))
12 x 4 sparse Matrix of class "dgCMatrix"
             
 [1,] . . . .
 [2,] . . . .
 [3,] . . . .
 [4,] . . . .
 [5,] . . . .
 [6,] . . . .
 [7,] . . 3 .
 [8,] . . . .
 [9,] . . 0 .
[10,] . . . 4
[11,] . . . 0
[12,] . . . .
> K5d  <- KhatriRao( d, m01, sparseY=FALSE)
> K5Dd <- KhatriRao(D4, m01, sparseY=FALSE)
> K5Ud <- KhatriRao(DU, m01, sparseY=FALSE)
> (K6  <- KhatriRao(diag(3),     t(m01)))
12 x 3 sparse Matrix of class "dgCMatrix"
           
 [1,] . . .
 [2,] . . .
 [3,] 1 . .
 [4,] 1 . .
 [5,] . . .
 [6,] . . .
 [7,] . . .
 [8,] . 0 .
 [9,] . . .
[10,] . . .
[11,] . . 0
[12,] . . .
> K6D  <- KhatriRao(Diagonal(3), t(m01))
> K6d  <- KhatriRao(diag(3),     t(m01), sparseY=FALSE)
> K6Dd <- KhatriRao(Diagonal(3), t(m01), sparseY=FALSE)
> stopifnot(exprs = {
+     all(K5 == K5d)
+     identical(cbind(c(7L, 10L), c(3L, 4L)),
+               which(K5 != 0, arr.ind = TRUE, useNames=FALSE))
+     identical(K5d, K5Dd)
+     identical(K6, K6D)
+     all(K6 == K6d)
+     identical(cbind(3:4, 1L),
+               which(K6 != 0, arr.ind = TRUE, useNames=FALSE))
+     identical(K6d, K6Dd)
+ })
> 
> 
> 
> cleanEx()
> nameEx("LU-class")
> ### * LU-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: denseLU-class
> ### Title: Dense LU Factorizations
> ### Aliases: denseLU-class coerce,denseLU,dgeMatrix-method
> ###   determinant,denseLU,logical-method
> ### Keywords: algebra array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("denseLU")
Class "denseLU" [package "Matrix"]

Slots:
                                          
Name:         x     perm      Dim Dimnames
Class:  numeric  integer  integer     list

Extends: 
Class "LU", directly
Class "MatrixFactorization", by class "LU", distance 2
> set.seed(1)
> 
> n <- 3L
> (A <- Matrix(round(rnorm(n * n), 2L), n, n))
3 x 3 Matrix of class "dgeMatrix"
      [,1]  [,2] [,3]
[1,] -0.63  1.60 0.49
[2,]  0.18  0.33 0.74
[3,] -0.84 -0.82 0.58
> 
> ## With dimnames, to see that they are propagated :
> dimnames(A) <- dn <- list(paste0("r", seq_len(n)),
+                           paste0("c", seq_len(n)))
> 
> (lu.A <- lu(A))
LU factorization of Formal class 'denseLU' [package "Matrix"] with 4 slots
  ..@ x       : num [1:9] -0.84 0.75 -0.214 -0.82 2.215 ...
  ..@ perm    : int [1:3] 3 3 3
  ..@ Dim     : int [1:2] 3 3
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:3] "r1" "r2" "r3"
  .. ..$ : chr [1:3] "c1" "c2" "c3"
> str(e.lu.A <- expand2(lu.A), max.level = 2L)
List of 3
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L  :Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
 $ U  :Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
> 
> ## Underlying LAPACK representation
> (m.lu.A <- as(lu.A, "dgeMatrix")) # which is L and U interlaced
3 x 3 Matrix of class "dgeMatrix"
           [,1]        [,2]      [,3]
[1,] -0.8400000 -0.82000000 0.5800000
[2,]  0.7500000  2.21500000 0.0550000
[3,] -0.2142857  0.06965495 0.8604547
> stopifnot(identical(as(m.lu.A, "matrix"), `dim<-`(lu.A@x, lu.A@Dim)))
> 
> ae1 <- function(a, b, ...) all.equal(as(a, "matrix"), as(b, "matrix"), ...)
> ae2 <- function(a, b, ...) ae1(unname(a), unname(b), ...)
> 
> ## A ~ P1' L U in floating point
> stopifnot(exprs = {
+     identical(names(e.lu.A), c("P1.", "L", "U"))
+     identical(e.lu.A[["P1."]],
+               new(  "pMatrix", Dim = c(n, n), Dimnames = c(dn[1L], list(NULL)),
+                   margin = 1L, perm = invertPerm(asPerm(lu.A@perm))))
+     identical(e.lu.A[["L"]],
+               new("dtrMatrix", Dim = c(n, n), Dimnames = list(NULL, NULL),
+                   uplo = "L", diag = "U", x = lu.A@x))
+     identical(e.lu.A[["U"]],
+               new("dtrMatrix", Dim = c(n, n), Dimnames = c(list(NULL), dn[2L]),
+                   uplo = "U", diag = "N", x = lu.A@x))
+     ae1(A, with(e.lu.A, P1. %*% L %*% U))
+     ae2(A[asPerm(lu.A@perm), ], with(e.lu.A, L %*% U))
+ })
> 
> ## Factorization handled as factorized matrix
> b <- rnorm(n)
> stopifnot(identical(det(A), det(lu.A)),
+           identical(solve(A, b), solve(lu.A, b)))
> 
> 
> 
> cleanEx()
> nameEx("Matrix-class")
> ### * Matrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Matrix-class
> ### Title: Virtual Class "Matrix" of Matrices
> ### Aliases: Matrix-class !,Matrix-method &,Matrix,ddiMatrix-method
> ###   &,Matrix,ldiMatrix-method &,Matrix,ndiMatrix-method
> ###   *,Matrix,ddiMatrix-method *,Matrix,ldiMatrix-method
> ###   *,Matrix,ndiMatrix-method +,Matrix,missing-method
> ###   -,Matrix,missing-method Arith,Matrix,Matrix-method
> ###   Arith,Matrix,lsparseMatrix-method Arith,Matrix,nsparseMatrix-method
> ###   Logic,ANY,Matrix-method Logic,Matrix,ANY-method
> ###   Logic,Matrix,nMatrix-method Math2,Matrix-method Ops,ANY,Matrix-method
> ###   Ops,Matrix,ANY-method Ops,Matrix,NULL-method
> ###   Ops,Matrix,ddiMatrix-method Ops,Matrix,ldiMatrix-method
> ###   Ops,Matrix,matrix-method Ops,Matrix,sparseVector-method
> ###   Ops,NULL,Matrix-method Ops,matrix,Matrix-method
> ###   ^,Matrix,ddiMatrix-method ^,Matrix,ldiMatrix-method
> ###   ^,Matrix,ndiMatrix-method as.array,Matrix-method
> ###   as.complex,Matrix-method as.integer,Matrix-method
> ###   as.logical,Matrix-method as.matrix,Matrix-method
> ###   as.numeric,Matrix-method as.vector,Matrix-method
> ###   coerce,ANY,Matrix-method coerce,Matrix,CsparseMatrix-method
> ###   coerce,Matrix,RsparseMatrix-method coerce,Matrix,TsparseMatrix-method
> ###   coerce,Matrix,corMatrix-method coerce,Matrix,dMatrix-method
> ###   coerce,Matrix,ddenseMatrix-method coerce,Matrix,denseMatrix-method
> ###   coerce,Matrix,diagonalMatrix-method coerce,Matrix,dpoMatrix-method
> ###   coerce,Matrix,dppMatrix-method coerce,Matrix,dsparseMatrix-method
> ###   coerce,Matrix,generalMatrix-method coerce,Matrix,indMatrix-method
> ###   coerce,Matrix,lMatrix-method coerce,Matrix,ldenseMatrix-method
> ###   coerce,Matrix,lsparseMatrix-method coerce,Matrix,matrix-method
> ###   coerce,Matrix,nMatrix-method coerce,Matrix,ndenseMatrix-method
> ###   coerce,Matrix,nsparseMatrix-method coerce,Matrix,pMatrix-method
> ###   coerce,Matrix,packedMatrix-method coerce,Matrix,pcorMatrix-method
> ###   coerce,Matrix,sparseMatrix-method coerce,Matrix,sparseVector-method
> ###   coerce,Matrix,symmetricMatrix-method
> ###   coerce,Matrix,triangularMatrix-method
> ###   coerce,Matrix,unpackedMatrix-method coerce,matrix,Matrix-method
> ###   coerce,vector,Matrix-method determinant,Matrix,missing-method
> ###   determinant,Matrix,logical-method dim,Matrix-method
> ###   dimnames,Matrix-method dimnames<-,Matrix,NULL-method
> ###   dimnames<-,Matrix,list-method drop,Matrix-method head,Matrix-method
> ###   initialize,Matrix-method length,Matrix-method tail,Matrix-method
> ###   unname,Matrix-method zapsmall,Matrix-method c.Matrix Matrix.Version
> ###   det
> ### Keywords: array classes
> 
> ### ** Examples
> 
> slotNames("Matrix")
[1] "Dim"      "Dimnames"
> 
> cl <- getClass("Matrix")
> names(cl@subclasses) # more than 40 ..
 [1] "compMatrix"       "triangularMatrix" "nMatrix"          "lMatrix"         
 [5] "iMatrix"          "dMatrix"          "zMatrix"          "denseMatrix"     
 [9] "sparseMatrix"     "generalMatrix"    "symmetricMatrix"  "ndenseMatrix"    
[13] "ldenseMatrix"     "ddenseMatrix"     "unpackedMatrix"   "packedMatrix"    
[17] "ndenseMatrix"     "ldenseMatrix"     "ddenseMatrix"     "CsparseMatrix"   
[21] "RsparseMatrix"    "TsparseMatrix"    "diagonalMatrix"   "nsparseMatrix"   
[25] "lsparseMatrix"    "dsparseMatrix"    "ngeMatrix"        "ntrMatrix"       
[29] "nsyMatrix"        "ntpMatrix"        "nspMatrix"        "lgeMatrix"       
[33] "ltrMatrix"        "lsyMatrix"        "ltpMatrix"        "lspMatrix"       
[37] "dgeMatrix"        "dtrMatrix"        "dsyMatrix"        "dpoMatrix"       
[41] "corMatrix"        "dtpMatrix"        "dspMatrix"        "dppMatrix"       
[45] "pcorMatrix"       "ngCMatrix"        "ntCMatrix"        "nsCMatrix"       
[49] "ngRMatrix"        "ntRMatrix"        "nsRMatrix"        "ngTMatrix"       
[53] "ntTMatrix"        "nsTMatrix"        "ndiMatrix"        "lgCMatrix"       
[57] "ltCMatrix"        "lsCMatrix"        "lgRMatrix"        "ltRMatrix"       
[61] "lsRMatrix"        "lgTMatrix"        "ltTMatrix"        "lsTMatrix"       
[65] "ldiMatrix"        "dgCMatrix"        "dtCMatrix"        "dsCMatrix"       
[69] "dgRMatrix"        "dtRMatrix"        "dsRMatrix"        "dgTMatrix"       
[73] "dtTMatrix"        "dsTMatrix"        "ddiMatrix"        "indMatrix"       
[77] "pMatrix"         
> 
> showClass("Matrix")#> output with slots and all subclasses
Virtual Class "Matrix" [package "Matrix"]

Slots:
                        
Name:       Dim Dimnames
Class:  integer     list

Extends: "replValueSp"

Known Subclasses: 
Class "compMatrix", directly
Class "triangularMatrix", directly
Class "nMatrix", directly
Class "lMatrix", directly
Class "iMatrix", directly
Class "dMatrix", directly
Class "zMatrix", directly
Class "denseMatrix", directly
Class "sparseMatrix", directly
Class "generalMatrix", by class "compMatrix", distance 2
Class "symmetricMatrix", by class "compMatrix", distance 2
Class "ndenseMatrix", by class "nMatrix", distance 2
Class "ldenseMatrix", by class "lMatrix", distance 2
Class "ddenseMatrix", by class "dMatrix", distance 2
Class "unpackedMatrix", by class "denseMatrix", distance 2
Class "packedMatrix", by class "denseMatrix", distance 2
Class "ndenseMatrix", by class "denseMatrix", distance 2
Class "ldenseMatrix", by class "denseMatrix", distance 2
Class "ddenseMatrix", by class "denseMatrix", distance 2
Class "CsparseMatrix", by class "sparseMatrix", distance 2
Class "RsparseMatrix", by class "sparseMatrix", distance 2
Class "TsparseMatrix", by class "sparseMatrix", distance 2
Class "diagonalMatrix", by class "sparseMatrix", distance 2
Class "nsparseMatrix", by class "nMatrix", distance 2
Class "lsparseMatrix", by class "lMatrix", distance 2
Class "dsparseMatrix", by class "dMatrix", distance 2
Class "ngeMatrix", by class "unpackedMatrix", distance 3
Class "ntrMatrix", by class "unpackedMatrix", distance 3
Class "nsyMatrix", by class "unpackedMatrix", distance 3
Class "ntpMatrix", by class "packedMatrix", distance 3
Class "nspMatrix", by class "packedMatrix", distance 3
Class "lgeMatrix", by class "unpackedMatrix", distance 3
Class "ltrMatrix", by class "unpackedMatrix", distance 3
Class "lsyMatrix", by class "unpackedMatrix", distance 3
Class "ltpMatrix", by class "packedMatrix", distance 3
Class "lspMatrix", by class "packedMatrix", distance 3
Class "dgeMatrix", by class "unpackedMatrix", distance 3
Class "dtrMatrix", by class "unpackedMatrix", distance 3
Class "dsyMatrix", by class "unpackedMatrix", distance 3
Class "dpoMatrix", by class "dsyMatrix", distance 4
Class "corMatrix", by class "dpoMatrix", distance 5
Class "dtpMatrix", by class "packedMatrix", distance 3
Class "dspMatrix", by class "packedMatrix", distance 3
Class "dppMatrix", by class "dspMatrix", distance 4
Class "pcorMatrix", by class "dppMatrix", distance 5
Class "ngCMatrix", by class "CsparseMatrix", distance 3
Class "ntCMatrix", by class "CsparseMatrix", distance 3
Class "nsCMatrix", by class "CsparseMatrix", distance 3
Class "ngRMatrix", by class "RsparseMatrix", distance 3
Class "ntRMatrix", by class "RsparseMatrix", distance 3
Class "nsRMatrix", by class "RsparseMatrix", distance 3
Class "ngTMatrix", by class "TsparseMatrix", distance 3
Class "ntTMatrix", by class "TsparseMatrix", distance 3
Class "nsTMatrix", by class "TsparseMatrix", distance 3
Class "ndiMatrix", by class "diagonalMatrix", distance 3
Class "lgCMatrix", by class "CsparseMatrix", distance 3
Class "ltCMatrix", by class "CsparseMatrix", distance 3
Class "lsCMatrix", by class "CsparseMatrix", distance 3
Class "lgRMatrix", by class "RsparseMatrix", distance 3
Class "ltRMatrix", by class "RsparseMatrix", distance 3
Class "lsRMatrix", by class "RsparseMatrix", distance 3
Class "lgTMatrix", by class "TsparseMatrix", distance 3
Class "ltTMatrix", by class "TsparseMatrix", distance 3
Class "lsTMatrix", by class "TsparseMatrix", distance 3
Class "ldiMatrix", by class "diagonalMatrix", distance 3
Class "dgCMatrix", by class "CsparseMatrix", distance 3
Class "dtCMatrix", by class "CsparseMatrix", distance 3
Class "dsCMatrix", by class "CsparseMatrix", distance 3
Class "dgRMatrix", by class "RsparseMatrix", distance 3
Class "dtRMatrix", by class "RsparseMatrix", distance 3
Class "dsRMatrix", by class "RsparseMatrix", distance 3
Class "dgTMatrix", by class "TsparseMatrix", distance 3
Class "dtTMatrix", by class "TsparseMatrix", distance 3
Class "dsTMatrix", by class "TsparseMatrix", distance 3
Class "ddiMatrix", by class "diagonalMatrix", distance 3
Class "indMatrix", by class "sparseMatrix", distance 2
Class "pMatrix", by class "indMatrix", distance 4
> 
> (M <- Matrix(c(0,1,0,0), 6, 4))
6 x 4 sparse Matrix of class "dgCMatrix"
            
[1,] . . . .
[2,] 1 . 1 .
[3,] . . . .
[4,] . 1 . 1
[5,] . . . .
[6,] 1 . 1 .
> dim(M)
[1] 6 4
> diag(M)
[1] 0 0 0 1
> cm <- M[1:4,] + 10*Diagonal(4)
> diff(M)
5 x 4 sparse Matrix of class "dgCMatrix"
                
[1,]  1  .  1  .
[2,] -1  . -1  .
[3,]  .  1  .  1
[4,]  . -1  . -1
[5,]  1  .  1  .
> ## can reshape it even :
> dim(M) <- c(2, 12)
> M
2 x 12 sparse Matrix of class "dgCMatrix"
                            
[1,] . . . . . . . . . . . .
[2,] 1 . 1 . 1 . 1 . 1 . 1 .
> stopifnot(identical(M, Matrix(c(0,1,0,0), 2,12)),
+           all.equal(det(cm),
+                     determinant(as(cm,"matrix"), log=FALSE)$modulus,
+                     check.attributes=FALSE))
> 
> 
> 
> cleanEx()
> nameEx("Matrix")
> ### * Matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Matrix
> ### Title: Construct a Classed Matrix
> ### Aliases: Matrix
> ### Keywords: array utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> Matrix(0, 3, 2)             # 3 by 2 matrix of zeros -> sparse
3 x 2 sparse Matrix of class "dgCMatrix"
        
[1,] . .
[2,] . .
[3,] . .
> Matrix(0, 3, 2, sparse=FALSE)# -> 'dense'
3 x 2 Matrix of class "dgeMatrix"
     [,1] [,2]
[1,]    0    0
[2,]    0    0
[3,]    0    0
> 
> ## 4 cases - 3 different results :
> Matrix(0, 2, 2)              # diagonal !
2 x 2 diagonal matrix of class "ddiMatrix"
     [,1] [,2]
[1,]    0    .
[2,]    .    0
> Matrix(0, 2, 2, sparse=FALSE)# (ditto)
2 x 2 diagonal matrix of class "ddiMatrix"
     [,1] [,2]
[1,]    0    .
[2,]    .    0
> Matrix(0, 2, 2,               doDiag=FALSE)# -> sparse symm. "dsCMatrix"
2 x 2 sparse Matrix of class "dsCMatrix"
        
[1,] . .
[2,] . .
> Matrix(0, 2, 2, sparse=FALSE, doDiag=FALSE)# -> dense  symm. "dsyMatrix"
2 x 2 Matrix of class "dsyMatrix"
     [,1] [,2]
[1,]    0    0
[2,]    0    0
> 
> Matrix(1:6, 3, 2)           # a 3 by 2 matrix (+ integer warning)
3 x 2 Matrix of class "dgeMatrix"
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6
> Matrix(1:6 + 1, nrow=3)
3 x 2 Matrix of class "dgeMatrix"
     [,1] [,2]
[1,]    2    5
[2,]    3    6
[3,]    4    7
> 
> ## logical ones:
> Matrix(diag(4) >  0) # -> "ldiMatrix" with diag = "U"
4 x 4 diagonal matrix of class "ldiMatrix"
     [,1] [,2] [,3] [,4]
[1,] TRUE    .    .    .
[2,]    . TRUE    .    .
[3,]    .    . TRUE    .
[4,]    .    .    . TRUE
> Matrix(diag(4) >  0, sparse=TRUE) #  (ditto)
4 x 4 diagonal matrix of class "ldiMatrix"
     [,1] [,2] [,3] [,4]
[1,] TRUE    .    .    .
[2,]    . TRUE    .    .
[3,]    .    . TRUE    .
[4,]    .    .    . TRUE
> Matrix(diag(4) >= 0) # -> "lsyMatrix" (of all 'TRUE')
4 x 4 Matrix of class "lsyMatrix"
     [,1] [,2] [,3] [,4]
[1,] TRUE TRUE TRUE TRUE
[2,] TRUE TRUE TRUE TRUE
[3,] TRUE TRUE TRUE TRUE
[4,] TRUE TRUE TRUE TRUE
> ## triangular
> l3 <- upper.tri(matrix(,3,3))
> (M <- Matrix(l3))   # -> "ltCMatrix"
3 x 3 sparse Matrix of class "ltCMatrix"
          
[1,] . | |
[2,] . . |
[3,] . . .
> Matrix(! l3)        # -> "ltrMatrix"
3 x 3 Matrix of class "ltrMatrix"
     [,1]  [,2]  [,3] 
[1,]  TRUE     .     .
[2,]  TRUE  TRUE     .
[3,]  TRUE  TRUE  TRUE
> as(l3, "CsparseMatrix")# "lgCMatrix"
3 x 3 sparse Matrix of class "ltCMatrix"
          
[1,] . | |
[2,] . . |
[3,] . . .
> 
> Matrix(1:9, nrow=3,
+        dimnames = list(c("a", "b", "c"), c("A", "B", "C")))
3 x 3 Matrix of class "dgeMatrix"
  A B C
a 1 4 7
b 2 5 8
c 3 6 9
> (I3 <- Matrix(diag(3)))# identity, i.e., unit "diagonalMatrix"
3 x 3 diagonal matrix of class "ddiMatrix"
     [,1] [,2] [,3]
[1,]    1    .    .
[2,]    .    1    .
[3,]    .    .    1
> str(I3) # note  'diag = "U"' and the empty 'x' slot
Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
  ..@ diag    : chr "U"
  ..@ Dim     : int [1:2] 3 3
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num(0) 
> 
> (A <- cbind(a=c(2,1), b=1:2))# symmetric *apart* from dimnames
     a b
[1,] 2 1
[2,] 1 2
> Matrix(A)                    # hence 'dgeMatrix'
2 x 2 Matrix of class "dgeMatrix"
     a b
[1,] 2 1
[2,] 1 2
> (As <- Matrix(A, dimnames = list(NULL,NULL)))# -> symmetric
2 x 2 Matrix of class "dsyMatrix"
     [,1] [,2]
[1,]    2    1
[2,]    1    2
> forceSymmetric(A) # also symmetric, w/ symm. dimnames
2 x 2 Matrix of class "dsyMatrix"
  a b
a 2 1
b 1 2
> stopifnot(is(As, "symmetricMatrix"),
+           is(Matrix(0, 3,3), "sparseMatrix"),
+           is(Matrix(FALSE, 1,1), "sparseMatrix"))
> 
> 
> 
> cleanEx()
> nameEx("MatrixClass")
> ### * MatrixClass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MatrixClass
> ### Title: The Matrix (Super-) Class of a Class
> ### Aliases: MatrixClass
> ### Keywords: utilities
> 
> ### ** Examples
> 
> mkA <- setClass("A", contains="dgCMatrix")
> (A <- mkA())
0 x 0 sparse Matrix of class "A"
<0 x 0 matrix>
> stopifnot(identical(
+      MatrixClass("A"),
+      "dgCMatrix"))
> 
> 
> 
> cleanEx()
> nameEx("MatrixFactorization-class")
> ### * MatrixFactorization-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MatrixFactorization-class
> ### Title: Virtual Class "MatrixFactorization" of Matrix Factorizations
> ### Aliases: MatrixFactorization-class BunchKaufmanFactorization-class
> ###   CholeskyFactorization-class SchurFactorization-class LU-class
> ###   QR-class determinant,MatrixFactorization,missing-method
> ###   dim,MatrixFactorization-method dimnames,MatrixFactorization-method
> ###   dimnames<-,MatrixFactorization,NULL-method
> ###   dimnames<-,MatrixFactorization,list-method
> ###   length,MatrixFactorization-method show,MatrixFactorization-method
> ###   unname,MatrixFactorization-method
> ###   show,BunchKaufmanFactorization-method
> ###   show,CholeskyFactorization-method show,SchurFactorization-method
> ###   show,LU-method show,QR-method
> ### Keywords: algebra array classes
> 
> ### ** Examples
> 
> showClass("MatrixFactorization")
Virtual Class "MatrixFactorization" [package "Matrix"]

Slots:
                        
Name:       Dim Dimnames
Class:  integer     list

Known Subclasses: 
Class "LU", directly
Class "QR", directly
Class "BunchKaufmanFactorization", directly
Class "CholeskyFactorization", directly
Class "SchurFactorization", directly
Class "denseLU", by class "LU", distance 2
Class "sparseLU", by class "LU", distance 2
Class "sparseQR", by class "QR", distance 2
Class "BunchKaufman", by class "BunchKaufmanFactorization", distance 2
Class "pBunchKaufman", by class "BunchKaufmanFactorization", distance 2
Class "Cholesky", by class "CholeskyFactorization", distance 2
Class "pCholesky", by class "CholeskyFactorization", distance 2
Class "CHMfactor", by class "CholeskyFactorization", distance 2
Class "CHMsimpl", by class "CholeskyFactorization", distance 3
Class "CHMsuper", by class "CholeskyFactorization", distance 3
Class "nCHMsimpl", by class "CholeskyFactorization", distance 4
Class "dCHMsimpl", by class "CholeskyFactorization", distance 4
Class "nCHMsuper", by class "CholeskyFactorization", distance 4
Class "dCHMsuper", by class "CholeskyFactorization", distance 4
Class "Schur", by class "SchurFactorization", distance 2
> 
> 
> 
> cleanEx()
> nameEx("RsparseMatrix-class")
> ### * RsparseMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RsparseMatrix-class
> ### Title: Class "RsparseMatrix" of Sparse Matrices in Row-compressed Form
> ### Aliases: RsparseMatrix-class coerce,matrix,RsparseMatrix-method
> ###   coerce,vector,RsparseMatrix-method diag,RsparseMatrix-method
> ###   diag<-,RsparseMatrix-method t,RsparseMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("RsparseMatrix")
Virtual Class "RsparseMatrix" [package "Matrix"]

Slots:
                                          
Name:         p        j      Dim Dimnames
Class:  integer  integer  integer     list

Extends: 
Class "sparseMatrix", directly
Class "Matrix", by class "sparseMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 3

Known Subclasses: "ngRMatrix", "ntRMatrix", "nsRMatrix", "lgRMatrix", "ltRMatrix", "lsRMatrix", 
"dgRMatrix", "dtRMatrix", "dsRMatrix"
> 
> 
> 
> cleanEx()
> nameEx("Schur-class")
> ### * Schur-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Schur-class
> ### Title: Schur Factorizations
> ### Aliases: Schur-class determinant,Schur,logical-method
> ### Keywords: algebra array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("Schur")
Class "Schur" [package "Matrix"]

Slots:
                                                   
Name:         Q        T  EValues      Dim Dimnames
Class:   Matrix   Matrix   number  integer     list

Extends: 
Class "SchurFactorization", directly
Class "MatrixFactorization", by class "SchurFactorization", distance 2
> set.seed(0)
> 
> n <- 4L
> (A <- Matrix(rnorm(n * n), n, n))
4 x 4 Matrix of class "dgeMatrix"
           [,1]       [,2]         [,3]       [,4]
[1,]  1.2629543  0.4146414 -0.005767173 -1.1476570
[2,] -0.3262334 -1.5399500  2.404653389 -0.2894616
[3,]  1.3297993 -0.9285670  0.763593461 -0.2992151
[4,]  1.2724293 -0.2947204 -0.799009249 -0.4115108
> 
> ## With dimnames, to see that they are propagated :
> dimnames(A) <- list(paste0("r", seq_len(n)),
+                     paste0("c", seq_len(n)))
> 
> (sch.A <- Schur(A))
Schur factorization of Formal class 'Schur' [package "Matrix"] with 5 slots
  ..@ Q       :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
  .. .. ..@ Dim     : int [1:2] 4 4
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:16] -0.6269 -0.4428 -0.6348 -0.0889 -0.5919 ...
  .. .. ..@ factors : list()
  ..@ T       :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
  .. .. ..@ Dim     : int [1:2] 4 4
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:16] 1.387 0 0 0 0.996 ...
  .. .. ..@ factors : list()
  ..@ EValues : cplx [1:4] 1.39+0i -0.31+1.56i -0.31-1.56i ...
  ..@ Dim     : int [1:2] 4 4
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:4] "r1" "r2" "r3" "r4"
  .. ..$ : chr [1:4] "c1" "c2" "c3" "c4"
> str(e.sch.A <- expand2(sch.A), max.level = 2L)
List of 3
 $ Q :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
 $ T :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
 $ Q.:Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
> 
> ## A ~ Q T Q' in floating point
> stopifnot(exprs = {
+     identical(names(e.sch.A), c("Q", "T", "Q."))
+     all.equal(A, with(e.sch.A, Q %*% T %*% Q.))
+ })
> 
> ## Factorization handled as factorized matrix
> b <- rnorm(n)
> stopifnot(all.equal(det(A), det(sch.A)),
+           all.equal(solve(A, b), solve(sch.A, b)))
> 
> ## One of the non-general cases:
> Schur(Diagonal(6L))
Schur factorization of Formal class 'Schur' [package "Matrix"] with 5 slots
  ..@ Q       :Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
  .. .. ..@ diag    : chr "U"
  .. .. ..@ Dim     : int [1:2] 6 6
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num(0) 
  ..@ T       :Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
  .. .. ..@ diag    : chr "U"
  .. .. ..@ Dim     : int [1:2] 6 6
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num(0) 
  ..@ EValues : num [1:6] 1 1 1 1 1 1
  ..@ Dim     : int [1:2] 6 6
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> 
> 
> 
> cleanEx()
> nameEx("Schur")
> ### * Schur
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Schur-methods
> ### Title: Methods for Schur Factorization
> ### Aliases: Schur Schur-methods Schur,dgeMatrix-method
> ###   Schur,diagonalMatrix-method Schur,dsyMatrix-method
> ###   Schur,generalMatrix-method Schur,matrix-method
> ###   Schur,symmetricMatrix-method Schur,triangularMatrix-method
> ### Keywords: algebra array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showMethods("Schur", inherited = FALSE)
Function: Schur (package Matrix)
x="dgeMatrix"
x="diagonalMatrix"
x="dsyMatrix"
x="generalMatrix"
x="matrix"
x="symmetricMatrix"
x="triangularMatrix"

> set.seed(0)
> 
> Schur(Hilbert(9L)) # real eigenvalues
Schur factorization of Formal class 'Schur' [package "Matrix"] with 5 slots
  ..@ Q       :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
  .. .. ..@ Dim     : int [1:2] 9 9
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:81] 0.709 0.429 0.318 0.255 0.215 ...
  .. .. ..@ factors : list()
  ..@ T       :Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
  .. .. ..@ diag    : chr "N"
  .. .. ..@ Dim     : int [1:2] 9 9
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:9] 1.73 3.22e-01 3.10e-02 1.98e-03 8.76e-05 ...
  ..@ EValues : num [1:9] 1.73 3.22e-01 3.10e-02 1.98e-03 8.76e-05 ...
  ..@ Dim     : int [1:2] 9 9
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> 
> (A <- Matrix(round(rnorm(25L, sd = 100)), 5L, 5L))
5 x 5 Matrix of class "dgeMatrix"
     [,1] [,2] [,3] [,4] [,5]
[1,]  126 -154   76  -41  -22
[2,]  -33  -93  -80   25   38
[3,]  133  -29 -115  -89   13
[4,]  127   -1  -29   44   80
[5,]   41  240  -30 -124   -6
> (sch.A <- Schur(A)) # complex eigenvalues
Schur factorization of Formal class 'Schur' [package "Matrix"] with 5 slots
  ..@ Q       :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
  .. .. ..@ Dim     : int [1:2] 5 5
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:25] 0.217 0.589 0.218 0.172 -0.727 ...
  .. .. ..@ factors : list()
  ..@ T       :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
  .. .. ..@ Dim     : int [1:2] 5 5
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:25] -174 0 0 0 0 ...
  .. .. ..@ factors : list()
  ..@ EValues : cplx [1:5] -174+0i -127+0i 171+0i ...
  ..@ Dim     : int [1:2] 5 5
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> 
> ## A ~ Q T Q' in floating point
> str(e.sch.A <- expand2(sch.A), max.level = 2L)
List of 3
 $ Q :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
 $ T :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
 $ Q.:Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
> stopifnot(all.equal(A, Reduce(`%*%`, e.sch.A)))
> 
> (e1 <- eigen(sch.A@T, only.values = TRUE)$values)
[1] -174.40264+ 0.00000i  170.69832+ 0.00000i -127.02417+ 0.00000i
[4]   43.36424+84.24445i   43.36424-84.24445i
> (e2 <- eigen(    A  , only.values = TRUE)$values)
[1] -174.40264+ 0.00000i  170.69832+ 0.00000i -127.02417+ 0.00000i
[4]   43.36424+84.24445i   43.36424-84.24445i
> (e3 <- sch.A@EValues)
[1] -174.40264+ 0.00000i -127.02417+ 0.00000i  170.69832+ 0.00000i
[4]   43.36424+84.24445i   43.36424-84.24445i
> 
> stopifnot(exprs = {
+     all.equal(e1, e2, tolerance = 1e-13)
+     all.equal(e1, e3[order(Mod(e3), decreasing = TRUE)], tolerance = 1e-13) 
+     identical(Schur(A, vectors = FALSE),
+               list(T = sch.A@T, EValues = e3))    
+     identical(Schur(as(A, "matrix")),
+               list(Q = as(sch.A@Q, "matrix"),
+                    T = as(sch.A@T, "matrix"), EValues = e3))
+ })
> 
> 
> 
> cleanEx()
> nameEx("Subassign-methods")
> ### * Subassign-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Subassign-methods
> ### Title: Methods for "[<-" - Assigning to Subsets for 'Matrix'
> ### Aliases: [<- [<--methods Subassign-methods
> ###   [<-,CsparseMatrix,Matrix,missing,replValue-method
> ###   [<-,CsparseMatrix,index,index,replValue-method
> ###   [<-,CsparseMatrix,index,index,sparseVector-method
> ###   [<-,CsparseMatrix,index,missing,replValue-method
> ###   [<-,CsparseMatrix,index,missing,sparseVector-method
> ###   [<-,CsparseMatrix,matrix,missing,replValue-method
> ###   [<-,CsparseMatrix,missing,index,replValue-method
> ###   [<-,CsparseMatrix,missing,index,sparseVector-method
> ###   [<-,Matrix,ANY,ANY,ANY-method [<-,Matrix,ANY,ANY,Matrix-method
> ###   [<-,Matrix,ANY,ANY,matrix-method [<-,Matrix,ANY,missing,Matrix-method
> ###   [<-,Matrix,ANY,missing,matrix-method
> ###   [<-,Matrix,ldenseMatrix,missing,replValue-method
> ###   [<-,Matrix,lsparseMatrix,missing,replValue-method
> ###   [<-,Matrix,matrix,missing,replValue-method
> ###   [<-,Matrix,missing,ANY,Matrix-method
> ###   [<-,Matrix,missing,ANY,matrix-method
> ###   [<-,Matrix,ndenseMatrix,missing,replValue-method
> ###   [<-,Matrix,nsparseMatrix,missing,replValue-method
> ###   [<-,RsparseMatrix,index,index,replValue-method
> ###   [<-,RsparseMatrix,index,index,sparseVector-method
> ###   [<-,RsparseMatrix,index,missing,replValue-method
> ###   [<-,RsparseMatrix,index,missing,sparseVector-method
> ###   [<-,RsparseMatrix,matrix,missing,replValue-method
> ###   [<-,RsparseMatrix,missing,index,replValue-method
> ###   [<-,RsparseMatrix,missing,index,sparseVector-method
> ###   [<-,TsparseMatrix,Matrix,missing,replValue-method
> ###   [<-,TsparseMatrix,index,index,replValue-method
> ###   [<-,TsparseMatrix,index,index,sparseVector-method
> ###   [<-,TsparseMatrix,index,missing,replValue-method
> ###   [<-,TsparseMatrix,index,missing,sparseVector-method
> ###   [<-,TsparseMatrix,matrix,missing,replValue-method
> ###   [<-,TsparseMatrix,missing,index,replValue-method
> ###   [<-,TsparseMatrix,missing,index,sparseVector-method
> ###   [<-,denseMatrix,index,index,replValue-method
> ###   [<-,denseMatrix,index,missing,replValue-method
> ###   [<-,denseMatrix,matrix,missing,replValue-method
> ###   [<-,denseMatrix,missing,index,replValue-method
> ###   [<-,denseMatrix,missing,missing,ANY-method
> ###   [<-,diagonalMatrix,index,index,replValue-method
> ###   [<-,diagonalMatrix,index,index,sparseMatrix-method
> ###   [<-,diagonalMatrix,index,index,sparseVector-method
> ###   [<-,diagonalMatrix,index,missing,replValue-method
> ###   [<-,diagonalMatrix,index,missing,sparseMatrix-method
> ###   [<-,diagonalMatrix,index,missing,sparseVector-method
> ###   [<-,diagonalMatrix,matrix,missing,replValue-method
> ###   [<-,diagonalMatrix,missing,index,replValue-method
> ###   [<-,diagonalMatrix,missing,index,sparseMatrix-method
> ###   [<-,diagonalMatrix,missing,index,sparseVector-method
> ###   [<-,diagonalMatrix,missing,missing,ANY-method
> ###   [<-,indMatrix,index,index,ANY-method
> ###   [<-,indMatrix,index,missing,ANY-method
> ###   [<-,indMatrix,missing,index,ANY-method
> ###   [<-,indMatrix,missing,missing,ANY-method
> ###   [<-,sparseMatrix,ANY,ANY,sparseMatrix-method
> ###   [<-,sparseMatrix,ANY,missing,sparseMatrix-method
> ###   [<-,sparseMatrix,missing,ANY,sparseMatrix-method
> ###   [<-,sparseMatrix,missing,missing,ANY-method
> ###   [<-,sparseVector,index,missing,replValueSp-method
> ###   [<-,sparseVector,sparseVector,missing,replValueSp-method
> ### Keywords: array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> set.seed(101)
> (a <- m <- Matrix(round(rnorm(7*4),2), nrow = 7))
7 x 4 Matrix of class "dgeMatrix"
      [,1]  [,2]  [,3]  [,4]
[1,] -0.33 -0.11 -0.24  0.71
[2,]  0.55  0.92 -0.19 -0.27
[3,] -0.67 -0.22 -0.85 -1.46
[4,]  0.21  0.53  0.06  0.74
[5,]  0.31 -0.79 -0.82 -1.41
[6,]  1.17  1.43 -2.05  0.47
[7,]  0.62 -1.47 -0.16 -0.12
> 
> a[] <- 2.2 # <<- replaces **every** entry
> a
7 x 4 Matrix of class "dgeMatrix"
     [,1] [,2] [,3] [,4]
[1,]  2.2  2.2  2.2  2.2
[2,]  2.2  2.2  2.2  2.2
[3,]  2.2  2.2  2.2  2.2
[4,]  2.2  2.2  2.2  2.2
[5,]  2.2  2.2  2.2  2.2
[6,]  2.2  2.2  2.2  2.2
[7,]  2.2  2.2  2.2  2.2
> ## as do these:
> a[,] <- 3 ; a[TRUE,] <- 4
> 
> m[2, 3]  <- 3.14 # simple number
> m[3, 3:4]<- 3:4  # simple numeric of length 2
> 
> ## sub matrix assignment:
> m[-(4:7), 3:4] <- cbind(1,2:4) #-> upper right corner of 'm'
> m[3:5, 2:3] <- 0
> m[6:7, 1:2] <- Diagonal(2)
> m
7 x 4 Matrix of class "dgeMatrix"
      [,1]  [,2]  [,3]  [,4]
[1,] -0.33 -0.11  1.00  2.00
[2,]  0.55  0.92  1.00  3.00
[3,] -0.67  0.00  0.00  4.00
[4,]  0.21  0.00  0.00  0.74
[5,]  0.31  0.00  0.00 -1.41
[6,]  1.00  0.00 -2.05  0.47
[7,]  0.00  1.00 -0.16 -0.12
> 
> ## rows or columns only:
> m[1,] <- 10
> m[,2] <- 1:7
> m[-(1:6), ] <- 3:0 # not the first 6 rows, i.e. only the 7th
> as(m, "sparseMatrix")
7 x 4 sparse Matrix of class "dgCMatrix"
                        
[1,] 10.00 1 10.00 10.00
[2,]  0.55 2  1.00  3.00
[3,] -0.67 3  .     4.00
[4,]  0.21 4  .     0.74
[5,]  0.31 5  .    -1.41
[6,]  1.00 6 -2.05  0.47
[7,]  3.00 2  1.00  .   
> 
> 
> 
> cleanEx()
> nameEx("TsparseMatrix-class")
> ### * TsparseMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TsparseMatrix-class
> ### Title: Class "TsparseMatrix" of Sparse Matrices in Triplet Form
> ### Aliases: TsparseMatrix-class coerce,matrix,TsparseMatrix-method
> ###   coerce,vector,TsparseMatrix-method diag,TsparseMatrix-method
> ###   diag<-,TsparseMatrix-method t,TsparseMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("TsparseMatrix")
Virtual Class "TsparseMatrix" [package "Matrix"]

Slots:
                                          
Name:         i        j      Dim Dimnames
Class:  integer  integer  integer     list

Extends: 
Class "sparseMatrix", directly
Class "Matrix", by class "sparseMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 3

Known Subclasses: "ngTMatrix", "ntTMatrix", "nsTMatrix", "lgTMatrix", "ltTMatrix", "lsTMatrix", 
"dgTMatrix", "dtTMatrix", "dsTMatrix"
> ## or just the subclasses' names
> names(getClass("TsparseMatrix")@subclasses)
[1] "ngTMatrix" "ntTMatrix" "nsTMatrix" "lgTMatrix" "ltTMatrix" "lsTMatrix"
[7] "dgTMatrix" "dtTMatrix" "dsTMatrix"
> 
> T3 <- spMatrix(3,4, i=c(1,3:1), j=c(2,4:2), x=1:4)
> T3 # only 3 non-zero entries, 5 = 1+4 !
3 x 4 sparse Matrix of class "dgTMatrix"
            
[1,] . 5 . .
[2,] . . 3 .
[3,] . . . 2
> ## Don't show: 
> stopifnot(nnzero(T3) == 3)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("USCounties")
> ### * USCounties
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: USCounties
> ### Title: Contiguity Matrix of U.S. Counties
> ### Aliases: USCounties
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> data(USCounties, package = "Matrix")
> (n <- ncol(USCounties))
[1] 3111
> I <- .symDiagonal(n)
> 
> set.seed(1)
> r <- 50L
> rho <- 1 / runif(r, 0, 0.5)
> 
> system.time(MJ0 <- sapply(rho, function(mult)
+     determinant(USCounties + mult * I, logarithm = TRUE)$modulus))
   user  system elapsed 
  0.517   0.004   0.521 
> 
> ## Can be done faster by updating the Cholesky factor:
> 
> C1 <- Cholesky(USCounties, Imult = 2)
> system.time(MJ1 <- sapply(rho, function(mult)
+     determinant(update(C1, USCounties, mult), sqrt = FALSE)$modulus))
   user  system elapsed 
  0.172   0.000   0.171 
> stopifnot(all.equal(MJ0, MJ1))
> 
> C2 <- Cholesky(USCounties, super = TRUE, Imult = 2)
> system.time(MJ2 <- sapply(rho, function(mult)
+     determinant(update(C2, USCounties, mult), sqrt = FALSE)$modulus))
   user  system elapsed 
  0.191   0.072   0.134 
> stopifnot(all.equal(MJ0, MJ2))
> 
> 
> 
> cleanEx()
> nameEx("Xtrct-methods")
> ### * Xtrct-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Subscript-methods
> ### Title: Methods for "[": Extraction or Subsetting in Package 'Matrix'
> ### Aliases: [ [-methods Subscript-methods [,Matrix,ANY,NULL,ANY-method
> ###   [,Matrix,NULL,ANY,ANY-method [,Matrix,NULL,NULL,ANY-method
> ###   [,Matrix,index,index,logical-method
> ###   [,Matrix,index,index,missing-method
> ###   [,Matrix,index,missing,logical-method
> ###   [,Matrix,index,missing,missing-method
> ###   [,Matrix,lMatrix,missing,missing-method
> ###   [,Matrix,matrix,missing,missing-method
> ###   [,Matrix,missing,index,logical-method
> ###   [,Matrix,missing,index,missing-method
> ###   [,Matrix,missing,missing,logical-method
> ###   [,Matrix,missing,missing,missing-method
> ###   [,Matrix,nMatrix,missing,missing-method
> ###   [,abIndex,index,ANY,ANY-method [,sparseVector,NULL,ANY,ANY-method
> ###   [,sparseVector,index,missing,missing-method
> ###   [,sparseVector,lsparseVector,missing,missing-method
> ###   [,sparseVector,missing,missing,missing-method
> ###   [,sparseVector,nsparseVector,missing,missing-method
> ### Keywords: array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> str(m <- Matrix(round(rnorm(7*4),2), nrow = 7))
Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
  ..@ Dim     : int [1:2] 7 4
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:28] -0.63 0.18 -0.84 1.6 0.33 -0.82 0.49 0.74 0.58 -0.31 ...
  ..@ factors : list()
> stopifnot(identical(m, m[]))
> m[2, 3]   # simple number
[1] -0.04
> m[2, 3:4] # simple numeric of length 2
[1] -0.04  0.07
> m[2, 3:4, drop=FALSE] # sub matrix of class 'dgeMatrix'
1 x 2 Matrix of class "dgeMatrix"
      [,1] [,2]
[1,] -0.04 0.07
> ## rows or columns only:
> m[1,]     # first row, as simple numeric vector
[1] -0.63  0.74  1.12  0.78
> m[,1:2]   # sub matrix of first two columns
7 x 2 Matrix of class "dgeMatrix"
      [,1]  [,2]
[1,] -0.63  0.74
[2,]  0.18  0.58
[3,] -0.84 -0.31
[4,]  1.60  1.51
[5,]  0.33  0.39
[6,] -0.82 -0.62
[7,]  0.49 -2.21
> 
> showMethods("[", inherited = FALSE)
Function: [ (package base)
x="Matrix", i="ANY", j="NULL", drop="ANY"
x="Matrix", i="NULL", j="ANY", drop="ANY"
x="Matrix", i="NULL", j="NULL", drop="ANY"
x="Matrix", i="index", j="index", drop="logical"
x="Matrix", i="index", j="index", drop="missing"
x="Matrix", i="index", j="missing", drop="logical"
x="Matrix", i="index", j="missing", drop="missing"
x="Matrix", i="lMatrix", j="missing", drop="missing"
x="Matrix", i="matrix", j="missing", drop="missing"
x="Matrix", i="missing", j="index", drop="logical"
x="Matrix", i="missing", j="index", drop="missing"
x="Matrix", i="missing", j="missing", drop="logical"
x="Matrix", i="missing", j="missing", drop="missing"
x="Matrix", i="nMatrix", j="missing", drop="missing"
x="abIndex", i="index", j="ANY", drop="ANY"
x="nonStructure", i="ANY", j="ANY", drop="ANY"
x="sparseVector", i="NULL", j="ANY", drop="ANY"
x="sparseVector", i="index", j="missing", drop="missing"
x="sparseVector", i="lsparseVector", j="missing", drop="missing"
x="sparseVector", i="missing", j="missing", drop="missing"
x="sparseVector", i="nsparseVector", j="missing", drop="missing"

> 
> 
> 
> cleanEx()
> nameEx("abIndex-class")
> ### * abIndex-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: abIndex-class
> ### Title: Class "abIndex" of Abstract Index Vectors
> ### Aliases: abIndex-class seqMat-class Arith,abIndex,abIndex-method
> ###   Arith,abIndex,numLike-method Arith,numLike,abIndex-method
> ###   Ops,ANY,abIndex-method Ops,abIndex,ANY-method
> ###   Ops,abIndex,abIndex-method Summary,abIndex-method
> ###   as.integer,abIndex-method as.numeric,abIndex-method
> ###   as.vector,abIndex-method coerce,abIndex,integer-method
> ###   coerce,abIndex,numeric-method coerce,abIndex,seqMat-method
> ###   coerce,abIndex,vector-method coerce,logical,abIndex-method
> ###   coerce,numeric,abIndex-method drop,abIndex-method
> ###   length,abIndex-method show,abIndex-method
> ###   coerce,numeric,seqMat-method coerce,seqMat,abIndex-method
> ###   coerce,seqMat,numeric-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("abIndex")
Class "abIndex" [package "Matrix"]

Slots:
                                    
Name:       kind         x      rleD
Class: character   numeric   rleDiff
> ii <- c(-3:40, 20:70)
> str(ai <- as(ii, "abIndex"))# note
Formal class 'abIndex' [package "Matrix"] with 3 slots
  ..@ kind: chr "rleDiff"
  ..@ x   : int(0) 
  ..@ rleD:Formal class 'rleDiff' [package "Matrix"] with 2 slots
  .. .. ..@ first: int -3
  .. .. ..@ rle  :List of 2
  .. .. .. ..$ lengths: int [1:3] 43 1 50
  .. .. .. ..$ values : int [1:3] 1 -20 1
  .. .. .. ..- attr(*, "class")= chr "rle"
> ai # -> show() method
Abstract Index vector (class 'abIndex') of length 95, kind "rleDiff"
 and slot "rleD":
 RLE difference (class 'rleDiff'): first = -3, "rle":
   Run Length Encoding
     lengths: int [1:3] 43 1 50
     values : int [1:3] 1 -20 1
> 
> stopifnot(identical(-3:20,
+                     as(abIseq1(-3,20), "vector")))
> 
> 
> 
> cleanEx()
> nameEx("abIseq")
> ### * abIseq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: abIseq
> ### Title: Sequence Generation of "abIndex", Abstract Index Vectors
> ### Aliases: abIseq abIseq1 c.abIndex
> ### Keywords: manip utilities
> 
> ### ** Examples
> 
> stopifnot(identical(-3:20,
+                     as(abIseq1(-3,20), "vector")))
> 
> try( ## (arithmetic) not yet implemented
+ abIseq(1, 50, by = 3)
+ )
Error : >(<abIndex>, <numeric>) is not yet implemented; ask maintainer("Matrix") to implement the missing method
> 
> 
> 
> 
> cleanEx()
> nameEx("all.equal-methods")
> ### * all.equal-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: all.equal-methods
> ### Title: Matrix Package Methods for Function all.equal()
> ### Aliases: all.equal all.equal-methods all.equal,Matrix,Matrix-method
> ###   all.equal,Matrix,sparseVector-method all.equal,Matrix,vector-method
> ###   all.equal,abIndex,abIndex-method all.equal,abIndex,numLike-method
> ###   all.equal,numLike,abIndex-method all.equal,sparseVector,Matrix-method
> ###   all.equal,sparseVector,sparseVector-method
> ###   all.equal,sparseVector,vector-method all.equal,vector,Matrix-method
> ###   all.equal,vector,sparseVector-method
> ### Keywords: arith logic methods programming
> 
> ### ** Examples
> 
> showMethods("all.equal")
Function: all.equal (package base)
target="ANY", current="ANY"
target="Matrix", current="Matrix"
target="Matrix", current="sparseVector"
target="Matrix", current="vector"
target="abIndex", current="abIndex"
target="abIndex", current="numLike"
target="complex", current="complex"
    (inherited from: target="ANY", current="ANY")
target="dCHMsimpl", current="dCHMsimpl"
    (inherited from: target="ANY", current="ANY")
target="dgeMatrix", current="dgeMatrix"
    (inherited from: target="Matrix", current="Matrix")
target="dgeMatrix", current="numeric"
    (inherited from: target="Matrix", current="vector")
target="dsCMatrix", current="dsCMatrix"
    (inherited from: target="Matrix", current="Matrix")
target="dsparseVector", current="dsparseVector"
    (inherited from: target="sparseVector", current="sparseVector")
target="dtCMatrix", current="dtCMatrix"
    (inherited from: target="Matrix", current="Matrix")
target="dtrMatrix", current="dtrMatrix"
    (inherited from: target="Matrix", current="Matrix")
target="matrix", current="matrix"
    (inherited from: target="ANY", current="ANY")
target="numLike", current="abIndex"
target="numeric", current="numeric"
    (inherited from: target="ANY", current="ANY")
target="sparseVector", current="Matrix"
target="sparseVector", current="sparseVector"
target="sparseVector", current="vector"
target="vector", current="Matrix"
target="vector", current="sparseVector"

> 
> (A <- spMatrix(3,3, i= c(1:3,2:1), j=c(3:1,1:2), x = 1:5))
3 x 3 sparse Matrix of class "dgTMatrix"
          
[1,] . 5 1
[2,] 4 2 .
[3,] 3 . .
> ex <- expand(lu. <- lu(A))
> stopifnot( all.equal(as(A[lu.@p + 1L, lu.@q + 1L], "CsparseMatrix"),
+                      lu.@L %*% lu.@U),
+            with(ex, all.equal(as(P %*% A %*% t(Q), "CsparseMatrix"),
+                               L %*% U)),
+            with(ex, all.equal(as(A, "CsparseMatrix"),
+                               t(P) %*% L %*% U %*% Q)))
> 
> 
> 
> cleanEx()
> nameEx("atomicVector-class")
> ### * atomicVector-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: atomicVector-class
> ### Title: Virtual Class "atomicVector" of Atomic Vectors
> ### Aliases: atomicVector-class Ops,atomicVector,sparseVector-method
> ###   coerce,atomicVector,dsparseVector-method
> ###   coerce,atomicVector,sparseVector-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("atomicVector")
Virtual Class "atomicVector" [package "Matrix"]

No Slots, prototype of class "logical"

Known Subclasses: 
Class "logical", directly
Class "numeric", directly
Class "complex", directly
Class "raw", directly
Class "character", directly
Class "integer", by class "numeric", distance 2
Class "double", by class "numeric", distance 2
Class "signature", by class "character", distance 2
Class "className", by class "character", distance 2
Class "ObjectsWithPackage", by class "character", distance 2
Class "factor", by class "numeric", distance 3
Class "ordered", by class "numeric", distance 4
> 
> 
> 
> cleanEx()
> nameEx("band")
> ### * band
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: band-methods
> ### Title: Extract bands of a matrix
> ### Aliases: band band-methods triu triu-methods tril tril-methods
> ###   band,CsparseMatrix-method band,RsparseMatrix-method
> ###   band,TsparseMatrix-method band,denseMatrix-method
> ###   band,diagonalMatrix-method band,indMatrix-method band,matrix-method
> ###   triu,CsparseMatrix-method triu,RsparseMatrix-method
> ###   triu,TsparseMatrix-method triu,denseMatrix-method
> ###   triu,diagonalMatrix-method triu,indMatrix-method triu,matrix-method
> ###   tril,CsparseMatrix-method tril,RsparseMatrix-method
> ###   tril,TsparseMatrix-method tril,denseMatrix-method
> ###   tril,diagonalMatrix-method tril,indMatrix-method tril,matrix-method
> ### Keywords: array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> ## A random sparse matrix :
> set.seed(7)
> m <- matrix(0, 5, 5)
> m[sample(length(m), size = 14)] <- rep(1:9, length=14)
> (mm <- as(m, "CsparseMatrix"))
5 x 5 sparse Matrix of class "dgCMatrix"
              
[1,] . . 2 . 9
[2,] 4 3 4 . .
[3,] 7 6 . 1 .
[4,] . . . 2 5
[5,] . 1 5 8 3
> 
> tril(mm)        # lower triangle
5 x 5 sparse Matrix of class "dtCMatrix"
              
[1,] . . . . .
[2,] 4 3 . . .
[3,] 7 6 . . .
[4,] . . . 2 .
[5,] . 1 5 8 3
> tril(mm, -1)    # strict lower triangle
5 x 5 sparse Matrix of class "dtCMatrix"
              
[1,] . . . . .
[2,] 4 . . . .
[3,] 7 6 . . .
[4,] . . . . .
[5,] . 1 5 8 .
> triu(mm,  1)    # strict upper triangle
5 x 5 sparse Matrix of class "dtCMatrix"
              
[1,] . . 2 . 9
[2,] . . 4 . .
[3,] . . . 1 .
[4,] . . . . 5
[5,] . . . . .
> band(mm, -1, 2) # general band
5 x 5 sparse Matrix of class "dgCMatrix"
              
[1,] . . 2 . .
[2,] 4 3 4 . .
[3,] . 6 . 1 .
[4,] . . . 2 5
[5,] . . . 8 3
> (m5 <- Matrix(rnorm(25), ncol = 5))
5 x 5 Matrix of class "dgeMatrix"
            [,1]       [,2]       [,3]       [,4]        [,5]
[1,] -0.53818915 -0.6319189 -0.3003816  0.5830777  0.01100886
[2,]  1.31664590 -0.8959369 -0.1591494  0.3259286  0.50627692
[3,] -1.50902855  1.0237546 -0.4689997 -0.2875874  0.40997329
[4,] -0.02387779  0.8084547  0.9013132 -0.8881565 -0.04562258
[5,] -0.35252883 -0.1082370  1.8316257 -0.6010564 -0.19032738
> tril(m5)        # lower triangle
5 x 5 Matrix of class "dtrMatrix"
     [,1]        [,2]        [,3]        [,4]        [,5]       
[1,] -0.53818915           .           .           .           .
[2,]  1.31664590 -0.89593695           .           .           .
[3,] -1.50902855  1.02375457 -0.46899973           .           .
[4,] -0.02387779  0.80845475  0.90131316 -0.88815653           .
[5,] -0.35252883 -0.10823695  1.83162570 -0.60105640 -0.19032738
> tril(m5, -1)    # strict lower triangle
5 x 5 Matrix of class "dtrMatrix"
     [,1]        [,2]        [,3]        [,4]        [,5]       
[1,]  0.00000000           .           .           .           .
[2,]  1.31664590  0.00000000           .           .           .
[3,] -1.50902855  1.02375457  0.00000000           .           .
[4,] -0.02387779  0.80845475  0.90131316  0.00000000           .
[5,] -0.35252883 -0.10823695  1.83162570 -0.60105640  0.00000000
> triu(m5, 1)     # strict upper triangle
5 x 5 Matrix of class "dtrMatrix"
     [,1]        [,2]        [,3]        [,4]        [,5]       
[1,]  0.00000000 -0.63191893 -0.30038157  0.58307770  0.01100886
[2,]           .  0.00000000 -0.15914936  0.32592858  0.50627692
[3,]           .           .  0.00000000 -0.28758745  0.40997329
[4,]           .           .           .  0.00000000 -0.04562258
[5,]           .           .           .           .  0.00000000
> band(m5, -1, 2) # general band
5 x 5 Matrix of class "dgeMatrix"
           [,1]       [,2]       [,3]       [,4]        [,5]
[1,] -0.5381891 -0.6319189 -0.3003816  0.0000000  0.00000000
[2,]  1.3166459 -0.8959369 -0.1591494  0.3259286  0.00000000
[3,]  0.0000000  1.0237546 -0.4689997 -0.2875874  0.40997329
[4,]  0.0000000  0.0000000  0.9013132 -0.8881565 -0.04562258
[5,]  0.0000000  0.0000000  0.0000000 -0.6010564 -0.19032738
> (m65 <- Matrix(rnorm(30), ncol = 5))  # not square
6 x 5 Matrix of class "dgeMatrix"
           [,1]       [,2]        [,3]       [,4]        [,5]
[1,]  0.2564325  0.6478339  0.18137487 -1.7200493  0.96484367
[2,]  0.3076799 -1.4121579 -0.37199734 -0.8282303 -0.06740435
[3,]  0.1705786  0.7132121 -0.89222280 -0.2632791 -0.76809014
[4,] -0.1561042 -0.2101720 -0.03456105  0.6318391 -0.46436630
[5,]  1.4958478 -2.3905787 -0.28704112  0.3296523 -0.99336354
[6,]  1.1677221 -0.9069923 -0.40203197  0.8040658 -1.23554166
> triu(m65)       # result not "dtrMatrix" unless square
6 x 5 Matrix of class "dgeMatrix"
          [,1]       [,2]       [,3]       [,4]        [,5]
[1,] 0.2564325  0.6478339  0.1813749 -1.7200493  0.96484367
[2,] 0.0000000 -1.4121579 -0.3719973 -0.8282303 -0.06740435
[3,] 0.0000000  0.0000000 -0.8922228 -0.2632791 -0.76809014
[4,] 0.0000000  0.0000000  0.0000000  0.6318391 -0.46436630
[5,] 0.0000000  0.0000000  0.0000000  0.0000000 -0.99336354
[6,] 0.0000000  0.0000000  0.0000000  0.0000000  0.00000000
> (sm5 <- crossprod(m65)) # symmetric
5 x 5 Matrix of class "dpoMatrix"
           [,1]      [,2]       [,3]       [,4]      [,5]
[1,]  3.8150258 -4.748956 -1.1135761  0.5925862 -2.760542
[2,] -4.7489565  9.504224  1.0645738 -1.7826242  3.765370
[3,] -1.1135761  1.064574  1.2125572 -0.2086916  1.683293
[4,]  0.5925862 -1.782624 -0.2086916  4.8682638 -3.015856
[5,] -2.7605419  3.765370  1.6832926 -3.0158564  4.254399
>    band(sm5, -1, 1)# "dsyMatrix": symmetric band preserves symmetry property
5 x 5 Matrix of class "dsyMatrix"
          [,1]      [,2]       [,3]       [,4]      [,5]
[1,]  3.815026 -4.748956  0.0000000  0.0000000  0.000000
[2,] -4.748956  9.504224  1.0645738  0.0000000  0.000000
[3,]  0.000000  1.064574  1.2125572 -0.2086916  0.000000
[4,]  0.000000  0.000000 -0.2086916  4.8682638 -3.015856
[5,]  0.000000  0.000000  0.0000000 -3.0158564  4.254399
> as(band(sm5, -1, 1), "sparseMatrix")# often preferable
5 x 5 sparse Matrix of class "dsCMatrix"
                                                        
[1,]  3.815026 -4.748956  .          .          .       
[2,] -4.748956  9.504224  1.0645738  .          .       
[3,]  .         1.064574  1.2125572 -0.2086916  .       
[4,]  .         .        -0.2086916  4.8682638 -3.015856
[5,]  .         .         .         -3.0158564  4.254399
> (sm <- round(crossprod(triu(mm/2)))) # sparse symmetric ("dsC*")
5 x 5 sparse Matrix of class "dsCMatrix"
               
[1,] . . . .  .
[2,] . 2 3 .  .
[3,] . 3 5 .  4
[4,] . . . 1  2
[5,] . . 4 2 29
> band(sm, -1,1) # remains "dsC", *however*
5 x 5 sparse Matrix of class "dsCMatrix"
               
[1,] . . . .  .
[2,] . 2 3 .  .
[3,] . 3 5 .  .
[4,] . . . 1  2
[5,] . . . 2 29
> band(sm, -2,1) # -> "dgC"
5 x 5 sparse Matrix of class "dgCMatrix"
               
[1,] . . . .  .
[2,] . 2 3 .  .
[3,] . 3 5 .  .
[4,] . . . 1  2
[5,] . . 4 2 29
> ## Don't show: 
>  ## this uses special methods
> (x.x <- crossprod(mm))
5 x 5 sparse Matrix of class "dsCMatrix"
                    
[1,] 65 54 16  7   .
[2,] 54 46 17 14   3
[3,] 16 17 45 40  33
[4,]  7 14 40 69  34
[5,]  .  3 33 34 115
> tril(x.x)
5 x 5 sparse Matrix of class "dtCMatrix"
                    
[1,] 65  .  .  .   .
[2,] 54 46  .  .   .
[3,] 16 17 45  .   .
[4,]  7 14 40 69   .
[5,]  .  3 33 34 115
> xx <- tril(x.x) + triu(x.x, 1) ## the same as x.x (but stored differently):
> txx <- t(as(xx, "symmetricMatrix"))
> stopifnot(identical(triu(x.x), t(tril(x.x))),
+ 	  identical(class(x.x), class(txx)),
+ 	  identical(as(x.x, "generalMatrix"), as(txx, "generalMatrix")))
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("bandSparse")
> ### * bandSparse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bandSparse
> ### Title: Construct Sparse Banded Matrix from (Sup-/Super-) Diagonals
> ### Aliases: bandSparse
> ### Keywords: array utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> diags <- list(1:30, 10*(1:20), 100*(1:20))
> s1 <- bandSparse(13, k = -c(0:2, 6), diag = c(diags, diags[2]), symm=TRUE)
> s1
13 x 13 sparse Matrix of class "dsCMatrix"
                                                             
 [1,]   1  10 100   .   .   .  10   .   .    .    .    .    .
 [2,]  10   2  20 200   .   .   .  20   .    .    .    .    .
 [3,] 100  20   3  30 300   .   .   .  30    .    .    .    .
 [4,]   . 200  30   4  40 400   .   .   .   40    .    .    .
 [5,]   .   . 300  40   5  50 500   .   .    .   50    .    .
 [6,]   .   .   . 400  50   6  60 600   .    .    .   60    .
 [7,]  10   .   .   . 500  60   7  70 700    .    .    .   70
 [8,]   .  20   .   .   . 600  70   8  80  800    .    .    .
 [9,]   .   .  30   .   .   . 700  80   9   90  900    .    .
[10,]   .   .   .  40   .   .   . 800  90   10  100 1000    .
[11,]   .   .   .   .  50   .   .   . 900  100   11  110 1100
[12,]   .   .   .   .   .  60   .   .   . 1000  110   12  120
[13,]   .   .   .   .   .   .  70   .   .    . 1100  120   13
> s2 <- bandSparse(13, k =  c(0:2, 6), diag = c(diags, diags[2]), symm=TRUE)
> stopifnot(identical(s1, t(s2)), is(s1,"dsCMatrix"))
> 
> ## a pattern Matrix of *full* (sub-)diagonals:
> bk <- c(0:4, 7,9)
> (s3 <- bandSparse(30, k = bk, symm = TRUE))
30 x 30 sparse Matrix of class "nsCMatrix"
                                                                 
 [1,] | | | | | . . | . | . . . . . . . . . . . . . . . . . . . .
 [2,] | | | | | | . . | . | . . . . . . . . . . . . . . . . . . .
 [3,] | | | | | | | . . | . | . . . . . . . . . . . . . . . . . .
 [4,] | | | | | | | | . . | . | . . . . . . . . . . . . . . . . .
 [5,] | | | | | | | | | . . | . | . . . . . . . . . . . . . . . .
 [6,] . | | | | | | | | | . . | . | . . . . . . . . . . . . . . .
 [7,] . . | | | | | | | | | . . | . | . . . . . . . . . . . . . .
 [8,] | . . | | | | | | | | | . . | . | . . . . . . . . . . . . .
 [9,] . | . . | | | | | | | | | . . | . | . . . . . . . . . . . .
[10,] | . | . . | | | | | | | | | . . | . | . . . . . . . . . . .
[11,] . | . | . . | | | | | | | | | . . | . | . . . . . . . . . .
[12,] . . | . | . . | | | | | | | | | . . | . | . . . . . . . . .
[13,] . . . | . | . . | | | | | | | | | . . | . | . . . . . . . .
[14,] . . . . | . | . . | | | | | | | | | . . | . | . . . . . . .
[15,] . . . . . | . | . . | | | | | | | | | . . | . | . . . . . .
[16,] . . . . . . | . | . . | | | | | | | | | . . | . | . . . . .
[17,] . . . . . . . | . | . . | | | | | | | | | . . | . | . . . .
[18,] . . . . . . . . | . | . . | | | | | | | | | . . | . | . . .
[19,] . . . . . . . . . | . | . . | | | | | | | | | . . | . | . .
[20,] . . . . . . . . . . | . | . . | | | | | | | | | . . | . | .
[21,] . . . . . . . . . . . | . | . . | | | | | | | | | . . | . |
[22,] . . . . . . . . . . . . | . | . . | | | | | | | | | . . | .
[23,] . . . . . . . . . . . . . | . | . . | | | | | | | | | . . |
[24,] . . . . . . . . . . . . . . | . | . . | | | | | | | | | . .
[25,] . . . . . . . . . . . . . . . | . | . . | | | | | | | | | .
[26,] . . . . . . . . . . . . . . . . | . | . . | | | | | | | | |
[27,] . . . . . . . . . . . . . . . . . | . | . . | | | | | | | |
[28,] . . . . . . . . . . . . . . . . . . | . | . . | | | | | | |
[29,] . . . . . . . . . . . . . . . . . . . | . | . . | | | | | |
[30,] . . . . . . . . . . . . . . . . . . . . | . | . . | | | | |
> 
> ## If you want a pattern matrix, but with "sparse"-diagonals,
> ## you currently need to go via logical sparse:
> lLis <- lapply(list(rpois(20, 2), rpois(20, 1), rpois(20, 3))[c(1:3, 2:3, 3:2)],
+                as.logical)
> (s4 <- bandSparse(20, k = bk, symm = TRUE, diag = lLis))
20 x 20 sparse Matrix of class "lsCMatrix"
                                             
 [1,] | | | | | . . | . | . . . . . . . . . .
 [2,] | | : | : | . . | . : . . . . . . . . .
 [3,] | : | | | | | . . | . | . . . . . . . .
 [4,] | | | | : | : | . . | . : . . . . . . .
 [5,] | : | : | : | : | . . | . : . . . . . .
 [6,] . | | | : | | | | | . . | . | . . . . .
 [7,] . . | : | | | : : : : . . : . : . . . .
 [8,] | . . | : | : | | | | | . . | . | . . .
 [9,] . | . . | | : | | | | | | . . | . | . .
[10,] | . | . . | : | | : : | : | . . | . : .
[11,] . : . | . . : | | : | | | | | . . | . |
[12,] . . | . | . . | | | | | | | | | . . | .
[13,] . . . : . | . . | : | | | | | | | . . |
[14,] . . . . : . : . . | | | | | : | : | . .
[15,] . . . . . | . | . . | | | : | | | | | .
[16,] . . . . . . : . | . . | | | | | | | | |
[17,] . . . . . . . | . | . . | : | | | | | |
[18,] . . . . . . . . | . | . . | | | | | : |
[19,] . . . . . . . . . : . | . . | | | : | |
[20,] . . . . . . . . . . | . | . . | | | | |
> (s4. <- as(drop0(s4), "nsparseMatrix"))
20 x 20 sparse Matrix of class "nsCMatrix"
                                             
 [1,] | | | | | . . | . | . . . . . . . . . .
 [2,] | | . | . | . . | . . . . . . . . . . .
 [3,] | . | | | | | . . | . | . . . . . . . .
 [4,] | | | | . | . | . . | . . . . . . . . .
 [5,] | . | . | . | . | . . | . . . . . . . .
 [6,] . | | | . | | | | | . . | . | . . . . .
 [7,] . . | . | | | . . . . . . . . . . . . .
 [8,] | . . | . | . | | | | | . . | . | . . .
 [9,] . | . . | | . | | | | | | . . | . | . .
[10,] | . | . . | . | | . . | . | . . | . . .
[11,] . . . | . . . | | . | | | | | . . | . |
[12,] . . | . | . . | | | | | | | | | . . | .
[13,] . . . . . | . . | . | | | | | | | . . |
[14,] . . . . . . . . . | | | | | . | . | . .
[15,] . . . . . | . | . . | | | . | | | | | .
[16,] . . . . . . . . | . . | | | | | | | | |
[17,] . . . . . . . | . | . . | . | | | | | |
[18,] . . . . . . . . | . | . . | | | | | . |
[19,] . . . . . . . . . . . | . . | | | . | |
[20,] . . . . . . . . . . | . | . . | | | | |
> 
> n <- 1e4
> bk <- c(0:5, 7,11)
> bMat <- matrix(1:8, n, 8, byrow=TRUE)
> bLis <- as.data.frame(bMat)
> B  <- bandSparse(n, k = bk, diag = bLis)
> Bs <- bandSparse(n, k = bk, diag = bLis, symmetric=TRUE)
> B [1:15, 1:30]
15 x 30 sparse Matrix of class "dgCMatrix"
                                                                 
 [1,] 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . . . . . . .
 [2,] . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . . . . . .
 [3,] . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . . . . .
 [4,] . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . . . .
 [5,] . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . . .
 [6,] . . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . .
 [7,] . . . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . .
 [8,] . . . . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . .
 [9,] . . . . . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . .
[10,] . . . . . . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . .
[11,] . . . . . . . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . .
[12,] . . . . . . . . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . . .
[13,] . . . . . . . . . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . . .
[14,] . . . . . . . . . . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . . .
[15,] . . . . . . . . . . . . . . 1 2 3 4 5 6 . 7 . . . 8 . . . .
> Bs[1:15, 1:30]
15 x 30 sparse Matrix of class "dgCMatrix"
                                                                 
 [1,] 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . . . . . . .
 [2,] 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . . . . . .
 [3,] 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . . . . .
 [4,] 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . . . .
 [5,] 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . . .
 [6,] 6 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . . .
 [7,] . 6 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . . .
 [8,] 7 . 6 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . . .
 [9,] . 7 . 6 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . . .
[10,] . . 7 . 6 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . . .
[11,] . . . 7 . 6 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . . .
[12,] 8 . . . 7 . 6 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . . .
[13,] . 8 . . . 7 . 6 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . . .
[14,] . . 8 . . . 7 . 6 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . . .
[15,] . . . 8 . . . 7 . 6 5 4 3 2 1 2 3 4 5 6 . 7 . . . 8 . . . .
> ## can use a list *or* a matrix for specifying the diagonals:
> stopifnot(identical(B,  bandSparse(n, k = bk, diag = bMat)),
+ 	  identical(Bs, bandSparse(n, k = bk, diag = bMat, symmetric=TRUE))
+           , inherits(B, "dtCMatrix") # triangular!
+ )
> 
> 
> 
> cleanEx()
> nameEx("bdiag")
> ### * bdiag
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdiag
> ### Title: Construct a Block Diagonal Matrix
> ### Aliases: bdiag .bdiag
> ### Keywords: array utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> bdiag(matrix(1:4, 2), diag(3))
5 x 5 sparse Matrix of class "dgCMatrix"
              
[1,] 1 3 . . .
[2,] 2 4 . . .
[3,] . . 1 . .
[4,] . . . 1 .
[5,] . . . . 1
> ## combine "Matrix" class and traditional matrices:
> bdiag(Diagonal(2), matrix(1:3, 3,4), diag(3:2))
7 x 8 sparse Matrix of class "dgCMatrix"
                    
[1,] 1 . . . . . . .
[2,] . 1 . . . . . .
[3,] . . 1 1 1 1 . .
[4,] . . 2 2 2 2 . .
[5,] . . 3 3 3 3 . .
[6,] . . . . . . 3 .
[7,] . . . . . . . 2
> 
> mlist <- list(1, 2:3, diag(x=5:3), 27, cbind(1,3:6), 100:101)
> bdiag(mlist)
13 x 9 sparse Matrix of class "dgCMatrix"
                          
 [1,] 1 . . . .  . . .   .
 [2,] . 2 . . .  . . .   .
 [3,] . 3 . . .  . . .   .
 [4,] . . 5 . .  . . .   .
 [5,] . . . 4 .  . . .   .
 [6,] . . . . 3  . . .   .
 [7,] . . . . . 27 . .   .
 [8,] . . . . .  . 1 3   .
 [9,] . . . . .  . 1 4   .
[10,] . . . . .  . 1 5   .
[11,] . . . . .  . 1 6   .
[12,] . . . . .  . . . 100
[13,] . . . . .  . . . 101
> stopifnot(identical(bdiag(mlist), 
+                     bdiag(lapply(mlist, as.matrix))))
> 
> ml <- c(as(matrix((1:24)%% 11 == 0, 6,4),"nMatrix"),
+         rep(list(Diagonal(2, x=TRUE)), 3))
> mln <- c(ml, Diagonal(x = 1:3))
> stopifnot(is(bdiag(ml), "lsparseMatrix"),
+           is(bdiag(mln),"dsparseMatrix") )
> 
> ## random (diagonal-)block-triangular matrices:
> rblockTri <- function(nb, max.ni, lambda = 3) {
+    .bdiag(replicate(nb, {
+          n <- sample.int(max.ni, 1)
+          tril(Matrix(rpois(n * n, lambda = lambda), n, n)) }))
+ }
> 
> (T4 <- rblockTri(4, 10, lambda = 1))
31 x 31 sparse Matrix of class "dtTMatrix"
                                                                   
 [1,] 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 [2,] 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 [3,] 2 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 [4,] . 1 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . .
 [5,] 2 2 . 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . .
 [6,] 3 1 . . 2 2 . . . . . . . . . . . . . . . . . . . . . . . . .
 [7,] 1 1 1 2 1 1 . . . . . . . . . . . . . . . . . . . . . . . . .
 [8,] 1 4 . 1 1 . 1 2 . . . . . . . . . . . . . . . . . . . . . . .
 [9,] . 1 1 2 2 . . . 1 . . . . . . . . . . . . . . . . . . . . . .
[10,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
[11,] . . . . . . . . . 2 . . . . . . . . . . . . . . . . . . . . .
[12,] . . . . . . . . . . 1 1 . . . . . . . . . . . . . . . . . . .
[13,] . . . . . . . . . 1 2 1 1 . . . . . . . . . . . . . . . . . .
[14,] . . . . . . . . . . 2 . 3 . . . . . . . . . . . . . . . . . .
[15,] . . . . . . . . . . 2 . 1 1 . . . . . . . . . . . . . . . . .
[16,] . . . . . . . . . . 1 4 3 . 2 . . . . . . . . . . . . . . . .
[17,] . . . . . . . . . . . . . . . . 1 . . . . . . . . . . . . . .
[18,] . . . . . . . . . . . . . . . . 3 1 . . . . . . . . . . . . .
[19,] . . . . . . . . . . . . . . . . 1 1 . . . . . . . . . . . . .
[20,] . . . . . . . . . . . . . . . . 1 . 1 . . . . . . . . . . . .
[21,] . . . . . . . . . . . . . . . . 1 2 . . 2 . . . . . . . . . .
[22,] . . . . . . . . . . . . . . . . 4 . . 1 1 3 . . . . . . . . .
[23,] . . . . . . . . . . . . . . . . 1 2 . . 2 1 2 . . . . . . . .
[24,] . . . . . . . . . . . . . . . . 1 1 . 1 . 1 . 3 . . . . . . .
[25,] . . . . . . . . . . . . . . . . 1 1 2 2 . 1 . . . . . . . . .
[26,] . . . . . . . . . . . . . . . . . . 1 2 2 . 1 2 . 1 . . . . .
[27,] . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . . . .
[28,] . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . . . .
[29,] . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 1 . .
[30,] . . . . . . . . . . . . . . . . . . . . . . . . . . 1 2 . 1 .
[31,] . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . 1 1 1
> image(T1 <- rblockTri(12, 20))
> 
> 
> ##' Fast version of Matrix :: .bdiag() -- for the case of *many*  (k x k) matrices:
> ##' @param lmat list(<mat1>, <mat2>, ....., <mat_N>)  where each mat_j is a  k x k 'matrix'
> ##' @return a sparse (N*k x N*k) matrix of class  \code{"\linkS4class{dgCMatrix}"}.
> bdiag_m <- function(lmat) {
+     ## Copyright (C) 2016 Martin Maechler, ETH Zurich
+     if(!length(lmat)) return(new("dgCMatrix"))
+     stopifnot(is.list(lmat), is.matrix(lmat[[1]]),
+               (k <- (d <- dim(lmat[[1]]))[1]) == d[2], # k x k
+               all(vapply(lmat, dim, integer(2)) == k)) # all of them
+     N <- length(lmat)
+     if(N * k > .Machine$integer.max)
+         stop("resulting matrix too large; would be  M x M, with M=", N*k)
+     M <- as.integer(N * k)
+     ## result: an   M x M  matrix
+     new("dgCMatrix", Dim = c(M,M),
+         ## 'i :' maybe there's a faster way (w/o matrix indexing), but elegant?
+         i = as.vector(matrix(0L:(M-1L), nrow=k)[, rep(seq_len(N), each=k)]),
+         p = k * 0L:M,
+         x = as.double(unlist(lmat, recursive=FALSE, use.names=FALSE)))
+ }
> 
> l12 <- replicate(12, matrix(rpois(16, lambda = 6.4), 4, 4),
+                  simplify=FALSE)
> dim(T12 <- bdiag_m(l12))# 48 x 48
[1] 48 48
> T12[1:20, 1:20]
20 x 20 sparse Matrix of class "dgCMatrix"
                                                     
 [1,] 6  3 12 7 .  . . . .  . .  .  . .  . . .  . . .
 [2,] 7  5  2 3 .  . . . .  . .  .  . .  . . .  . . .
 [3,] 4  6  7 7 .  . . . .  . .  .  . .  . . .  . . .
 [4,] 8 11  2 9 .  . . . .  . .  .  . .  . . .  . . .
 [5,] .  .  . . 5 14 5 6 .  . .  .  . .  . . .  . . .
 [6,] .  .  . . 4  6 2 6 .  . .  .  . .  . . .  . . .
 [7,] .  .  . . 3  5 2 6 .  . .  .  . .  . . .  . . .
 [8,] .  .  . . 5  5 9 8 .  . .  .  . .  . . .  . . .
 [9,] .  .  . . .  . . . 6 11 8  8  . .  . . .  . . .
[10,] .  .  . . .  . . . 6 10 3 10  . .  . . .  . . .
[11,] .  .  . . .  . . . 2 11 4  6  . .  . . .  . . .
[12,] .  .  . . .  . . . 5  8 4  4  . .  . . .  . . .
[13,] .  .  . . .  . . . .  . .  .  5 3  4 3 .  . . .
[14,] .  .  . . .  . . . .  . .  .  6 8  6 5 .  . . .
[15,] .  .  . . .  . . . .  . .  . 10 5  6 5 .  . . .
[16,] .  .  . . .  . . . .  . .  .  3 8 11 6 .  . . .
[17,] .  .  . . .  . . . .  . .  .  . .  . . 8  4 1 8
[18,] .  .  . . .  . . . .  . .  .  . .  . . 9  8 7 5
[19,] .  .  . . .  . . . .  . .  .  . .  . . 7  8 5 5
[20,] .  .  . . .  . . . .  . .  .  . .  . . 7 10 8 7
> 
> 
> 
> cleanEx()
> nameEx("boolean-matprod")
> ### * boolean-matprod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: boolmatmult-methods
> ### Title: Boolean Arithmetic Matrix Products: '%&%' and Methods
> ### Aliases: %&% %&%-methods boolmatmult-methods %&%,ANY,ANY-method
> ###   %&%,ANY,Matrix-method %&%,ANY,matrix-method
> ###   %&%,ANY,sparseVector-method %&%,ANY,vector-method
> ###   %&%,CsparseMatrix,CsparseMatrix-method
> ###   %&%,CsparseMatrix,RsparseMatrix-method
> ###   %&%,CsparseMatrix,TsparseMatrix-method
> ###   %&%,CsparseMatrix,denseMatrix-method
> ###   %&%,CsparseMatrix,diagonalMatrix-method
> ###   %&%,CsparseMatrix,matrix-method %&%,CsparseMatrix,vector-method
> ###   %&%,Matrix,ANY-method %&%,Matrix,indMatrix-method
> ###   %&%,Matrix,pMatrix-method %&%,Matrix,sparseVector-method
> ###   %&%,RsparseMatrix,CsparseMatrix-method
> ###   %&%,RsparseMatrix,RsparseMatrix-method
> ###   %&%,RsparseMatrix,TsparseMatrix-method
> ###   %&%,RsparseMatrix,denseMatrix-method
> ###   %&%,RsparseMatrix,diagonalMatrix-method
> ###   %&%,RsparseMatrix,matrix-method %&%,RsparseMatrix,vector-method
> ###   %&%,TsparseMatrix,CsparseMatrix-method
> ###   %&%,TsparseMatrix,RsparseMatrix-method
> ###   %&%,TsparseMatrix,TsparseMatrix-method
> ###   %&%,TsparseMatrix,denseMatrix-method
> ###   %&%,TsparseMatrix,diagonalMatrix-method
> ###   %&%,TsparseMatrix,matrix-method %&%,TsparseMatrix,vector-method
> ###   %&%,denseMatrix,CsparseMatrix-method
> ###   %&%,denseMatrix,RsparseMatrix-method
> ###   %&%,denseMatrix,TsparseMatrix-method
> ###   %&%,denseMatrix,denseMatrix-method
> ###   %&%,denseMatrix,diagonalMatrix-method %&%,denseMatrix,matrix-method
> ###   %&%,denseMatrix,vector-method %&%,diagonalMatrix,CsparseMatrix-method
> ###   %&%,diagonalMatrix,RsparseMatrix-method
> ###   %&%,diagonalMatrix,TsparseMatrix-method
> ###   %&%,diagonalMatrix,denseMatrix-method
> ###   %&%,diagonalMatrix,diagonalMatrix-method
> ###   %&%,diagonalMatrix,matrix-method %&%,diagonalMatrix,vector-method
> ###   %&%,indMatrix,Matrix-method %&%,indMatrix,indMatrix-method
> ###   %&%,indMatrix,matrix-method %&%,indMatrix,pMatrix-method
> ###   %&%,indMatrix,vector-method %&%,matrix,ANY-method
> ###   %&%,matrix,CsparseMatrix-method %&%,matrix,RsparseMatrix-method
> ###   %&%,matrix,TsparseMatrix-method %&%,matrix,denseMatrix-method
> ###   %&%,matrix,diagonalMatrix-method %&%,matrix,indMatrix-method
> ###   %&%,matrix,matrix-method %&%,matrix,pMatrix-method
> ###   %&%,matrix,sparseVector-method %&%,matrix,vector-method
> ###   %&%,pMatrix,Matrix-method %&%,pMatrix,indMatrix-method
> ###   %&%,pMatrix,matrix-method %&%,pMatrix,pMatrix-method
> ###   %&%,pMatrix,vector-method %&%,sparseVector,ANY-method
> ###   %&%,sparseVector,Matrix-method %&%,sparseVector,matrix-method
> ###   %&%,sparseVector,sparseVector-method %&%,sparseVector,vector-method
> ###   %&%,vector,ANY-method %&%,vector,CsparseMatrix-method
> ###   %&%,vector,RsparseMatrix-method %&%,vector,TsparseMatrix-method
> ###   %&%,vector,denseMatrix-method %&%,vector,diagonalMatrix-method
> ###   %&%,vector,indMatrix-method %&%,vector,matrix-method
> ###   %&%,vector,pMatrix-method %&%,vector,sparseVector-method
> ###   %&%,vector,vector-method
> ### Keywords: algebra array logic methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> set.seed(7)
> L <- Matrix(rnorm(20) > 1,    4,5)
> (N <- as(L, "nMatrix"))
4 x 5 sparse Matrix of class "ngCMatrix"
              
[1,] | . . | .
[2,] . . | . .
[3,] . . . | .
[4,] . . | . .
> L. <- L; L.[1:2,1] <- TRUE; L.@x[1:2] <- FALSE; L. # has "zeros" to drop0()
4 x 5 sparse Matrix of class "lgCMatrix"
              
[1,] : . . | .
[2,] : . | . .
[3,] . . . | .
[4,] . . | . .
> D <- Matrix(round(rnorm(30)), 5,6) # -> values in -1:1 (for this seed)
> L %&% D
4 x 6 sparse Matrix of class "ngCMatrix"
                
[1,] | | | | | .
[2,] | | . | . |
[3,] | | . . | .
[4,] | | . | . |
> stopifnot(identical(L %&% D, N %&% D),
+           all(L %&% D == as((L %*% abs(D)) > 0, "sparseMatrix")))
> 
> ## cross products , possibly with  boolArith = TRUE :
> crossprod(N)     # -> sparse patter'n' (TRUE/FALSE : boolean arithmetic)
5 x 5 sparse Matrix of class "nsCMatrix"
              
[1,] | . . | .
[2,] . . . . .
[3,] . . | . .
[4,] | . . | .
[5,] . . . . .
> crossprod(N  +0) # -> numeric Matrix (with same "pattern")
5 x 5 sparse Matrix of class "dsCMatrix"
              
[1,] 1 . . 1 .
[2,] . . . . .
[3,] . . 2 . .
[4,] 1 . . 2 .
[5,] . . . . .
> stopifnot(all(crossprod(N) == t(N) %&% N),
+           identical(crossprod(N), crossprod(N +0, boolArith=TRUE)),
+           identical(crossprod(L), crossprod(N   , boolArith=FALSE)))
> crossprod(D, boolArith =  TRUE) # pattern: "nsCMatrix"
6 x 6 sparse Matrix of class "nsCMatrix"
                
[1,] | | | | | |
[2,] | | | | | |
[3,] | | | | | |
[4,] | | | | | |
[5,] | | | | | |
[6,] | | | | | |
> crossprod(L, boolArith =  TRUE) #  ditto
5 x 5 sparse Matrix of class "nsCMatrix"
              
[1,] | . . | .
[2,] . . . . .
[3,] . . | . .
[4,] | . . | .
[5,] . . . . .
> crossprod(L, boolArith = FALSE) # numeric: "dsCMatrix"
5 x 5 sparse Matrix of class "dsCMatrix"
              
[1,] 1 . . 1 .
[2,] . . . . .
[3,] . . 2 . .
[4,] 1 . . 2 .
[5,] . . . . .
> 
> 
> 
> cleanEx()
> nameEx("cBind")
> ### * cBind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cbind2-methods
> ### Title: 'cbind()' and 'rbind()' recursively built on cbind2/rbind2
> ### Aliases: cbind2 cbind2-methods rbind2 rbind2-methods
> ###   cbind2,Matrix,Matrix-method cbind2,Matrix,NULL-method
> ###   cbind2,Matrix,matrix-method cbind2,Matrix,missing-method
> ###   cbind2,Matrix,vector-method cbind2,NULL,Matrix-method
> ###   cbind2,matrix,Matrix-method cbind2,vector,Matrix-method
> ###   rbind2,Matrix,Matrix-method rbind2,Matrix,NULL-method
> ###   rbind2,Matrix,matrix-method rbind2,Matrix,missing-method
> ###   rbind2,Matrix,vector-method rbind2,NULL,Matrix-method
> ###   rbind2,matrix,Matrix-method rbind2,vector,Matrix-method
> ### Keywords: array manip methods
> 
> ### ** Examples
> 
> (a <- matrix(c(2:1,1:2), 2,2))
     [,1] [,2]
[1,]    2    1
[2,]    1    2
> 
> (M1 <- cbind(0, rbind(a, 7))) # a traditional matrix
     [,1] [,2] [,3]
[1,]    0    2    1
[2,]    0    1    2
[3,]    0    7    7
> 
> D <- Diagonal(2)
> (M2 <- cbind(4, a, D, -1, D, 0)) # a sparse Matrix
2 x 9 sparse Matrix of class "dgCMatrix"
                       
[1,] 4 2 1 1 . -1 1 . .
[2,] 4 1 2 . 1 -1 . 1 .
> 
> stopifnot(validObject(M2), inherits(M2, "sparseMatrix"),
+           dim(M2) == c(2,9))
> 
> 
> 
> cleanEx()
> nameEx("chol")
> ### * chol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chol-methods
> ### Title: Compute the Cholesky Factor of a Matrix
> ### Aliases: chol chol-methods chol,ddiMatrix-method
> ###   chol,diagonalMatrix-method chol,dsCMatrix-method
> ###   chol,dsRMatrix-method chol,dsTMatrix-method chol,dspMatrix-method
> ###   chol,dsyMatrix-method chol,generalMatrix-method
> ###   chol,symmetricMatrix-method chol,triangularMatrix-method
> ### Keywords: algebra array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showMethods("chol", inherited = FALSE)
Function: chol (package base)
x="ANY"
x="ddiMatrix"
x="diagonalMatrix"
x="dsCMatrix"
x="dsRMatrix"
x="dsTMatrix"
x="dspMatrix"
x="dsyMatrix"
x="generalMatrix"
x="symmetricMatrix"
x="triangularMatrix"

> set.seed(0)
> 
> ## ---- Dense ----------------------------------------------------------
> 
> ## chol(x, pivot = value) wrapping Cholesky(x, perm = value)
> selectMethod("chol", "dsyMatrix")
Method Definition:

function (x, ...) 
{
    .local <- function (x, pivot = FALSE, tol = -1, ...) 
    {
        ch <- as(Cholesky(x, perm = pivot, tol = tol), "dtrMatrix")
        ch@Dimnames <- dimnames(x)
        if (ch@uplo != "U") 
            t(ch)
        else ch
    }
    .local(x, ...)
}
<bytecode: 0x55da87e2b470>
<environment: namespace:Matrix>

Signatures:
        x          
target  "dsyMatrix"
defined "dsyMatrix"
> 
> ## Except in packed cases where pivoting is not yet available
> selectMethod("chol", "dspMatrix")
Method Definition:

function (x, ...) 
{
    ch <- as(Cholesky(x), "dtpMatrix")
    ch@Dimnames <- dimnames(x)
    if (ch@uplo != "U") 
        t(ch)
    else ch
}
<bytecode: 0x55da87e2c2a8>
<environment: namespace:Matrix>

Signatures:
        x          
target  "dspMatrix"
defined "dspMatrix"
> 
> ## .... Positive definite ..............................................
> 
> (A1 <- new("dsyMatrix", Dim = c(2L, 2L), x = c(1, 2, 2, 5)))
2 x 2 Matrix of class "dsyMatrix"
     [,1] [,2]
[1,]    1    2
[2,]    2    5
> (R1.nopivot <- chol(A1))
2 x 2 Matrix of class "dtrMatrix"
     [,1] [,2]
[1,]    1    2
[2,]    .    1
> (R1 <- chol(A1, pivot = TRUE))
2 x 2 Matrix of class "dtrMatrix"
     [,1]      [,2]     
[1,] 2.2360680 0.8944272
[2,]         . 0.4472136
> 
> ## In 2-by-2 cases, we know that the permutation is 1:2 or 2:1,
> ## even if in general 'chol' does not say ...
> 
> stopifnot(exprs = {
+    all.equal(  A1           , as(crossprod(R1.nopivot), "dsyMatrix"))
+    all.equal(t(A1[2:1, 2:1]), as(crossprod(R1        ), "dsyMatrix"))
+    identical(Cholesky(A1)@perm, 2:1) # because 5 > 1
+ })
> 
> ## .... Positive semidefinite but not positive definite ................
> 
> (A2 <- new("dpoMatrix", Dim = c(2L, 2L), x = c(1, 2, 2, 4)))
2 x 2 Matrix of class "dpoMatrix"
     [,1] [,2]
[1,]    1    2
[2,]    2    4
> try(R2.nopivot <- chol(A2)) # fails as not positive definite
Error in .local(A, ...) : 
  LAPACK routine 'dpotrf': leading principal minor of order 2 is not positive
> (R2 <- chol(A2, pivot = TRUE)) # returns, with a warning and ...
Warning in .local(A, ...) :
  LAPACK routine 'dpstrf': matrix is rank deficient or not positive definite, the _computed_ rank is 1
2 x 2 Matrix of class "dtrMatrix"
     [,1] [,2]
[1,]    2    1
[2,]    .    0
> 
> stopifnot(exprs = {
+    all.equal(t(A2[2:1, 2:1]), as(crossprod(R2), "dsyMatrix"))
+    identical(Cholesky(A2)@perm, 2:1) # because 4 > 1
+ })
> 
> ## .... Not positive semidefinite ......................................
> 
> (A3 <- new("dsyMatrix", Dim = c(2L, 2L), x = c(1, 2, 2, 3)))
2 x 2 Matrix of class "dsyMatrix"
     [,1] [,2]
[1,]    1    2
[2,]    2    3
> try(R3.nopivot <- chol(A3)) # fails as not positive definite
Error in .local(A, ...) : 
  LAPACK routine 'dpotrf': leading principal minor of order 2 is not positive
> (R3 <- chol(A3, pivot = TRUE)) # returns, with a warning and ...
Warning in .local(A, ...) :
  LAPACK routine 'dpstrf': matrix is rank deficient or not positive definite, the _computed_ rank is 1
2 x 2 Matrix of class "dtrMatrix"
     [,1]     [,2]    
[1,] 1.732051 1.154701
[2,]        . 0.000000
> 
> ## _Not_ equal: see details and examples in help("Cholesky")
> all.equal(t(A3[2:1, 2:1]), as(crossprod(R3), "dsyMatrix"))
[1] "Mean relative difference: 0.08333333"
> 
> ## ---- Sparse ---------------------------------------------------------
> 
> ## chol(x, pivot = value) wrapping
> ## Cholesky(x, perm = value, LDL = FALSE, super = FALSE)
> selectMethod("chol", "dsCMatrix")
Method Definition:

function (x, ...) 
{
    .local <- function (x, pivot = FALSE, ...) 
    {
        ch <- t(as(Cholesky(x, perm = pivot, LDL = FALSE, super = FALSE), 
            "dtCMatrix"))
        ch@Dimnames <- dimnames(x)
        ch
    }
    .local(x, ...)
}
<bytecode: 0x55da87e260e8>
<environment: namespace:Matrix>

Signatures:
        x          
target  "dsCMatrix"
defined "dsCMatrix"
> 
> ## Except in diagonal cases which are handled "directly"
> selectMethod("chol", "ddiMatrix")
Method Definition:

function (x, ...) 
{
    if (length(y <- x@x)) {
        if (is.na(min.y <- min(y)) || min.y < 0) 
            stop(gettextf("%1$s(%2$s) is undefined: '%2$s' is not positive semidefinite", 
                "chol", "x"), domain = NA)
        x@x <- sqrt(y)
    }
    x
}
<bytecode: 0x55da87e239e8>
<environment: namespace:Matrix>

Signatures:
        x          
target  "ddiMatrix"
defined "ddiMatrix"
> 
> (A4 <- toeplitz(as(c(10, 0, 1, 0, 3), "sparseVector")))
5 x 5 sparse Matrix of class "dsCMatrix"
                   
[1,] 10  .  1  .  3
[2,]  . 10  .  1  .
[3,]  1  . 10  .  1
[4,]  .  1  . 10  .
[5,]  3  .  1  . 10
> (ch.A4.nopivot <- Cholesky(A4, perm = FALSE, LDL = FALSE, super = FALSE))
Cholesky factorization of Formal class 'dCHMsimpl' [package "Matrix"] with 11 slots
  ..@ x       : num [1:9] 3.162 0.316 0.949 3.162 0.316 ...
  ..@ p       : int [1:6] 0 3 5 7 8 9
  ..@ i       : int [1:9] 0 2 4 1 3 2 4 3 4
  ..@ nz      : int [1:5] 3 2 2 1 1
  ..@ nxt     : int [1:7] 1 2 3 4 5 -1 0
  ..@ prv     : int [1:7] 6 0 1 2 3 4 -1
  ..@ type    : int [1:6] 0 1 0 1 0 0
  ..@ colcount: int [1:5] 3 2 2 1 1
  ..@ perm    : int(0) 
  ..@ Dim     : int [1:2] 5 5
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> (ch.A4 <- Cholesky(A4, perm = TRUE, LDL = FALSE, super = FALSE))
Cholesky factorization of Formal class 'dCHMsimpl' [package "Matrix"] with 11 slots
  ..@ x       : num [1:9] 3.162 0.316 3.146 3.162 0.316 ...
  ..@ p       : int [1:6] 0 2 3 6 8 9
  ..@ i       : int [1:9] 0 1 1 2 3 4 3 4 4
  ..@ nz      : int [1:5] 2 1 3 2 1
  ..@ nxt     : int [1:7] 1 2 3 4 5 -1 0
  ..@ prv     : int [1:7] 6 0 1 2 3 4 -1
  ..@ type    : int [1:6] 2 1 0 1 0 0
  ..@ colcount: int [1:5] 2 1 3 2 1
  ..@ perm    : int [1:5] 1 3 0 2 4
  ..@ Dim     : int [1:2] 5 5
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> (R4.nopivot <- chol(A4))
5 x 5 sparse Matrix of class "dtCMatrix"
                                                    
[1,] 3.162278 .        0.3162278 .         0.9486833
[2,] .        3.162278 .         0.3162278 .        
[3,] .        .        3.1464265 .         0.2224746
[4,] .        .        .         3.1464265 .        
[5,] .        .        .         .         3.0084057
> (R4 <- chol(A4, pivot = TRUE))
5 x 5 sparse Matrix of class "dtCMatrix"
                                                    
[1,] 3.162278 0.3162278 .        .         .        
[2,] .        3.1464265 .        .         .        
[3,] .        .         3.162278 0.3162278 0.9486833
[4,] .        .         .        3.1464265 0.2224746
[5,] .        .         .        .         3.0084057
> 
> det4 <- det(A4)
> b4 <- rnorm(5L)
> x4 <- solve(A4, b4)
> 
> stopifnot(exprs = {
+     identical(R4.nopivot, expand1(ch.A4.nopivot, "L."))
+     identical(R4, expand1(ch.A4, "L."))
+     all.equal(A4, crossprod(R4.nopivot))
+     all.equal(A4[ch.A4@perm + 1L, ch.A4@perm + 1L], crossprod(R4))
+     all.equal(diag(R4.nopivot), sqrt(diag(ch.A4.nopivot)))
+     all.equal(diag(R4), sqrt(diag(ch.A4)))
+     all.equal(sqrt(det4), det(R4.nopivot))
+     all.equal(sqrt(det4), det(R4))
+     all.equal(det4, det(ch.A4.nopivot, sqrt = FALSE))
+     all.equal(det4, det(ch.A4, sqrt = FALSE))
+     all.equal(x4, solve(R4.nopivot, solve(t(R4.nopivot), b4)))
+     all.equal(x4, solve(ch.A4.nopivot, b4))
+     all.equal(x4, solve(ch.A4, b4))
+ })
> 
> 
> 
> cleanEx()
> nameEx("chol2inv-methods")
> ### * chol2inv-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chol2inv-methods
> ### Title: Inverse from Cholesky Factor
> ### Aliases: chol2inv chol2inv-methods chol2inv,ANY-method
> ###   chol2inv,ddiMatrix-method chol2inv,diagonalMatrix-method
> ###   chol2inv,dtCMatrix-method chol2inv,dtRMatrix-method
> ###   chol2inv,dtTMatrix-method chol2inv,dtrMatrix-method
> ###   chol2inv,dtpMatrix-method chol2inv,generalMatrix-method
> ###   chol2inv,symmetricMatrix-method chol2inv,triangularMatrix-method
> ### Keywords: algebra array methods
> 
> ### ** Examples
> 
> (A <- Matrix(cbind(c(1, 1, 1), c(1, 2, 4), c(1, 4, 16))))
3 x 3 Matrix of class "dsyMatrix"
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    1    2    4
[3,]    1    4   16
> (R <- chol(A))
3 x 3 Matrix of class "dtrMatrix"
     [,1]    [,2]    [,3]   
[1,] 1.00000 1.00000 1.00000
[2,]       . 1.00000 3.00000
[3,]       .       . 2.44949
> (L <- t(R))
3 x 3 Matrix of class "dtrMatrix"
     [,1]    [,2]    [,3]   
[1,] 1.00000       .       .
[2,] 1.00000 1.00000       .
[3,] 1.00000 3.00000 2.44949
> (R2i <- chol2inv(R))
3 x 3 Matrix of class "dpoMatrix"
           [,1] [,2]       [,3]
[1,]  2.6666667 -2.0  0.3333333
[2,] -2.0000000  2.5 -0.5000000
[3,]  0.3333333 -0.5  0.1666667
> (L2i <- chol2inv(R))
3 x 3 Matrix of class "dpoMatrix"
           [,1] [,2]       [,3]
[1,]  2.6666667 -2.0  0.3333333
[2,] -2.0000000  2.5 -0.5000000
[3,]  0.3333333 -0.5  0.1666667
> stopifnot(exprs = {
+     all.equal(R2i, tcrossprod(solve(R)))
+     all.equal(L2i,  crossprod(solve(L)))
+     all.equal(as(R2i %*% A, "matrix"), diag(3L)) # the identity 
+     all.equal(as(L2i %*% A, "matrix"), diag(3L)) # ditto
+ })
> 
> 
> 
> cleanEx()
> nameEx("colSums")
> ### * colSums
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colSums-methods
> ### Title: Form Row and Column Sums and Means
> ### Aliases: colSums colSums-methods colMeans colMeans-methods rowSums
> ###   rowSums-methods rowMeans rowMeans-methods
> ###   colSums,CsparseMatrix-method colSums,RsparseMatrix-method
> ###   colSums,TsparseMatrix-method colSums,denseMatrix-method
> ###   colSums,diagonalMatrix-method colSums,indMatrix-method
> ###   colMeans,CsparseMatrix-method colMeans,RsparseMatrix-method
> ###   colMeans,TsparseMatrix-method colMeans,denseMatrix-method
> ###   colMeans,diagonalMatrix-method colMeans,indMatrix-method
> ###   rowSums,CsparseMatrix-method rowSums,RsparseMatrix-method
> ###   rowSums,TsparseMatrix-method rowSums,denseMatrix-method
> ###   rowSums,diagonalMatrix-method rowSums,indMatrix-method
> ###   rowMeans,CsparseMatrix-method rowMeans,RsparseMatrix-method
> ###   rowMeans,TsparseMatrix-method rowMeans,denseMatrix-method
> ###   rowMeans,diagonalMatrix-method rowMeans,indMatrix-method
> ### Keywords: algebra arith array methods
> 
> ### ** Examples
> 
> (M <- bdiag(Diagonal(2), matrix(1:3, 3,4), diag(3:2))) # 7 x 8
7 x 8 sparse Matrix of class "dgCMatrix"
                    
[1,] 1 . . . . . . .
[2,] . 1 . . . . . .
[3,] . . 1 1 1 1 . .
[4,] . . 2 2 2 2 . .
[5,] . . 3 3 3 3 . .
[6,] . . . . . . 3 .
[7,] . . . . . . . 2
> colSums(M)
[1] 1 1 6 6 6 6 3 2
> d <- Diagonal(10, c(0,0,10,0,2,rep(0,5)))
> MM <- kronecker(d, M)
> dim(MM) # 70 80
[1] 70 80
> length(MM@x) # 160, but many are '0' ; drop those:
[1] 160
> MM <- drop0(MM)
> length(MM@x) # 32
[1] 32
>   cm <- colSums(MM)
> (scm <- colSums(MM, sparseResult = TRUE))
sparse vector (nnz/length = 16/80) of class "dsparseVector"
 [1]  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 10 10 60 60 60 60 30 20  .
[26]  .  .  .  .  .  .  .  2  2 12 12 12 12  6  4  .  .  .  .  .  .  .  .  .  .
[51]  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
[76]  .  .  .  .  .
> stopifnot(is(scm, "sparseVector"),
+           identical(cm, as.numeric(scm)))
> rowSums (MM, sparseResult = TRUE) # 14 of 70 are not zero
sparse vector (nnz/length = 14/70) of class "dsparseVector"
 [1]   .   .   .   .   .   .   .   .   .   .   .   .   .   .  10  10  40  80 120
[20]  30  20   .   .   .   .   .   .   .   2   2   8  16  24   6   4   .   .   .
[39]   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
[58]   .   .   .   .   .   .   .   .   .   .   .   .   .
> colMeans(MM, sparseResult = TRUE) # 16 of 80 are not zero
sparse vector (nnz/length = 16/80) of class "dsparseVector"
 [1]          .          .          .          .          .          .
 [7]          .          .          .          .          .          .
[13]          .          .          .          . 0.14285714 0.14285714
[19] 0.85714286 0.85714286 0.85714286 0.85714286 0.42857143 0.28571429
[25]          .          .          .          .          .          .
[31]          .          . 0.02857143 0.02857143 0.17142857 0.17142857
[37] 0.17142857 0.17142857 0.08571429 0.05714286          .          .
[43]          .          .          .          .          .          .
[49]          .          .          .          .          .          .
[55]          .          .          .          .          .          .
[61]          .          .          .          .          .          .
[67]          .          .          .          .          .          .
[73]          .          .          .          .          .          .
[79]          .          .
> ## Since we have no 'NA's, these two are equivalent :
> stopifnot(identical(rowMeans(MM, sparseResult = TRUE),
+                     rowMeans(MM, sparseResult = TRUE, na.rm = TRUE)),
+ 	  rowMeans(Diagonal(16)) == 1/16,
+ 	  colSums(Diagonal(7)) == 1)
> 
> ## dimnames(x) -->  names( <value> ) :
> dimnames(M) <- list(paste0("r", 1:7), paste0("V",1:8))
> M
7 x 8 sparse Matrix of class "dgCMatrix"
   V1 V2 V3 V4 V5 V6 V7 V8
r1  1  .  .  .  .  .  .  .
r2  .  1  .  .  .  .  .  .
r3  .  .  1  1  1  1  .  .
r4  .  .  2  2  2  2  .  .
r5  .  .  3  3  3  3  .  .
r6  .  .  .  .  .  .  3  .
r7  .  .  .  .  .  .  .  2
> colSums(M)
V1 V2 V3 V4 V5 V6 V7 V8 
 1  1  6  6  6  6  3  2 
> rowMeans(M)
   r1    r2    r3    r4    r5    r6    r7 
0.125 0.125 0.500 1.000 1.500 0.375 0.250 
> ## Assertions :
> stopifnot(exprs = {
+     all.equal(colSums(M),
+               structure(c(1,1,6,6,6,6,3,2), names = colnames(M)))
+     all.equal(rowMeans(M),
+               structure(c(1,1,4,8,12,3,2)/8, names = paste0("r", 1:7)))
+ })
> 
> 
> 
> cleanEx()
> nameEx("condest")
> ### * condest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: condest
> ### Title: Compute Approximate CONDition number and 1-Norm of (Large)
> ###   Matrices
> ### Aliases: condest onenormest
> ### Keywords: algebra math utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> data(KNex, package = "Matrix")
> mtm <- with(KNex, crossprod(mm))
> system.time(ce <- condest(mtm))
   user  system elapsed 
  0.058   0.000   0.058 
> sum(abs(ce$v)) ## || v ||_1  == 1
[1] 1
> ## Prove that  || A v || = || A || / est  (as ||v|| = 1):
> stopifnot(all.equal(norm(mtm %*% ce$v),
+                     norm(mtm) / ce$est))
> 
> ## reciprocal
> 1 / ce$est
[1] 8.123888e-06
> system.time(rc <- rcond(mtm)) # takes ca  3 x  longer
Warning in .local(x, norm, ...) : 'rcond' via sparse -> dense coercion
   user  system elapsed 
  0.028   0.004   0.020 
> rc
[1] 8.123888e-06
> all.equal(rc, 1/ce$est) # TRUE -- the approximation was good
[1] TRUE
> 
> one <- onenormest(mtm)
> str(one) ## est = 12.3
List of 4
 $ est : num 12.3
 $ v   : int [1:712] 0 0 0 1 0 0 0 0 0 0 ...
 $ w   : num [1:712] 0.036 0 0.0433 0.0375 0 ...
 $ iter: int 3
> ## the maximal column:
> which(one$v == 1) # mostly 4, rarely 1, depending on random seed
[1] 4
> 
> 
> 
> cleanEx()
> nameEx("dMatrix-class")
> ### * dMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dMatrix-class
> ### Title: (Virtual) Class "dMatrix" of "double" Matrices
> ### Aliases: dMatrix-class lMatrix-class Compare,dMatrix,logical-method
> ###   Compare,dMatrix,numeric-method Compare,logical,dMatrix-method
> ###   Compare,numeric,dMatrix-method Logic,dMatrix,logical-method
> ###   Logic,dMatrix,numeric-method Logic,dMatrix,sparseVector-method
> ###   Logic,logical,dMatrix-method Logic,numeric,dMatrix-method
> ###   Ops,dMatrix,dMatrix-method Ops,dMatrix,ddiMatrix-method
> ###   Ops,dMatrix,lMatrix-method Ops,dMatrix,ldiMatrix-method
> ###   Ops,dMatrix,nMatrix-method coerce,matrix,dMatrix-method
> ###   coerce,vector,dMatrix-method Arith,lMatrix,numeric-method
> ###   Arith,lMatrix,logical-method Arith,logical,lMatrix-method
> ###   Arith,numeric,lMatrix-method Compare,lMatrix,logical-method
> ###   Compare,lMatrix,numeric-method Compare,logical,lMatrix-method
> ###   Compare,numeric,lMatrix-method Logic,lMatrix,logical-method
> ###   Logic,lMatrix,numeric-method Logic,lMatrix,sparseVector-method
> ###   Logic,logical,lMatrix-method Logic,numeric,lMatrix-method
> ###   Ops,lMatrix,dMatrix-method Ops,lMatrix,lMatrix-method
> ###   Ops,lMatrix,nMatrix-method Ops,lMatrix,numeric-method
> ###   Ops,numeric,lMatrix-method coerce,matrix,lMatrix-method
> ###   coerce,vector,lMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
>  showClass("dMatrix")
Virtual Class "dMatrix" [package "Matrix"]

Slots:
                                 
Name:         x      Dim Dimnames
Class:  numeric  integer     list

Extends: 
Class "Matrix", directly
Class "replValueSp", by class "Matrix", distance 2

Known Subclasses: 
Class "ddenseMatrix", directly
Class "dsparseMatrix", directly
Class "ddiMatrix", directly
Class "dgeMatrix", by class "ddenseMatrix", distance 2
Class "dtrMatrix", by class "ddenseMatrix", distance 2
Class "dsyMatrix", by class "ddenseMatrix", distance 2
Class "dtpMatrix", by class "ddenseMatrix", distance 2
Class "dspMatrix", by class "ddenseMatrix", distance 2
Class "dgCMatrix", by class "dsparseMatrix", distance 2
Class "dtCMatrix", by class "dsparseMatrix", distance 2
Class "dsCMatrix", by class "dsparseMatrix", distance 2
Class "dgRMatrix", by class "dsparseMatrix", distance 2
Class "dtRMatrix", by class "dsparseMatrix", distance 2
Class "dsRMatrix", by class "dsparseMatrix", distance 2
Class "dgTMatrix", by class "dsparseMatrix", distance 2
Class "dtTMatrix", by class "dsparseMatrix", distance 2
Class "dsTMatrix", by class "dsparseMatrix", distance 2
Class "dpoMatrix", by class "ddenseMatrix", distance 3
Class "dppMatrix", by class "ddenseMatrix", distance 3
Class "corMatrix", by class "ddenseMatrix", distance 4
Class "pcorMatrix", by class "ddenseMatrix", distance 4
Class "A", by class "dgCMatrix", distance 3
> 
>  set.seed(101)
>  round(Matrix(rnorm(28), 4,7), 2)
4 x 7 Matrix of class "dgeMatrix"
      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]
[1,] -0.33  0.31  0.92  1.43 -0.85 -0.16  0.74
[2,]  0.55  1.17 -0.22 -1.47  0.06  0.71 -1.41
[3,] -0.67  0.62  0.53 -0.24 -0.82 -0.27  0.47
[4,]  0.21 -0.11 -0.79 -0.19 -2.05 -1.46 -0.12
>  M <- Matrix(rlnorm(56, sd=10), 4,14)
>  (M. <- zapsmall(M))
4 x 14 Matrix of class "dgeMatrix"
     [,1]   [,2] [,3] [,4] [,5] [,6] [,7]   [,8] [,9] [,10]    [,11]  [,12]
[1,]  107  23829    5  125    0    0  323      5    0    68        1 101883
[2,]  146      0 9930 1963   56    0    0  80668    0    48        0      0
[3,] 7703 147051    0    0  296    0 1791 125145    0     0  3609119      0
[4,]   16      0   89    0    0    0    0      0    3     4 10846685      0
     [,13]     [,14]
[1,]    21 110604988
[2,]     0     67289
[3,]     4         0
[4,]     1         0
>  table(as.logical(M. == 0))

FALSE  TRUE 
   31    25 
> 
> 
> 
> cleanEx()
> nameEx("ddenseMatrix-class")
> ### * ddenseMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ddenseMatrix-class
> ### Title: Virtual Class "ddenseMatrix" of Numeric Dense Matrices
> ### Aliases: ddenseMatrix-class &,ddenseMatrix,ddiMatrix-method
> ###   &,ddenseMatrix,ldiMatrix-method &,ddenseMatrix,ndiMatrix-method
> ###   *,ddenseMatrix,ddiMatrix-method *,ddenseMatrix,ldiMatrix-method
> ###   *,ddenseMatrix,ndiMatrix-method Arith,ddenseMatrix,logical-method
> ###   Arith,ddenseMatrix,numeric-method
> ###   Arith,ddenseMatrix,sparseVector-method
> ###   Arith,logical,ddenseMatrix-method Arith,numeric,ddenseMatrix-method
> ###   ^,ddenseMatrix,ddiMatrix-method ^,ddenseMatrix,ldiMatrix-method
> ###   ^,ddenseMatrix,ndiMatrix-method coerce,matrix,ddenseMatrix-method
> ###   coerce,vector,ddenseMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("ddenseMatrix")
Virtual Class "ddenseMatrix" [package "Matrix"]

Slots:
                                 
Name:         x      Dim Dimnames
Class:  numeric  integer     list

Extends: 
Class "dMatrix", directly
Class "denseMatrix", directly
Class "Matrix", by class "dMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 3

Known Subclasses: 
Class "dgeMatrix", directly
Class "dtrMatrix", directly
Class "dsyMatrix", directly
Class "dtpMatrix", directly
Class "dspMatrix", directly
Class "dpoMatrix", by class "dsyMatrix", distance 2
Class "corMatrix", by class "dsyMatrix", distance 3
Class "dppMatrix", by class "dspMatrix", distance 2
Class "pcorMatrix", by class "dppMatrix", distance 3
> 
> showMethods(class = "ddenseMatrix", where = "package:Matrix")
Function: %% (package base)
e1="ddiMatrix", e2="ddenseMatrix"
e1="ldiMatrix", e2="ddenseMatrix"
e1="ndiMatrix", e2="ddenseMatrix"

Function: %/% (package base)
e1="ddiMatrix", e2="ddenseMatrix"
e1="ldiMatrix", e2="ddenseMatrix"
e1="ndiMatrix", e2="ddenseMatrix"

Function: & (package base)
e1="ddenseMatrix", e2="ddiMatrix"
e1="ddenseMatrix", e2="ldiMatrix"
e1="ddenseMatrix", e2="ndiMatrix"
e1="ddiMatrix", e2="ddenseMatrix"
e1="ldiMatrix", e2="ddenseMatrix"
e1="ndiMatrix", e2="ddenseMatrix"

Function: * (package base)
e1="ddenseMatrix", e2="ddiMatrix"
e1="ddenseMatrix", e2="ldiMatrix"
e1="ddenseMatrix", e2="ndiMatrix"
e1="ddiMatrix", e2="ddenseMatrix"
e1="ldiMatrix", e2="ddenseMatrix"
e1="ndiMatrix", e2="ddenseMatrix"

Function: / (package base)
e1="ddiMatrix", e2="ddenseMatrix"
e1="ldiMatrix", e2="ddenseMatrix"
e1="ndiMatrix", e2="ddenseMatrix"

Function: Arith (package base)
e1="ddenseMatrix", e2="logical"
e1="ddenseMatrix", e2="numeric"
e1="ddenseMatrix", e2="sparseVector"
e1="logical", e2="ddenseMatrix"
e1="numeric", e2="ddenseMatrix"
e1="sparseVector", e2="ddenseMatrix"

Function: ^ (package base)
e1="ddenseMatrix", e2="ddiMatrix"
e1="ddenseMatrix", e2="ldiMatrix"
e1="ddenseMatrix", e2="ndiMatrix"

Function: coerce (package methods)
from="Matrix", to="ddenseMatrix"
from="ddenseMatrix", to="dgeMatrix"
from="matrix", to="ddenseMatrix"
from="vector", to="ddenseMatrix"

> 
> 
> 
> cleanEx()
> nameEx("ddiMatrix-class")
> ### * ddiMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ddiMatrix-class
> ### Title: Class "ddiMatrix" of Diagonal Numeric Matrices
> ### Aliases: ddiMatrix-class %%,ddiMatrix,Matrix-method
> ###   %%,ddiMatrix,ddenseMatrix-method %%,ddiMatrix,ldenseMatrix-method
> ###   %%,ddiMatrix,ndenseMatrix-method %/%,ddiMatrix,Matrix-method
> ###   %/%,ddiMatrix,ddenseMatrix-method %/%,ddiMatrix,ldenseMatrix-method
> ###   %/%,ddiMatrix,ndenseMatrix-method &,ddiMatrix,Matrix-method
> ###   &,ddiMatrix,ddenseMatrix-method &,ddiMatrix,ldenseMatrix-method
> ###   &,ddiMatrix,ndenseMatrix-method *,ddiMatrix,Matrix-method
> ###   *,ddiMatrix,ddenseMatrix-method *,ddiMatrix,ldenseMatrix-method
> ###   *,ddiMatrix,ndenseMatrix-method /,ddiMatrix,Matrix-method
> ###   /,ddiMatrix,ddenseMatrix-method /,ddiMatrix,ldenseMatrix-method
> ###   /,ddiMatrix,ndenseMatrix-method Arith,ddiMatrix,logical-method
> ###   Arith,ddiMatrix,numeric-method Arith,logical,ddiMatrix-method
> ###   Arith,numeric,ddiMatrix-method Ops,ANY,ddiMatrix-method
> ###   Ops,ddiMatrix,ANY-method Ops,ddiMatrix,Matrix-method
> ###   Ops,ddiMatrix,dMatrix-method Ops,ddiMatrix,ddiMatrix-method
> ###   Ops,ddiMatrix,ldiMatrix-method Ops,ddiMatrix,ndiMatrix-method
> ###   Ops,ddiMatrix,logical-method Ops,ddiMatrix,numeric-method
> ###   Ops,ddiMatrix,sparseMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (d2 <- Diagonal(x = c(10,1)))
2 x 2 diagonal matrix of class "ddiMatrix"
     [,1] [,2]
[1,]   10    .
[2,]    .    1
> str(d2)
Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
  ..@ diag    : chr "N"
  ..@ Dim     : int [1:2] 2 2
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:2] 10 1
> ## slightly larger in internal size:
> str(as(d2, "sparseMatrix"))
Formal class 'ddiMatrix' [package "Matrix"] with 4 slots
  ..@ diag    : chr "N"
  ..@ Dim     : int [1:2] 2 2
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:2] 10 1
> 
> M <- Matrix(cbind(1,2:4))
> M %*% d2 #> `fast' multiplication
3 x 2 Matrix of class "dgeMatrix"
     [,1] [,2]
[1,]   10    2
[2,]   10    3
[3,]   10    4
> 
> chol(d2) # trivial
2 x 2 diagonal matrix of class "ddiMatrix"
     [,1]     [,2]
[1,] 3.162278    .
[2,]        .    1
> stopifnot(is(cd2 <- chol(d2), "ddiMatrix"),
+           all.equal(cd2@x, c(sqrt(10),1)))
> 
> 
> 
> cleanEx()
> nameEx("denseMatrix-class")
> ### * denseMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: denseMatrix-class
> ### Title: Virtual Class "denseMatrix" of All Dense Matrices
> ### Aliases: denseMatrix-class -,denseMatrix,missing-method
> ###   Math,denseMatrix-method Summary,denseMatrix-method
> ###   coerce,ANY,denseMatrix-method coerce,matrix,denseMatrix-method
> ###   coerce,vector,denseMatrix-method diag,denseMatrix-method
> ###   diag<-,denseMatrix-method diff,denseMatrix-method
> ###   dim<-,denseMatrix-method log,denseMatrix-method
> ###   mean,denseMatrix-method rep,denseMatrix-method
> ###   show,denseMatrix-method t,denseMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("denseMatrix")
Virtual Class "denseMatrix" [package "Matrix"]

Slots:
                        
Name:       Dim Dimnames
Class:  integer     list

Extends: 
Class "Matrix", directly
Class "replValueSp", by class "Matrix", distance 2

Known Subclasses: 
Class "unpackedMatrix", directly
Class "packedMatrix", directly
Class "ndenseMatrix", directly
Class "ldenseMatrix", directly
Class "ddenseMatrix", directly
Class "ngeMatrix", by class "unpackedMatrix", distance 2
Class "ntrMatrix", by class "unpackedMatrix", distance 2
Class "nsyMatrix", by class "unpackedMatrix", distance 2
Class "ntpMatrix", by class "packedMatrix", distance 2
Class "nspMatrix", by class "packedMatrix", distance 2
Class "lgeMatrix", by class "unpackedMatrix", distance 2
Class "ltrMatrix", by class "unpackedMatrix", distance 2
Class "lsyMatrix", by class "unpackedMatrix", distance 2
Class "ltpMatrix", by class "packedMatrix", distance 2
Class "lspMatrix", by class "packedMatrix", distance 2
Class "dgeMatrix", by class "unpackedMatrix", distance 2
Class "dtrMatrix", by class "unpackedMatrix", distance 2
Class "dsyMatrix", by class "unpackedMatrix", distance 2
Class "dpoMatrix", by class "dsyMatrix", distance 3
Class "corMatrix", by class "dpoMatrix", distance 4
Class "dtpMatrix", by class "packedMatrix", distance 2
Class "dspMatrix", by class "packedMatrix", distance 2
Class "dppMatrix", by class "dspMatrix", distance 3
Class "pcorMatrix", by class "dppMatrix", distance 4
> 
> 
> 
> cleanEx()
> nameEx("dgCMatrix-class")
> ### * dgCMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dgCMatrix-class
> ### Title: Compressed, sparse, column-oriented numeric matrices
> ### Aliases: dgCMatrix-class Arith,dgCMatrix,dgCMatrix-method
> ###   Arith,dgCMatrix,logical-method Arith,dgCMatrix,numeric-method
> ###   Arith,logical,dgCMatrix-method Arith,numeric,dgCMatrix-method
> ###   coerce,matrix,dgCMatrix-method determinant,dgCMatrix,logical-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (m <- Matrix(c(0,0,2:0), 3,5))
3 x 5 sparse Matrix of class "dgCMatrix"
              
[1,] . 1 . . 2
[2,] . . 2 . 1
[3,] 2 . 1 . .
> str(m)
Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:6] 2 0 1 2 0 1
  ..@ p       : int [1:6] 0 1 2 4 4 6
  ..@ Dim     : int [1:2] 3 5
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:6] 2 1 2 1 2 1
  ..@ factors : list()
> m[,1]
[1] 0 0 2
> ## Don't show: 
> ## regression test: this must give a validity-check error:
> stopifnot(inherits(try(new("dgCMatrix", i = 0:1, p = 0:2,
+                            x = c(2,3), Dim = 3:4)),
+           "try-error"))
Error in validObject(.Object) : 
  invalid class “dgCMatrix” object: 'p' slot does not have length Dim[2]+1
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dgTMatrix-class")
> ### * dgTMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dgTMatrix-class
> ### Title: Sparse matrices in triplet form
> ### Aliases: dgTMatrix-class +,dgTMatrix,dgTMatrix-method
> ###   determinant,dgTMatrix,logical-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> m <- Matrix(0+1:28, nrow = 4)
> m[-3,c(2,4:5,7)] <- m[ 3, 1:4] <- m[1:3, 6] <- 0
> (mT <- as(m, "TsparseMatrix"))
4 x 7 sparse Matrix of class "dgTMatrix"
                      
[1,] 1 .  9 .  .  .  .
[2,] 2 . 10 .  .  .  .
[3,] . .  . . 19  . 27
[4,] 4 . 12 .  . 24  .
> str(mT)
Formal class 'dgTMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:9] 0 1 3 0 1 3 2 3 2
  ..@ j       : int [1:9] 0 0 0 2 2 2 4 5 6
  ..@ Dim     : int [1:2] 4 7
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:9] 1 2 4 9 10 12 19 24 27
  ..@ factors : list()
> mT[1,]
[1] 1 0 9 0 0 0 0
> mT[4, drop = FALSE]
[1] 4
> stopifnot(identical(mT[lower.tri(mT)],
+                     m [lower.tri(m) ]))
> mT[lower.tri(mT,diag=TRUE)] <- 0
> mT
4 x 7 sparse Matrix of class "dgTMatrix"
                      
[1,] . .  9 .  .  .  .
[2,] . . 10 .  .  .  .
[3,] . .  . . 19  . 27
[4,] . .  . .  . 24  .
> 
> ## Triplet representation with repeated (i,j) entries
> ## *adds* the corresponding x's:
> T2 <- new("dgTMatrix",
+           i = as.integer(c(1,1,0,3,3)),
+           j = as.integer(c(2,2,4,0,0)), x=10*1:5, Dim=4:5)
> str(T2) # contains (i,j,x) slots exactly as above, but
Formal class 'dgTMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:5] 1 1 0 3 3
  ..@ j       : int [1:5] 2 2 4 0 0
  ..@ Dim     : int [1:2] 4 5
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:5] 10 20 30 40 50
  ..@ factors : list()
> T2 ## has only three non-zero entries, as for repeated (i,j)'s,
4 x 5 sparse Matrix of class "dgTMatrix"
                 
[1,]  . .  . . 30
[2,]  . . 30 .  .
[3,]  . .  . .  .
[4,] 90 .  . .  .
>    ## the corresponding x's are "implicitly" added
> stopifnot(nnzero(T2) == 3)
> 
> 
> 
> cleanEx()
> nameEx("diagU2N")
> ### * diagU2N
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diagU2N
> ### Title: Transform Triangular Matrices from Unit Triangular to General
> ###   Triangular and Back
> ### Aliases: diagU2N diagN2U .diagU2N .diagN2U
> ### Keywords: array attribute utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (T <- Diagonal(7) + triu(Matrix(rpois(49, 1/4), 7, 7), k = 1))
7 x 7 sparse Matrix of class "dtCMatrix"
                  
[1,] 1 . . . 1 . 1
[2,] . 1 . . . 1 .
[3,] . . 1 . . . .
[4,] . . . 1 . . 1
[5,] . . . . 1 . .
[6,] . . . . . 1 .
[7,] . . . . . . 1
> (uT <- diagN2U(T)) # "unitriangular"
7 x 7 sparse Matrix of class "dtCMatrix" (unitriangular)
                  
[1,] I . . . 1 . 1
[2,] . I . . . 1 .
[3,] . . I . . . .
[4,] . . . I . . 1
[5,] . . . . I . .
[6,] . . . . . I .
[7,] . . . . . . I
> (t.u <- diagN2U(10*T))# changes the diagonal!
7 x 7 sparse Matrix of class "dtCMatrix" (unitriangular)
                     
[1,] I . . . 10  . 10
[2,] . I . .  . 10  .
[3,] . . I .  .  .  .
[4,] . . . I  .  . 10
[5,] . . . .  I  .  .
[6,] . . . .  .  I  .
[7,] . . . .  .  .  I
> stopifnot(all(T == uT), diag(t.u) == 1,
+           identical(T, diagU2N(uT)))
> T[upper.tri(T)] <- 5 # still "dtC"
> T <- diagN2U(as(T,"triangularMatrix"))
> dT <- as(T, "denseMatrix") # (unitriangular)
> dT.n <- diagU2N(dT, checkDense = TRUE)
> sT.n <- diagU2N(dT)
> stopifnot(is(dT.n, "denseMatrix"), is(sT.n, "sparseMatrix"),
+           dT@diag == "U", dT.n@diag == "N", sT.n@diag == "N",
+           all(dT == dT.n), all(dT == sT.n))
> 
> 
> 
> cleanEx()
> nameEx("diagonalMatrix-class")
> ### * diagonalMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diagonalMatrix-class
> ### Title: Class "diagonalMatrix" of Diagonal Matrices
> ### Aliases: diagonalMatrix-class -,diagonalMatrix,missing-method
> ###   Math,diagonalMatrix-method Ops,diagonalMatrix,triangularMatrix-method
> ###   Summary,diagonalMatrix-method
> ###   coerce,diagonalMatrix,symmetricMatrix-method
> ###   coerce,diagonalMatrix,triangularMatrix-method
> ###   coerce,matrix,diagonalMatrix-method
> ###   determinant,diagonalMatrix,logical-method diag,diagonalMatrix-method
> ###   diag<-,diagonalMatrix-method log,diagonalMatrix-method
> ###   print,diagonalMatrix-method show,diagonalMatrix-method
> ###   summary,diagonalMatrix-method t,diagonalMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> I5 <- Diagonal(5)
> D5 <- Diagonal(x = 10*(1:5))
> ## trivial (but explicitly defined) methods:
> stopifnot(identical(crossprod(I5), I5),
+           identical(tcrossprod(I5), I5),
+           identical(crossprod(I5, D5), D5),
+           identical(tcrossprod(D5, I5), D5),
+           identical(solve(D5), solve(D5, I5)),
+           all.equal(D5, solve(solve(D5)), tolerance = 1e-12)
+           )
> solve(D5)# efficient as is diagonal
5 x 5 diagonal matrix of class "ddiMatrix"
     [,1] [,2] [,3]       [,4]  [,5]
[1,]  0.1    .          .     .    .
[2,]    . 0.05          .     .    .
[3,]    .    . 0.03333333     .    .
[4,]    .    .          . 0.025    .
[5,]    .    .          .     . 0.02
> 
> # an unusual way to construct a band matrix:
> rbind2(cbind2(I5, D5),
+        cbind2(D5, I5))
10 x 10 sparse Matrix of class "dgCMatrix"
                                   
 [1,]  1  .  .  .  . 10  .  .  .  .
 [2,]  .  1  .  .  .  . 20  .  .  .
 [3,]  .  .  1  .  .  .  . 30  .  .
 [4,]  .  .  .  1  .  .  .  . 40  .
 [5,]  .  .  .  .  1  .  .  .  . 50
 [6,] 10  .  .  .  .  1  .  .  .  .
 [7,]  . 20  .  .  .  .  1  .  .  .
 [8,]  .  . 30  .  .  .  .  1  .  .
 [9,]  .  .  . 40  .  .  .  .  1  .
[10,]  .  .  .  . 50  .  .  .  .  1
> 
> 
> 
> cleanEx()
> nameEx("dimScale")
> ### * dimScale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dimScale
> ### Title: Scale the Rows and Columns of a Matrix
> ### Aliases: dimScale rowScale colScale
> ### Keywords: algebra arith array utilities
> 
> ### ** Examples
> 
> n <- 6L
> (x <- forceSymmetric(matrix(1, n, n)))
6 x 6 Matrix of class "dsyMatrix"
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    1    1    1    1    1
[2,]    1    1    1    1    1    1
[3,]    1    1    1    1    1    1
[4,]    1    1    1    1    1    1
[5,]    1    1    1    1    1    1
[6,]    1    1    1    1    1    1
> dimnames(x) <- rep.int(list(letters[seq_len(n)]), 2L)
> 
> d <- seq_len(n)
> (D <- Diagonal(x = d))
6 x 6 diagonal matrix of class "ddiMatrix"
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    .    .    .    .    .
[2,]    .    2    .    .    .    .
[3,]    .    .    3    .    .    .
[4,]    .    .    .    4    .    .
[5,]    .    .    .    .    5    .
[6,]    .    .    .    .    .    6
> 
> (scx <- dimScale(x, d)) # symmetry and 'dimnames' kept
6 x 6 Matrix of class "dsyMatrix"
  a  b  c  d  e  f
a 1  2  3  4  5  6
b 2  4  6  8 10 12
c 3  6  9 12 15 18
d 4  8 12 16 20 24
e 5 10 15 20 25 30
f 6 12 18 24 30 36
> (mmx <- D %*% x %*% D) # symmetry and 'dimnames' lost
6 x 6 Matrix of class "dgeMatrix"
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    2    3    4    5    6
[2,]    2    4    6    8   10   12
[3,]    3    6    9   12   15   18
[4,]    4    8   12   16   20   24
[5,]    5   10   15   20   25   30
[6,]    6   12   18   24   30   36
> stopifnot(identical(unname(as(scx, "generalMatrix")), mmx))
> 
> rowScale(x, d)
6 x 6 Matrix of class "dgeMatrix"
  a b c d e f
a 1 1 1 1 1 1
b 2 2 2 2 2 2
c 3 3 3 3 3 3
d 4 4 4 4 4 4
e 5 5 5 5 5 5
f 6 6 6 6 6 6
> colScale(x, d)
6 x 6 Matrix of class "dgeMatrix"
  a b c d e f
a 1 2 3 4 5 6
b 1 2 3 4 5 6
c 1 2 3 4 5 6
d 1 2 3 4 5 6
e 1 2 3 4 5 6
f 1 2 3 4 5 6
> 
> 
> 
> cleanEx()
> nameEx("dmperm")
> ### * dmperm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dmperm
> ### Title: Dulmage-Mendelsohn Permutation / Decomposition
> ### Aliases: dmperm
> ### Keywords: algebra array utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> set.seed(17)
> (S9 <- rsparsematrix(9, 9, nnz = 10, symmetric=TRUE)) # dsCMatrix
9 x 9 sparse Matrix of class "dsCMatrix"
                                                  
 [1,] -0.055 .    .    .    .   .    1.6 .    .   
 [2,]  .     .    .    .    .   0.84 .   0.64 .   
 [3,]  .     .    0.63 .    .   .    .   .    1.30
 [4,]  .     .    .    0.16 .   .    .   .    0.37
 [5,]  .     .    .    .    .   .    .   1.20 .   
 [6,]  .     0.84 .    .    .   .    .   .    0.19
 [7,]  1.600 .    .    .    .   .    .   .    .   
 [8,]  .     0.64 .    .    1.2 .    .   .    .   
 [9,]  .     .    1.30 0.37 .   0.19 .   .    .   
> str( dm9 <- dmperm(S9) )
List of 6
 $ p  : int [1:9] 1 7 8 6 9 4 3 2 5
 $ q  : int [1:9] 7 1 5 2 3 4 9 6 8
 $ r  : int [1:8] 0 1 2 3 4 7 8 9
 $ s  : int [1:8] 0 1 2 3 4 7 8 9
 $ rr5: int [1:5] 0 0 9 9 9
 $ cc5: int [1:5] 0 0 0 9 9
> (S9p <- with(dm9, S9[p, q]))
9 x 9 sparse Matrix of class "dgCMatrix"
                                                  
 [1,] 1.6 -0.055 .   .    .    .    .    .    .   
 [2,] .    1.600 .   .    .    .    .    .    .   
 [3,] .    .     1.2 0.64 .    .    .    .    .   
 [4,] .    .     .   0.84 .    .    0.19 .    .   
 [5,] .    .     .   .    1.30 0.37 .    0.19 .   
 [6,] .    .     .   .    .    0.16 0.37 .    .   
 [7,] .    .     .   .    0.63 .    1.30 .    .   
 [8,] .    .     .   .    .    .    .    0.84 0.64
 [9,] .    .     .   .    .    .    .    .    1.20
> ## looks good, but *not* quite upper triangular; these, too:
> str( dm9.0 <- dmperm(S9, seed=-1)) # non-random too.
List of 6
 $ p  : int [1:9] 1 7 8 6 9 4 3 2 5
 $ q  : int [1:9] 7 1 5 2 3 4 9 6 8
 $ r  : int [1:8] 0 1 2 3 4 7 8 9
 $ s  : int [1:8] 0 1 2 3 4 7 8 9
 $ rr5: int [1:5] 0 0 9 9 9
 $ cc5: int [1:5] 0 0 0 9 9
> str( dm9_1 <- dmperm(S9, seed= 1)) # a random one
List of 6
 $ p  : int [1:9] 1 7 8 6 3 9 4 2 5
 $ q  : int [1:9] 7 1 5 2 3 4 9 6 8
 $ r  : int [1:8] 0 1 2 3 4 7 8 9
 $ s  : int [1:8] 0 1 2 3 4 7 8 9
 $ rr5: int [1:5] 0 0 9 9 9
 $ cc5: int [1:5] 0 0 0 9 9
> ## The last two permutations differ, but have the same effect!
> (S9p0 <- with(dm9.0, S9[p, q])) # .. hmm ..
9 x 9 sparse Matrix of class "dgCMatrix"
                                                  
 [1,] 1.6 -0.055 .   .    .    .    .    .    .   
 [2,] .    1.600 .   .    .    .    .    .    .   
 [3,] .    .     1.2 0.64 .    .    .    .    .   
 [4,] .    .     .   0.84 .    .    0.19 .    .   
 [5,] .    .     .   .    1.30 0.37 .    0.19 .   
 [6,] .    .     .   .    .    0.16 0.37 .    .   
 [7,] .    .     .   .    0.63 .    1.30 .    .   
 [8,] .    .     .   .    .    .    .    0.84 0.64
 [9,] .    .     .   .    .    .    .    .    1.20
> stopifnot(all.equal(S9p0, S9p))# same as as default, but different from the random one
> 
> 
> set.seed(11)
> (M <- triu(rsparsematrix(9,11, 1/4)))
9 x 11 sparse Matrix of class "dgCMatrix"
                                                        
 [1,] .  0.89 . .  0.0072  .     .    .    .  .     .   
 [2,] . -0.34 . .  .      -0.61 -0.44 .    .  .    -0.94
 [3,] .  .    . . -1.6000  .     .    .    .  .     0.89
 [4,] .  .    . .  1.5000 -0.19  .    0.02 . -0.22  .   
 [5,] .  .    . .  .       .     .    .    . -0.98  .   
 [6,] .  .    . .  .       .    -0.19 .    . -0.35  .   
 [7,] .  .    . .  .       .     .    .    .  .     .   
 [8,] .  .    . .  .       .     .    .    .  .     .   
 [9,] .  .    . .  .       .     .    .    .  .     0.48
> dM <- dmperm(M); with(dM, M[p, q])
9 x 11 sparse Matrix of class "dgCMatrix"
                                                        
 [1,] . . . . 0.02 -0.19  .     1.5000  .    -0.22  .   
 [2,] . . . . .    -0.61 -0.34  .      -0.44  .    -0.94
 [3,] . . . . .     .     0.89  0.0072  .     .     .   
 [4,] . . . . .     .     .    -1.6000  .     .     0.89
 [5,] . . . . .     .     .     .      -0.19 -0.35  .   
 [6,] . . . . .     .     .     .       .    -0.98  .   
 [7,] . . . . .     .     .     .       .     .     0.48
 [8,] . . . . .     .     .     .       .     .     .   
 [9,] . . . . .     .     .     .       .     .     .   
> (Mp <- M[sample.int(nrow(M)), sample.int(ncol(M))])
9 x 11 sparse Matrix of class "dgCMatrix"
                                                        
 [1,]  0.89 -1.6000 . . .     .    . .  .     .     .   
 [2,]  0.48  .      . . .     .    . .  .     .     .   
 [3,]  .     1.5000 . . 0.02  .    . . -0.22 -0.19  .   
 [4,]  .     .      . . .     .    . .  .     .     .   
 [5,]  .     .      . . .     .    . . -0.35  .    -0.19
 [6,]  .     .      . . .     .    . . -0.98  .     .   
 [7,]  .     .      . . .     .    . .  .     .     .   
 [8,] -0.94  .      . . .    -0.34 . .  .    -0.61 -0.44
 [9,]  .     0.0072 . . .     0.89 . .  .     .     .   
> dMp <- dmperm(Mp); with(dMp, Mp[p, q])
9 x 11 sparse Matrix of class "dgCMatrix"
                                                        
 [1,] . . . . 0.02 -0.19  .     1.5000  .     .    -0.22
 [2,] . . . . .    -0.61 -0.34  .      -0.94 -0.44  .   
 [3,] . . . . .     .     0.89  0.0072  .     .     .   
 [4,] . . . . .     .     .    -1.6000  0.89  .     .   
 [5,] . . . . .     .     .     .       0.48  .     .   
 [6,] . . . . .     .     .     .       .    -0.19 -0.35
 [7,] . . . . .     .     .     .       .     .    -0.98
 [8,] . . . . .     .     .     .       .     .     .   
 [9,] . . . . .     .     .     .       .     .     .   
> 
> 
> set.seed(7)
> (n7 <- rsparsematrix(5, 12, nnz = 10, rand.x = NULL))
5 x 12 sparse Matrix of class "ngCMatrix"
                            
[1,] . . . . . | | . . . . .
[2,] | . . . . . . . | . . .
[3,] | | . . . | . . . . . .
[4,] . . . | . . . | . . . .
[5,] . . | . . . . . . . . .
> str( dm.7 <- dmperm(n7) )
List of 6
 $ p  : int [1:5] 2 3 4 1 5
 $ q  : int [1:12] 5 7 8 9 10 11 12 1 2 4 ...
 $ r  : int [1:3] 0 4 5
 $ s  : int [1:3] 0 11 12
 $ rr5: int [1:5] 0 4 5 5 5
 $ cc5: int [1:5] 0 7 11 12 12
> stopifnot(exprs = {
+   lengths(dm.7[1:2]) == dim(n7)
+   identical(dm.7,      dmperm(as(n7, "dMatrix")))
+   identical(dm.7[1:4], dmperm(n7, nAns=4))
+   identical(dm.7[1:2], dmperm(n7, nAns=2))
+ })
> 
> 
> 
> cleanEx()
> nameEx("dpoMatrix-class")
> ### * dpoMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dpoMatrix-class
> ### Title: Positive Semi-definite Dense (Packed | Non-packed) Numeric
> ###   Matrices
> ### Aliases: dpoMatrix-class dppMatrix-class corMatrix-class
> ###   pcorMatrix-class Arith,dpoMatrix,logical-method
> ###   Arith,dpoMatrix,numeric-method Arith,logical,dpoMatrix-method
> ###   Arith,numeric,dpoMatrix-method Ops,dpoMatrix,logical-method
> ###   Ops,dpoMatrix,numeric-method Ops,logical,dpoMatrix-method
> ###   Ops,numeric,dpoMatrix-method coerce,dpoMatrix,corMatrix-method
> ###   coerce,dpoMatrix,dppMatrix-method coerce,matrix,dpoMatrix-method
> ###   determinant,dpoMatrix,logical-method Arith,dppMatrix,logical-method
> ###   Arith,dppMatrix,numeric-method Arith,logical,dppMatrix-method
> ###   Arith,numeric,dppMatrix-method Ops,dppMatrix,logical-method
> ###   Ops,dppMatrix,numeric-method Ops,logical,dppMatrix-method
> ###   Ops,numeric,dppMatrix-method coerce,dppMatrix,dpoMatrix-method
> ###   coerce,dppMatrix,pcorMatrix-method coerce,matrix,dppMatrix-method
> ###   determinant,dppMatrix,logical-method
> ###   coerce,corMatrix,pcorMatrix-method coerce,matrix,corMatrix-method
> ###   coerce,pcorMatrix,corMatrix-method coerce,matrix,pcorMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> h6 <- Hilbert(6)
> rcond(h6)
[1] 3.439939e-08
> str(h6)
Formal class 'dpoMatrix' [package "Matrix"] with 5 slots
  ..@ Dim     : int [1:2] 6 6
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:36] 1 0.5 0.333 0.25 0.2 ...
  ..@ uplo    : chr "U"
  ..@ factors :List of 1
  .. ..$ Cholesky:Formal class 'Cholesky' [package "Matrix"] with 5 slots
  .. .. .. ..@ uplo    : chr "U"
  .. .. .. ..@ x       : num [1:36] 1 0 0 0 0 ...
  .. .. .. ..@ perm    : int(0) 
  .. .. .. ..@ Dim     : int [1:2] 6 6
  .. .. .. ..@ Dimnames:List of 2
  .. .. .. .. ..$ : NULL
  .. .. .. .. ..$ : NULL
> h6 * 27720 # is ``integer''
6 x 6 Matrix of class "dpoMatrix"
      [,1]  [,2] [,3] [,4] [,5] [,6]
[1,] 27720 13860 9240 6930 5544 4620
[2,] 13860  9240 6930 5544 4620 3960
[3,]  9240  6930 5544 4620 3960 3465
[4,]  6930  5544 4620 3960 3465 3080
[5,]  5544  4620 3960 3465 3080 2772
[6,]  4620  3960 3465 3080 2772 2520
> solve(h6)
6 x 6 Matrix of class "dpoMatrix"
      [,1]    [,2]     [,3]     [,4]     [,5]     [,6]
[1,]    36    -630     3360    -7560     7560    -2772
[2,]  -630   14700   -88200   211680  -220500    83160
[3,]  3360  -88200   564480 -1411200  1512000  -582120
[4,] -7560  211680 -1411200  3628800 -3969000  1552320
[5,]  7560 -220500  1512000 -3969000  4410000 -1746360
[6,] -2772   83160  -582120  1552320 -1746360   698544
> str(hp6 <- pack(h6))
Formal class 'dppMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 6 6
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:21] 1 0.5 0.333 0.333 0.25 ...
  ..@ factors :List of 1
  .. ..$ Cholesky:Formal class 'Cholesky' [package "Matrix"] with 5 slots
  .. .. .. ..@ uplo    : chr "U"
  .. .. .. ..@ x       : num [1:36] 1 0 0 0 0 ...
  .. .. .. ..@ perm    : int(0) 
  .. .. .. ..@ Dim     : int [1:2] 6 6
  .. .. .. ..@ Dimnames:List of 2
  .. .. .. .. ..$ : NULL
  .. .. .. .. ..$ : NULL
> 
> ### Note that  as(*, "corMatrix")  *scales* the matrix
> (ch6 <- as(h6, "corMatrix"))
6 x 6 Matrix of class "corMatrix"
          [,1]      [,2]      [,3]      [,4]      [,5]      [,6]
[1,] 1.0000000 0.8660254 0.7453560 0.6614378 0.6000000 0.5527708
[2,] 0.8660254 1.0000000 0.9682458 0.9165151 0.8660254 0.8206518
[3,] 0.7453560 0.9682458 1.0000000 0.9860133 0.9583148 0.9270248
[4,] 0.6614378 0.9165151 0.9860133 1.0000000 0.9921567 0.9749960
[5,] 0.6000000 0.8660254 0.9583148 0.9921567 1.0000000 0.9949874
[6,] 0.5527708 0.8206518 0.9270248 0.9749960 0.9949874 1.0000000
> stopifnot(all.equal(as(h6 * 27720, "dsyMatrix"), round(27720 * h6),
+                     tolerance = 1e-14),
+           all.equal(ch6@sd^(-2), 2*(1:6)-1,
+                     tolerance = 1e-12))
> chch <- Cholesky(ch6, perm = FALSE)
> stopifnot(identical(chch, ch6@factors$Cholesky),
+           all(abs(crossprod(as(chch, "dtrMatrix")) - ch6) < 1e-10))
> 
> 
> 
> cleanEx()
> nameEx("drop0")
> ### * drop0
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop0
> ### Title: Drop Non-Structural Zeros from a Sparse Matrix
> ### Aliases: drop0
> ### Keywords: array manip utilities
> 
> ### ** Examples
> 
> (m <- sparseMatrix(i = 1:8, j = 2:9, x = c(0:2, 3:-1),
+                    dims = c(10L, 20L)))
10 x 20 sparse Matrix of class "dgCMatrix"
                                              
 [1,] . 0 . . . . . .  . . . . . . . . . . . .
 [2,] . . 1 . . . . .  . . . . . . . . . . . .
 [3,] . . . 2 . . . .  . . . . . . . . . . . .
 [4,] . . . . 3 . . .  . . . . . . . . . . . .
 [5,] . . . . . 2 . .  . . . . . . . . . . . .
 [6,] . . . . . . 1 .  . . . . . . . . . . . .
 [7,] . . . . . . . 0  . . . . . . . . . . . .
 [8,] . . . . . . . . -1 . . . . . . . . . . .
 [9,] . . . . . . . .  . . . . . . . . . . . .
[10,] . . . . . . . .  . . . . . . . . . . . .
> drop0(m)
10 x 20 sparse Matrix of class "dgCMatrix"
                                              
 [1,] . . . . . . . .  . . . . . . . . . . . .
 [2,] . . 1 . . . . .  . . . . . . . . . . . .
 [3,] . . . 2 . . . .  . . . . . . . . . . . .
 [4,] . . . . 3 . . .  . . . . . . . . . . . .
 [5,] . . . . . 2 . .  . . . . . . . . . . . .
 [6,] . . . . . . 1 .  . . . . . . . . . . . .
 [7,] . . . . . . . .  . . . . . . . . . . . .
 [8,] . . . . . . . . -1 . . . . . . . . . . .
 [9,] . . . . . . . .  . . . . . . . . . . . .
[10,] . . . . . . . .  . . . . . . . . . . . .
> 
> ## A larger example:
> t5 <- new("dtCMatrix", Dim = c(5L, 5L), uplo = "L",
+           x = c(10, 1, 3, 10, 1, 10, 1, 10, 10),
+           i = c(0L,2L,4L, 1L, 3L,2L,4L, 3L, 4L),
+           p = c(0L, 3L, 5L, 7:9))
> TT <- kronecker(t5, kronecker(kronecker(t5, t5), t5))
> IT <- solve(TT)
> I. <- TT %*% IT ;  nnzero(I.) # 697 ( == 625 + 72 )
[1] 697
> I.0 <- drop0(zapsmall(I.))
> ## which actually can be more efficiently achieved by
> I.. <- drop0(I., tol = 1e-15)
> stopifnot(all(I.0 == Diagonal(625)), nnzero(I..) == 625)
> 
> 
> 
> cleanEx()
> nameEx("dsCMatrix-class")
> ### * dsCMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dsCMatrix-class
> ### Title: Numeric Symmetric Sparse (column compressed) Matrices
> ### Aliases: dsCMatrix-class dsTMatrix-class
> ###   Arith,dsCMatrix,dsCMatrix-method determinant,dsCMatrix,logical-method
> ###   determinant,dsTMatrix,logical-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> mm <- Matrix(toeplitz(c(10, 0, 1, 0, 3)), sparse = TRUE)
> mm # automatically dsCMatrix
5 x 5 sparse Matrix of class "dsCMatrix"
                   
[1,] 10  .  1  .  3
[2,]  . 10  .  1  .
[3,]  1  . 10  .  1
[4,]  .  1  . 10  .
[5,]  3  .  1  . 10
> str(mm)
Formal class 'dsCMatrix' [package "Matrix"] with 7 slots
  ..@ i       : int [1:9] 0 1 0 2 1 3 0 2 4
  ..@ p       : int [1:6] 0 1 2 4 6 9
  ..@ Dim     : int [1:2] 5 5
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:9] 10 10 1 10 1 10 3 1 10
  ..@ uplo    : chr "U"
  ..@ factors : list()
> mT <- as(as(mm, "generalMatrix"), "TsparseMatrix")
> 
> ## Either
> (symM <- as(mT, "symmetricMatrix")) # dsT
5 x 5 sparse Matrix of class "dsTMatrix"
                   
[1,] 10  .  1  .  3
[2,]  . 10  .  1  .
[3,]  1  . 10  .  1
[4,]  .  1  . 10  .
[5,]  3  .  1  . 10
> (symC <- as(symM, "CsparseMatrix")) # dsC
5 x 5 sparse Matrix of class "dsCMatrix"
                   
[1,] 10  .  1  .  3
[2,]  . 10  .  1  .
[3,]  1  . 10  .  1
[4,]  .  1  . 10  .
[5,]  3  .  1  . 10
> ## or
> sT <- Matrix(mT, sparse=TRUE, forceCheck=TRUE) # dsT
> 
> sym2 <- as(symC, "TsparseMatrix")
> ## --> the same as 'symM', a "dsTMatrix"
> ## Don't show: 
> stopifnot(identical(sT, symM), identical(sym2, symM),
+           class(sym2) == "dsTMatrix",
+ 	  identical(sym2[1,], sT[1,]),
+ 	  identical(sym2[,2], sT[,2]))
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dsRMatrix-class")
> ### * dsRMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dsRMatrix-class
> ### Title: Symmetric Sparse Compressed Row Matrices
> ### Aliases: dsRMatrix-class determinant,dsRMatrix,logical-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (m0 <- new("dsRMatrix"))
0 x 0 sparse Matrix of class "dsRMatrix"
<0 x 0 matrix>
> m2 <- new("dsRMatrix", Dim = c(2L,2L),
+           x = c(3,1), j = c(1L,1L), p = 0:2)
> m2
2 x 2 sparse Matrix of class "dsRMatrix"
        
[1,] . 3
[2,] 3 1
> stopifnot(colSums(as(m2, "TsparseMatrix")) == 3:4)
> str(m2)
Formal class 'dsRMatrix' [package "Matrix"] with 7 slots
  ..@ p       : int [1:3] 0 1 2
  ..@ j       : int [1:2] 1 1
  ..@ Dim     : int [1:2] 2 2
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:2] 3 1
  ..@ uplo    : chr "U"
  ..@ factors : list()
> (ds2 <- forceSymmetric(diag(2))) # dsy*
2 x 2 Matrix of class "dsyMatrix"
     [,1] [,2]
[1,]    1    0
[2,]    0    1
> dR <- as(ds2, "RsparseMatrix")
> dR # dsRMatrix
2 x 2 sparse Matrix of class "dsRMatrix"
        
[1,] 1 .
[2,] . 1
> 
> 
> 
> cleanEx()
> nameEx("dsparseMatrix-class")
> ### * dsparseMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dsparseMatrix-class
> ### Title: Virtual Class "dsparseMatrix" of Numeric Sparse Matrices
> ### Aliases: dsparseMatrix-class Arith,dsparseMatrix,logical-method
> ###   Arith,dsparseMatrix,numeric-method Arith,logical,dsparseMatrix-method
> ###   Arith,numeric,dsparseMatrix-method
> ###   Ops,dsparseMatrix,nsparseMatrix-method
> ###   coerce,matrix,dsparseMatrix-method coerce,vector,dsparseMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("dsparseMatrix")
Virtual Class "dsparseMatrix" [package "Matrix"]

Slots:
                                 
Name:         x      Dim Dimnames
Class:  numeric  integer     list

Extends: 
Class "dMatrix", directly
Class "sparseMatrix", directly
Class "Matrix", by class "dMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 3

Known Subclasses: 
Class "dgCMatrix", directly
Class "dtCMatrix", directly
Class "dsCMatrix", directly
Class "dgRMatrix", directly
Class "dtRMatrix", directly
Class "dsRMatrix", directly
Class "dgTMatrix", directly
Class "dtTMatrix", directly
Class "dsTMatrix", directly
Class "A", by class "dgCMatrix", distance 2
> 
> 
> 
> cleanEx()
> nameEx("dsyMatrix-class")
> ### * dsyMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dsyMatrix-class
> ### Title: Symmetric Dense (Packed or Unpacked) Numeric Matrices
> ### Aliases: dsyMatrix-class dspMatrix-class
> ###   coerce,dsyMatrix,corMatrix-method coerce,dsyMatrix,dpoMatrix-method
> ###   determinant,dsyMatrix,logical-method
> ###   coerce,dspMatrix,dppMatrix-method coerce,dspMatrix,pcorMatrix-method
> ###   determinant,dspMatrix,logical-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> ## Only upper triangular part matters (when uplo == "U" as per default)
> (sy2 <- new("dsyMatrix", Dim = as.integer(c(2,2)), x = c(14, NA,32,77)))
2 x 2 Matrix of class "dsyMatrix"
     [,1] [,2]
[1,]   14   32
[2,]   32   77
> str(t(sy2)) # uplo = "L", and the lower tri. (i.e. NA is replaced).
Formal class 'dsyMatrix' [package "Matrix"] with 5 slots
  ..@ Dim     : int [1:2] 2 2
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:4] 14 32 NA 77
  ..@ uplo    : chr "L"
  ..@ factors : list()
> 
> chol(sy2) #-> "Cholesky" matrix
2 x 2 Matrix of class "dtrMatrix"
     [,1]     [,2]    
[1,] 3.741657 8.552360
[2,]        . 1.963961
> (sp2 <- pack(sy2)) # a "dspMatrix"
2 x 2 Matrix of class "dspMatrix"
     [,1] [,2]
[1,]   14   32
[2,]   32   77
> 
> ## Coercing to dpoMatrix gives invalid object:
> sy3 <- new("dsyMatrix", Dim = as.integer(c(2,2)), x = c(14, -1, 2, -7))
> try(as(sy3, "dpoMatrix")) # -> error: not positive definite
Error in asMethod(object) : 
  not a positive definite matrix (and positive semidefiniteness is not checked)
> ## Don't show: 
> tr <- try(as(sy3, "dpoMatrix"), silent=TRUE)
> stopifnot(1 == grep("not a positive definite matrix",
+                     as.character(tr)),
+ 	  is(sp2, "dspMatrix"))
> ## End(Don't show)
> 
> ## 4x4 example
> m <- matrix(0,4,4); m[upper.tri(m)] <- 1:6
> (sym <- m+t(m)+diag(11:14, 4))
     [,1] [,2] [,3] [,4]
[1,]   11    1    2    4
[2,]    1   12    3    5
[3,]    2    3   13    6
[4,]    4    5    6   14
> (S1 <- pack(sym))
4 x 4 Matrix of class "dspMatrix"
     [,1] [,2] [,3] [,4]
[1,]   11    1    2    4
[2,]    1   12    3    5
[3,]    2    3   13    6
[4,]    4    5    6   14
> (S2 <- t(S1))
4 x 4 Matrix of class "dspMatrix"
     [,1] [,2] [,3] [,4]
[1,]   11    1    2    4
[2,]    1   12    3    5
[3,]    2    3   13    6
[4,]    4    5    6   14
> stopifnot(all(S1 == S2)) # equal "seen as matrix", but differ internally :
> str(S1)
Formal class 'dspMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 4 4
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:10] 11 1 12 2 3 13 4 5 6 14
  ..@ factors : list()
> S2@x
 [1] 11  1  2  4 12  3  5 13  6 14
> 
> 
> 
> cleanEx()
> nameEx("dtCMatrix-class")
> ### * dtCMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dtCMatrix-class
> ### Title: Triangular, (compressed) sparse column matrices
> ### Aliases: dtCMatrix-class dtTMatrix-class
> ###   Arith,dtCMatrix,dtCMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("dtCMatrix")
Class "dtCMatrix" [package "Matrix"]

Slots:
                                                                            
Name:          i         p       Dim  Dimnames         x      uplo      diag
Class:   integer   integer   integer      list   numeric character character

Extends: 
Class "CsparseMatrix", directly
Class "dsparseMatrix", directly
Class "triangularMatrix", directly
Class "dMatrix", by class "dsparseMatrix", distance 2
Class "sparseMatrix", by class "dsparseMatrix", distance 2
Class "Matrix", by class "triangularMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 4
> showClass("dtTMatrix")
Class "dtTMatrix" [package "Matrix"]

Slots:
                                                                            
Name:          i         j       Dim  Dimnames         x      uplo      diag
Class:   integer   integer   integer      list   numeric character character

Extends: 
Class "TsparseMatrix", directly
Class "dsparseMatrix", directly
Class "triangularMatrix", directly
Class "dMatrix", by class "dsparseMatrix", distance 2
Class "sparseMatrix", by class "dsparseMatrix", distance 2
Class "Matrix", by class "triangularMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 4
> t1 <- new("dtTMatrix", x= c(3,7), i= 0:1, j=3:2, Dim= as.integer(c(4,4)))
> t1
4 x 4 sparse Matrix of class "dtTMatrix"
            
[1,] . . . 3
[2,] . . 7 .
[3,] . . . .
[4,] . . . .
> ## from  0-diagonal to unit-diagonal {low-level step}:
> tu <- t1 ; tu@diag <- "U"
> tu
4 x 4 sparse Matrix of class "dtTMatrix" (unitriangular)
            
[1,] I . . 3
[2,] . I 7 .
[3,] . . I .
[4,] . . . I
> (cu <- as(tu, "CsparseMatrix"))
4 x 4 sparse Matrix of class "dtCMatrix" (unitriangular)
            
[1,] I . . 3
[2,] . I 7 .
[3,] . . I .
[4,] . . . I
> str(cu)# only two entries in @i and @x
Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
  ..@ i       : int [1:2] 1 0
  ..@ p       : int [1:5] 0 0 0 1 2
  ..@ Dim     : int [1:2] 4 4
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:2] 7 3
  ..@ uplo    : chr "U"
  ..@ diag    : chr "U"
> stopifnot(cu@i == 1:0,
+           all(2 * symmpart(cu) == Diagonal(4) + forceSymmetric(cu)))
> 
> t1[1,2:3] <- -1:-2
> diag(t1) <- 10*c(1:2,3:2)
> t1 # still triangular
4 x 4 sparse Matrix of class "dtTMatrix"
                
[1,] 10 -1 -2  3
[2,]  . 20  7  .
[3,]  .  . 30  .
[4,]  .  .  . 20
> (it1 <- solve(t1))
4 x 4 sparse Matrix of class "dtCMatrix"
                                 
[1,] 0.1 0.005  0.00550000 -0.015
[2,] .   0.050 -0.01166667  .    
[3,] .   .      0.03333333  .    
[4,] .   .      .           0.050
> t1. <- solve(it1)
> all(abs(t1 - t1.) < 10 * .Machine$double.eps)
[1] TRUE
> 
> ## 2nd example
> U5 <- new("dtCMatrix", i= c(1L, 0:3), p=c(0L,0L,0:2, 5L), Dim = c(5L, 5L),
+           x = rep(1, 5), diag = "U")
> U5
5 x 5 sparse Matrix of class "dtCMatrix" (unitriangular)
              
[1,] I . . 1 .
[2,] . I 1 . 1
[3,] . . I . 1
[4,] . . . I 1
[5,] . . . . I
> (iu <- solve(U5)) # contains one '0'
5 x 5 sparse Matrix of class "dtCMatrix"
                 
[1,] 1 .  . -1  1
[2,] . 1 -1  .  .
[3,] . .  1  . -1
[4,] . .  .  1 -1
[5,] . .  .  .  1
> validObject(iu2 <- solve(U5, Diagonal(5)))# failed in earlier versions
[1] TRUE
> 
> I5 <- iu  %*% U5 # should equal the identity matrix
> i5 <- iu2 %*% U5
> m53 <- matrix(1:15, 5,3, dimnames=list(NULL,letters[1:3]))
> asDiag <- function(M) as(drop0(M), "diagonalMatrix")
> stopifnot(
+    all.equal(Diagonal(5), asDiag(I5), tolerance=1e-14) ,
+    all.equal(Diagonal(5), asDiag(i5), tolerance=1e-14) ,
+    identical(list(NULL, dimnames(m53)[[2]]), dimnames(solve(U5, m53)))
+ )
> ## Don't show: 
> i5. <- I5; colnames(i5.) <- LETTERS[11:15]
> M53 <- as(m53, "denseMatrix")
> stopifnot(
+    identical((dns <- dimnames(solve(i5., M53))),
+              dimnames(solve(as.matrix(i5.), as.matrix(M53)))) ,
+    identical(dns, dimnames(solve(i5., as.matrix(M53))))
+ )
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dtRMatrix-class-def")
> ### * dtRMatrix-class-def
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dtRMatrix-class
> ### Title: Triangular Sparse Compressed Row Matrices
> ### Aliases: dtRMatrix-class
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (m0 <- new("dtRMatrix"))
0 x 0 sparse Matrix of class "dtRMatrix"
<0 x 0 matrix>
> (m2 <- new("dtRMatrix", Dim = c(2L,2L),
+                         x = c(5, 1:2), p = c(0L,2:3), j= c(0:1,1L)))
2 x 2 sparse Matrix of class "dtRMatrix"
        
[1,] 5 1
[2,] . 2
> str(m2)
Formal class 'dtRMatrix' [package "Matrix"] with 7 slots
  ..@ p       : int [1:3] 0 2 3
  ..@ j       : int [1:3] 0 1 1
  ..@ Dim     : int [1:2] 2 2
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:3] 5 1 2
  ..@ uplo    : chr "U"
  ..@ diag    : chr "N"
> (m3 <- as(Diagonal(2), "RsparseMatrix"))# --> dtRMatrix
2 x 2 sparse Matrix of class "dtRMatrix" (unitriangular)
        
[1,] I .
[2,] . I
> 
> 
> 
> cleanEx()
> nameEx("dtpMatrix-class")
> ### * dtpMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dtpMatrix-class
> ### Title: Packed Triangular Dense Matrices - "dtpMatrix"
> ### Aliases: dtpMatrix-class
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("dtrMatrix")
Class "dtrMatrix" [package "Matrix"]

Slots:
                                                        
Name:        Dim  Dimnames         x      uplo      diag
Class:   integer      list   numeric character character

Extends: 
Class "unpackedMatrix", directly
Class "ddenseMatrix", directly
Class "triangularMatrix", directly
Class "dMatrix", by class "ddenseMatrix", distance 2
Class "denseMatrix", by class "ddenseMatrix", distance 2
Class "Matrix", by class "triangularMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 4
> 
> example("dtrMatrix-class", echo=FALSE)
Formal class 'dtpMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 4 4
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:10] 1 1 1 2 3 1 4 5 6 1
  ..@ diag    : chr "N"
> (p1 <- pack(T2))
2 x 2 Matrix of class "dtpMatrix"
     [,1] [,2]
[1,]    2    .
[2,]    3   -1
> str(p1)
Formal class 'dtpMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "L"
  ..@ Dim     : int [1:2] 2 2
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:3] 2 3 -1
  ..@ diag    : chr "N"
> (pp <- pack(T))
2 x 2 Matrix of class "dtpMatrix"
     [,1] [,2]
[1,]    2    3
[2,]    .   -1
> ip1 <- solve(p1)
> stopifnot(length(p1@x) == 3, length(pp@x) == 3,
+           p1 @ uplo == T2 @ uplo, pp @ uplo == T @ uplo,
+ 	  identical(t(pp), p1), identical(t(p1), pp),
+ 	  all((l.d <- p1 - T2) == 0), is(l.d, "dtpMatrix"),
+ 	  all((u.d <- pp - T ) == 0), is(u.d, "dtpMatrix"),
+ 	  l.d@uplo == T2@uplo, u.d@uplo == T@uplo,
+ 	  identical(t(ip1), solve(pp)), is(ip1, "dtpMatrix"),
+ 	  all.equal(as(solve(p1,p1), "diagonalMatrix"), Diagonal(2)))
> 
> 
> 
> cleanEx()
> nameEx("dtrMatrix-class")
> ### * dtrMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dtrMatrix-class
> ### Title: Triangular, dense, numeric matrices
> ### Aliases: dtrMatrix-class
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (m <- rbind(2:3, 0:-1))
     [,1] [,2]
[1,]    2    3
[2,]    0   -1
> (M <- as(m, "generalMatrix"))
2 x 2 Matrix of class "dgeMatrix"
     [,1] [,2]
[1,]    2    3
[2,]    0   -1
> 
> (T <- as(M, "triangularMatrix")) # formally upper triangular
2 x 2 Matrix of class "dtrMatrix"
     [,1] [,2]
[1,]    2    3
[2,]    .   -1
> (T2 <- as(t(M), "triangularMatrix"))
2 x 2 Matrix of class "dtrMatrix"
     [,1] [,2]
[1,]    2    .
[2,]    3   -1
> stopifnot(T@uplo == "U", T2@uplo == "L", identical(T2, t(T)))
> 
> m <- matrix(0,4,4); m[upper.tri(m)] <- 1:6
> (t1 <- Matrix(m+diag(,4)))
4 x 4 Matrix of class "dtrMatrix"
     [,1] [,2] [,3] [,4]
[1,]    1    1    2    4
[2,]    .    1    3    5
[3,]    .    .    1    6
[4,]    .    .    .    1
> str(t1p <- pack(t1))
Formal class 'dtpMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 4 4
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:10] 1 1 1 2 3 1 4 5 6 1
  ..@ diag    : chr "N"
> (t1pu <- diagN2U(t1p))
4 x 4 sparse Matrix of class "dtCMatrix" (unitriangular)
            
[1,] I 1 2 4
[2,] . I 3 5
[3,] . . I 6
[4,] . . . I
> stopifnot(exprs = {
+    inherits(t1 , "dtrMatrix"); validObject(t1)
+    inherits(t1p, "dtpMatrix"); validObject(t1p)
+    inherits(t1pu,"dtCMatrix"); validObject(t1pu)
+    t1pu@x == 1:6
+    all(t1pu == t1p)
+    identical((t1pu - t1)@x, numeric())# sparse all-0
+ })
> 
> 
> 
> cleanEx()
> nameEx("expand")
> ### * expand
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expand-methods
> ### Title: Expand Matrix Factorizations
> ### Aliases: expand expand-methods expand1 expand1-methods expand2
> ###   expand2-methods expand,CHMfactor-method expand,denseLU-method
> ###   expand,sparseLU-method expand1,BunchKaufman-method
> ###   expand1,CHMsimpl-method expand1,CHMsuper-method
> ###   expand1,Cholesky-method expand1,Schur-method expand1,denseLU-method
> ###   expand1,pBunchKaufman-method expand1,pCholesky-method
> ###   expand1,sparseLU-method expand1,sparseQR-method
> ###   expand2,BunchKaufman-method expand2,CHMsimpl-method
> ###   expand2,CHMsuper-method expand2,Cholesky-method expand2,Schur-method
> ###   expand2,denseLU-method expand2,pBunchKaufman-method
> ###   expand2,pCholesky-method expand2,sparseLU-method
> ###   expand2,sparseQR-method
> ### Keywords: algebra array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showMethods("expand1", inherited = FALSE)
Function: expand1 (package Matrix)
x="BunchKaufman"
x="CHMsimpl"
x="CHMsuper"
x="Cholesky"
x="Schur"
x="denseLU"
x="pBunchKaufman"
x="pCholesky"
x="sparseLU"
x="sparseQR"

> showMethods("expand2", inherited = FALSE)
Function: expand2 (package Matrix)
x="BunchKaufman"
x="CHMsimpl"
x="CHMsuper"
x="Cholesky"
x="Schur"
x="denseLU"
x="pBunchKaufman"
x="pCholesky"
x="sparseLU"
x="sparseQR"

> set.seed(0)
> 
> (A <- Matrix(rnorm(9L, 0, 10), 3L, 3L))
3 x 3 Matrix of class "dgeMatrix"
          [,1]       [,2]        [,3]
[1,] 12.629543  12.724293 -9.28567035
[2,] -3.262334   4.146414 -2.94720447
[3,] 13.297993 -15.399500 -0.05767173
> (lu.A <- lu(A))
LU factorization of Formal class 'denseLU' [package "Matrix"] with 4 slots
  ..@ x       : num [1:9] 13.298 0.95 -0.245 -15.4 27.35 ...
  ..@ perm    : int [1:3] 3 3 3
  ..@ Dim     : int [1:2] 3 3
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> (e.lu.A <- expand2(lu.A))
$P1.
3 x 3 sparse Matrix of class "pMatrix"
          
[1,] . | .
[2,] . . |
[3,] | . .

$L
3 x 3 Matrix of class "dtrMatrix" (unitriangular)
     [,1]        [,2]        [,3]       
[1,]  1.00000000           .           .
[2,]  0.94973303  1.00000000           .
[3,] -0.24532527  0.01347465  1.00000000

$U
3 x 3 Matrix of class "dtrMatrix"
     [,1]         [,2]         [,3]        
[1,]  13.29799263 -15.39950042  -0.05767173
[2,]            .  27.34970743  -9.23089760
[3,]            .            .  -2.83696967

> stopifnot(exprs = {
+     is.list(e.lu.A)
+     identical(names(e.lu.A), c("P1.", "L", "U"))
+     all(sapply(e.lu.A, is, "Matrix"))
+     all.equal(as(A, "matrix"), as(Reduce(`%*%`, e.lu.A), "matrix"))
+ })
> 
> ## 'expand1' and 'expand2' give equivalent results modulo
> ## dimnames and representation of permutation matrices;
> ## see also function 'alt' in example("Cholesky-methods")
> (a1 <- sapply(names(e.lu.A), expand1, x = lu.A, simplify = FALSE))
$P1.
3 x 3 sparse Matrix of class "pMatrix"
          
[1,] . | .
[2,] . . |
[3,] | . .

$L
3 x 3 Matrix of class "dtrMatrix" (unitriangular)
     [,1]        [,2]        [,3]       
[1,]  1.00000000           .           .
[2,]  0.94973303  1.00000000           .
[3,] -0.24532527  0.01347465  1.00000000

$U
3 x 3 Matrix of class "dtrMatrix"
     [,1]         [,2]         [,3]        
[1,]  13.29799263 -15.39950042  -0.05767173
[2,]            .  27.34970743  -9.23089760
[3,]            .            .  -2.83696967

> all.equal(a1, e.lu.A)
[1] "Component “P1.”: Attributes: < Component “margin”: Mean relative difference: 0.5 >"    
[2] "Component “P1.”: Attributes: < Component “perm”: Mean relative difference: 0.6666667 >"
> 
> ## see help("denseLU-class") and others for more examples
> 
> 
> 
> cleanEx()
> nameEx("expm")
> ### * expm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expm-methods
> ### Title: Matrix Exponential
> ### Aliases: expm expm-methods expm,Matrix-method expm,dMatrix-method
> ###   expm,ddiMatrix-method expm,dgeMatrix-method expm,dspMatrix-method
> ###   expm,dsparseMatrix-method expm,dsyMatrix-method expm,dtpMatrix-method
> ###   expm,dtrMatrix-method expm,matrix-method
> ### Keywords: array math methods
> 
> ### ** Examples
> 
> (m1 <- Matrix(c(1,0,1,1), ncol = 2))
2 x 2 Matrix of class "dtrMatrix"
     [,1] [,2]
[1,]    1    1
[2,]    .    1
> (e1 <- expm(m1)) ; e <- exp(1)
2 x 2 Matrix of class "dtrMatrix"
     [,1]     [,2]    
[1,] 2.718282 2.718282
[2,]        . 2.718282
> stopifnot(all.equal(e1@x, c(e,0,e,e), tolerance = 1e-15))
> (m2 <- Matrix(c(-49, -64, 24, 31), ncol = 2))
2 x 2 Matrix of class "dgeMatrix"
     [,1] [,2]
[1,]  -49   24
[2,]  -64   31
> (e2 <- expm(m2))
2 x 2 Matrix of class "dgeMatrix"
           [,1]      [,2]
[1,] -0.7357588 0.5518191
[2,] -1.4715176 1.1036382
> (m3 <- Matrix(cbind(0,rbind(6*diag(3),0))))# sparse!
4 x 4 sparse Matrix of class "dtCMatrix"
            
[1,] . 6 . .
[2,] . . 6 .
[3,] . . . 6
[4,] . . . .
> (e3 <- expm(m3)) # upper triangular
4 x 4 Matrix of class "dtrMatrix"
     [,1] [,2] [,3] [,4]
[1,]    1    6   18   36
[2,]    .    1    6   18
[3,]    .    .    1    6
[4,]    .    .    .    1
> 
> 
> 
> cleanEx()
> nameEx("externalFormats")
> ### * externalFormats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: externalFormats
> ### Title: Read and write external matrix formats
> ### Aliases: readHB readMM writeMM writeMM,CsparseMatrix-method
> ###   writeMM,sparseMatrix-method
> ### Keywords: connection file methods utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> str(pores <- readMM(system.file("external/pores_1.mtx", package = "Matrix")))
Formal class 'dgTMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:180] 0 1 2 3 10 11 0 1 2 3 ...
  ..@ j       : int [1:180] 0 0 0 0 0 0 1 1 1 1 ...
  ..@ Dim     : int [1:2] 30 30
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:180] -9.48e+02 -7.18e+06 4.73 3.57e+04 9.46e+02 ...
  ..@ factors : list()
> str(utm   <- readHB(system.file("external/utm300.rua" , package = "Matrix")))
Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:3155] 0 50 0 1 5 50 51 55 0 2 ...
  ..@ p       : int [1:301] 0 2 8 12 16 19 21 27 31 35 ...
  ..@ Dim     : int [1:2] 300 300
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:3155] -0.7071 0.7071 -0.0844 -0.697 -0.0844 ...
  ..@ factors : list()
> str(lundA <- readMM(system.file("external/lund_a.mtx" , package = "Matrix")))
Formal class 'dsTMatrix' [package "Matrix"] with 7 slots
  ..@ i       : int [1:1298] 0 1 7 8 9 10 1 2 8 9 ...
  ..@ j       : int [1:1298] 0 0 0 0 0 0 1 1 1 1 ...
  ..@ Dim     : int [1:2] 147 147
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:1298] 75000000 961539 -12179486 -2617521 28846144 ...
  ..@ uplo    : chr "L"
  ..@ factors : list()
> str(lundA <- readHB(system.file("external/lund_a.rsa" , package = "Matrix")))
Formal class 'dsCMatrix' [package "Matrix"] with 7 slots
  ..@ i       : int [1:1298] 0 1 7 8 9 10 1 2 8 9 ...
  ..@ p       : int [1:148] 0 6 14 22 30 38 46 52 57 67 ...
  ..@ Dim     : int [1:2] 147 147
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:1298] 75000000 961539 -12179486 -2617521 28846144 ...
  ..@ uplo    : chr "L"
  ..@ factors : list()
> ## https://math.nist.gov/MatrixMarket/data/Harwell-Boeing/counterx/counterx.htm
> str(jgl   <- readMM(system.file("external/jgl009.mtx" , package = "Matrix")))
Formal class 'ngTMatrix' [package "Matrix"] with 5 slots
  ..@ i       : int [1:50] 0 1 3 4 5 6 7 8 1 2 ...
  ..@ j       : int [1:50] 0 0 0 0 0 0 0 0 1 1 ...
  ..@ Dim     : int [1:2] 9 9
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ factors : list()
> 
> ## NOTE: The following examples take quite some time
> ## ----  even on a fast internet connection:
> if(FALSE) {
+ ## The URL has been corrected, but we need an untar step:
+ u. <- url("https://www.cise.ufl.edu/research/sparse/RB/Boeing/msc00726.tar.gz")
+ str(sm <- readHB(gzcon(u.)))
+ }
> 
> data(KNex, package = "Matrix")
> ## Store as MatrixMarket (".mtx") file, here inside temporary dir./folder:
> (MMfile <- file.path(tempdir(), "mmMM.mtx"))
[1] "/tmp/RtmpRZi6J1/mmMM.mtx"
> writeMM(KNex$mm, file=MMfile)
NULL
> file.info(MMfile)[,c("size", "ctime")] # (some confirmation of the file's)
                           size               ctime
/tmp/RtmpRZi6J1/mmMM.mtx 179265 2024-05-03 16:22:40
> 
> ## very simple export - in triplet format - to text file:
> data(CAex, package = "Matrix")
> s.CA <- summary(CAex)
> s.CA # shows  (i, j, x)  [columns of a data frame]
72 x 72 sparse Matrix of class "dgCMatrix", with 216 entries
     i  j             x
1    1  1  9.999980e-01
2   25  1 -1.311884e-03
3   49  1 -5.265519e-04
4    2  2  9.999990e-01
5   26  2 -9.034753e-04
6   50  2 -3.812964e-04
7    3  3  9.999991e-01
8   27  3 -8.961401e-04
9   51  3 -3.731561e-04
10   4  4  9.999984e-01
11  28  4 -1.147774e-03
12  52  4 -5.260632e-04
13   5  5  9.999981e-01
14  29  5 -1.207952e-03
15  53  5 -6.318516e-04
16   6  6  9.999978e-01
17  30  6 -1.391858e-03
18  54  6 -5.198773e-04
19   7  7  9.999980e-01
20  31  7 -1.270809e-03
21  55  7 -6.037332e-04
22   8  8  9.999981e-01
23  32  8 -1.238147e-03
24  56  8 -6.384804e-04
25   9  9  9.999983e-01
26  33  9 -1.155710e-03
27  57  9 -5.720348e-04
28  10 10  9.999986e-01
29  34 10 -1.064001e-03
30  58 10 -5.441404e-04
31  11 11  9.999991e-01
32  35 11 -8.293441e-04
33  59 11 -4.185556e-04
34  12 12  9.999994e-01
35  36 12 -6.887925e-04
36  60 12 -2.979323e-04
37  13 13  9.999992e-01
38  37 13 -7.860880e-04
39  61 13 -4.467988e-04
40  14 14  9.999980e-01
41  38 14 -1.252142e-03
42  62 14 -6.295083e-04
43  15 15  9.999955e-01
44  39 15 -1.917600e-03
45  63 15 -9.281638e-04
46  16 16  9.999905e-01
47  40 16 -2.825865e-03
48  64 16 -1.230082e-03
49  17 17  9.999852e-01
50  41 17 -3.493069e-03
51  65 17 -1.602529e-03
52  18 18  9.999802e-01
53  42 18 -3.930709e-03
54  66 18 -2.073992e-03
55  19 19  9.992581e-01
56  43 19 -2.126081e-02
57  67 19  1.700865e-02
58  20 20  9.997528e-01
59  44 20 -1.511505e-02
60  68 20 -4.318587e-03
61  21 21  9.985212e-01
62  45 21 -3.319184e-02
63  69 21  1.936191e-02
64  22 22  9.739877e-01
65  46 22  7.730061e-02
66  70 22 -1.391411e-01
67  23 23  9.979232e-01
68  47 23 -3.219107e-02
69  71 23  3.219107e-02
70  24 24  9.999478e-01
71  48 24 -2.594571e-03
72  72 24 -6.745885e-03
73   1 25 -1.311884e-03
74  25 25  1.387484e-01
75  49 25 -3.456813e-01
76   2 26 -9.034753e-04
77  26 26  1.511850e-01
78  50 26 -3.582279e-01
79   3 27 -8.961401e-04
80  27 27  1.477708e-01
81  51 27 -3.548715e-01
82   4 28 -1.147774e-03
83  28 28  1.736025e-01
84  52 28 -3.787655e-01
85   5 29 -1.207952e-03
86  29 29  2.148314e-01
87  53 29 -4.107036e-01
88   6 30 -1.391858e-03
89  30 30  1.224333e-01
90  54 30 -3.277826e-01
91   7 31 -1.270809e-03
92  31 31  1.841406e-01
93  55 31 -3.875967e-01
94   8 32 -1.238147e-03
95  32 32  2.100620e-01
96  56 32 -4.073505e-01
97   9 33 -1.155710e-03
98  33 33  1.967816e-01
99  57 33 -3.975642e-01
100 10 34 -1.064001e-03
101 34 34  2.073189e-01
102 58 34 -4.053846e-01
103 11 35 -8.293441e-04
104 35 35  2.030003e-01
105 59 35 -4.022319e-01
106 12 36 -6.887925e-04
107 36 36  1.576068e-01
108 60 36 -3.643712e-01
109 13 37 -7.860880e-04
110 37 37  2.441764e-01
111 61 37 -4.295971e-01
112 14 38 -1.252142e-03
113 38 38  2.017594e-01
114 62 38 -4.013116e-01
115 15 39 -1.917600e-03
116 39 39  1.898140e-01
117 63 39 -3.921492e-01
118 16 40 -2.825865e-03
119 40 40  1.593052e-01
120 64 40 -3.659495e-01
121 17 41 -3.493069e-03
122 41 41  1.738891e-01
123 65 41 -3.789980e-01
124 18 42 -3.930709e-03
125 42 42  2.177889e-01
126 66 42 -4.127244e-01
127 19 43 -2.126081e-02
128 43 43  4.523577e-04
129 67 43 -3.618862e-04
130 20 44 -1.511505e-02
131 44 44  2.285213e-04
132 68 44  6.529181e-05
133 21 45 -3.319184e-02
134 45 45  1.103330e-03
135 69 45 -6.436091e-04
136 22 46  7.730061e-02
137 46 46  6.134969e-03
138 70 46 -1.104294e-02
139 23 47 -3.219107e-02
140 47 47  1.038422e-03
141 71 47 -1.038422e-03
142 24 48 -2.594571e-03
143 48 48  6.732152e-06
144 72 48  1.750359e-05
145  1 49 -5.265519e-04
146 25 49 -3.456813e-01
147 49 49  8.612536e-01
148  2 50 -3.812964e-04
149 26 50 -3.582279e-01
150 50 50  8.488160e-01
151  3 51 -3.731561e-04
152 27 51 -3.548715e-01
153 51 51  8.522302e-01
154  4 52 -5.260632e-04
155 28 52 -3.787655e-01
156 52 52  8.263991e-01
157  5 53 -6.318516e-04
158 29 53 -4.107036e-01
159 53 53  7.851704e-01
160  6 54 -5.198773e-04
161 30 54 -3.277826e-01
162 54 54  8.775689e-01
163  7 55 -6.037332e-04
164 31 55 -3.875967e-01
165 55 55  8.158614e-01
166  8 56 -6.384804e-04
167 32 56 -4.073505e-01
168 56 56  7.899400e-01
169  9 57 -5.720348e-04
170 33 57 -3.975642e-01
171 57 57  8.032200e-01
172 10 58 -5.441404e-04
173 34 58 -4.053846e-01
174 58 58  7.926825e-01
175 11 59 -4.185556e-04
176 35 59 -4.022319e-01
177 59 59  7.970006e-01
178 12 60 -2.979323e-04
179 36 60 -3.643712e-01
180 60 60  8.423938e-01
181 13 61 -4.467988e-04
182 37 61 -4.295971e-01
183 61 61  7.558244e-01
184 14 62 -6.295083e-04
185 38 62 -4.013116e-01
186 62 62  7.982426e-01
187 15 63 -9.281638e-04
188 39 63 -3.921492e-01
189 63 63  8.101905e-01
190 16 64 -1.230082e-03
191 40 64 -3.659495e-01
192 64 64  8.407043e-01
193 17 65 -1.602529e-03
194 41 65 -3.789980e-01
195 65 65  8.261256e-01
196 18 66 -2.073992e-03
197 42 66 -4.127244e-01
198 66 66  7.822308e-01
199 19 67  1.700865e-02
200 43 67 -3.618862e-04
201 67 67  2.895089e-04
202 20 68 -4.318587e-03
203 44 68  6.529181e-05
204 68 68  1.865480e-05
205 21 69  1.936191e-02
206 45 69 -6.436091e-04
207 69 69  3.754387e-04
208 22 70 -1.391411e-01
209 46 70 -1.104294e-02
210 70 70  1.987730e-02
211 23 71  3.219107e-02
212 47 71 -1.038422e-03
213 71 71  1.038422e-03
214 24 72 -6.745885e-03
215 48 72  1.750359e-05
216 72 72  4.550935e-05
> message("writing to ", outf <- tempfile())
writing to /tmp/RtmpRZi6J1/file36473edf9bf3
> write.table(s.CA, file = outf, row.names=FALSE)
> ## and read it back -- showing off  sparseMatrix():
> str(dd <- read.table(outf, header=TRUE))
'data.frame':	216 obs. of  3 variables:
 $ i: int  1 25 49 2 26 50 3 27 51 4 ...
 $ j: int  1 1 1 2 2 2 3 3 3 4 ...
 $ x: num  0.999998 -0.001312 -0.000527 0.999999 -0.000903 ...
> ## has columns (i, j, x) -> we can use via do.call() as arguments to sparseMatrix():
> mm <- do.call(sparseMatrix, dd)
> stopifnot(all.equal(mm, CAex, tolerance=1e-15))
> 
> 
> 
> cleanEx()
> nameEx("facmul")
> ### * facmul
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: facmul-methods
> ### Title: Multiplication by Factors from Matrix Factorizations
> ### Aliases: facmul facmul-methods
> ### Keywords: arith array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> ## Conceptually, methods for 'facmul' _would_ behave as follows ...
> ## Not run: 
> ##D n <- 3L
> ##D x <- lu(Matrix(rnorm(n * n), n, n))
> ##D y <- rnorm(n)
> ##D L <- unname(expand2(x)[[nm <- "L"]])
> ##D stopifnot(exprs = {
> ##D     all.equal(facmul(x, nm, y, trans = FALSE, left =  TRUE), L %*% y)
> ##D     all.equal(facmul(x, nm, y, trans = FALSE, left = FALSE), y %*% L)
> ##D     all.equal(facmul(x, nm, y, trans =  TRUE, left =  TRUE),  crossprod(L, y))
> ##D     all.equal(facmul(x, nm, y, trans =  TRUE, left = FALSE), tcrossprod(y, L))
> ##D })
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("fastMisc")
> ### * fastMisc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fastMisc
> ### Title: "Low Level" Coercions and Methods
> ### Aliases: fastMisc .M2kind .M2gen .M2sym .M2tri .M2diag .M2v .M2m
> ###   .M2unpacked .M2packed .M2C .M2R .M2T .M2V .m2V .sparse2dense
> ###   .diag2dense .ind2dense .m2dense .dense2sparse .diag2sparse
> ###   .ind2sparse .m2sparse .tCRT .CR2RC .CR2T .T2CR .dense2g .dense2kind
> ###   .dense2m .dense2v .sparse2g .sparse2kind .sparse2m .sparse2v .tCR2RC
> ###   .diag.dsC .solve.dgC.lu .solve.dgC.qr .solve.dgC.chol
> ###   .updateCHMfactor
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> D. <- diag(x = c(1, 1, 2, 3, 5, 8))
> D.0 <- Diagonal(x = c(0, 0, 0, 3, 5, 8))
> S. <- toeplitz(as.double(1:6))
> C. <- new("dgCMatrix", Dim = c(3L, 4L),
+           p = c(0L, 1L, 1L, 1L, 3L), i = c(1L, 0L, 2L), x = c(-8, 2, 3))
> 
> stopifnot(exprs = {
+     identical(.M2tri (D.), as(D., "triangularMatrix"))
+     identical(.M2sym (D.), as(D.,  "symmetricMatrix"))
+     identical(.M2diag(D.), as(D.,   "diagonalMatrix"))
+     identical(.M2kind(C., "l"),
+               as(C., "lMatrix"))
+     identical(.M2kind(.sparse2dense(C.), "l"),
+               as(as(C., "denseMatrix"), "lMatrix"))
+     identical(.diag2sparse(D.0, ".", "t", "C"),
+               .dense2sparse(.diag2dense(D.0, ".", "t", TRUE), "C"))
+     identical(.M2gen(.diag2dense(D.0, ".", "s", FALSE)),
+               .sparse2dense(.M2gen(.diag2sparse(D.0, ".", "s", "T"))))
+     identical(S.,
+               .M2m(.m2sparse(S., ".sR")))
+     identical(S. * lower.tri(S.) + diag(1, 6L),
+               .M2m(.m2dense (S., ".tr", "L", "U")))
+     identical(.M2R(C.), .M2R(.M2T(C.)))
+     identical(.tCRT(C.), .M2R(t(C.)))
+ })
> 
> A <- tcrossprod(C.)/6 + Diagonal(3, 1/3); A[1,2] <- 3; A
3 x 3 sparse Matrix of class "dgCMatrix"
                  
[1,] 1  3 1.000000
[2,] . 11 .       
[3,] 1  . 1.833333
> stopifnot(exprs = {
+     is.numeric( x. <- c(2.2, 0, -1.2) )
+     all.equal(x., .solve.dgC.lu(A, c(1,0,0), check=FALSE))
+     all.equal(x., .solve.dgC.qr(A, c(1,0,0), check=FALSE))
+ })
> 
> ## Solving sparse least squares:
> 
> X <- rbind(A, Diagonal(3)) # design matrix X (for L.S.)
> Xt <- t(X)                 # *transposed*  X (for L.S.)
> (y <- drop(crossprod(Xt, 1:3)) + c(-1,1)/1000) # small rand.err.
[1]  9.999 22.001  6.499  1.001  1.999  3.001
> str(solveCh <- .solve.dgC.chol(Xt, y, check=FALSE)) # Xt *is* dgC..
List of 4
 $ L    :Formal class 'dCHMsimpl' [package "Matrix"] with 11 slots
  .. ..@ x       : num [1:6] 3 1 0.9444 128 0.0013 ...
  .. ..@ p       : int [1:4] 0 3 5 6
  .. ..@ i       : int [1:6] 0 1 2 1 2 2
  .. ..@ nz      : int [1:3] 3 2 1
  .. ..@ nxt     : int [1:5] 1 2 3 -1 0
  .. ..@ prv     : int [1:5] 4 0 1 2 -1
  .. ..@ type    : int [1:6] 2 0 0 1 0 0
  .. ..@ colcount: int [1:3] 3 2 1
  .. ..@ perm    : int [1:3] 0 1 2
  .. ..@ Dim     : int [1:2] 3 3
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
 $ coef : num [1:3] 1 2 3
 $ Xty  : num [1:3] 17.5 274 24.9
 $ resid: num [1:6] -0.000774 0.000308 -0.000306 0.00108 -0.001063 ...
> stopifnot(exprs = {
+     all.equal(solveCh$coef, 1:3, tol = 1e-3)# rel.err ~ 1e-4
+     all.equal(solveCh$coef, drop(solve(tcrossprod(Xt), Xt %*% y)))
+     all.equal(solveCh$coef, .solve.dgC.qr(X, y, check=FALSE))
+ })
> 
> 
> 
> cleanEx()
> nameEx("forceSymmetric")
> ### * forceSymmetric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forceSymmetric-methods
> ### Title: Force a Matrix to 'symmetricMatrix' Without Symmetry Checks
> ### Aliases: forceSymmetric forceSymmetric-methods
> ###   forceSymmetric,CsparseMatrix,character-method
> ###   forceSymmetric,CsparseMatrix,missing-method
> ###   forceSymmetric,RsparseMatrix,character-method
> ###   forceSymmetric,RsparseMatrix,missing-method
> ###   forceSymmetric,TsparseMatrix,character-method
> ###   forceSymmetric,TsparseMatrix,missing-method
> ###   forceSymmetric,denseMatrix,character-method
> ###   forceSymmetric,denseMatrix,missing-method
> ###   forceSymmetric,diagonalMatrix,character-method
> ###   forceSymmetric,diagonalMatrix,missing-method
> ###   forceSymmetric,indMatrix,character-method
> ###   forceSymmetric,indMatrix,missing-method
> ###   forceSymmetric,matrix,character-method
> ###   forceSymmetric,matrix,missing-method
> ### Keywords: array methods
> 
> ### ** Examples
> 
>  ## Hilbert matrix
>  i <- 1:6
>  h6 <- 1/outer(i - 1L, i, "+")
>  sd <- sqrt(diag(h6))
>  hh <- t(h6/sd)/sd # theoretically symmetric
>  isSymmetric(hh, tol=0) # FALSE; hence
[1] FALSE
>  try( as(hh, "symmetricMatrix") ) # fails, but this works fine:
6 x 6 Matrix of class "dsyMatrix"
          [,1]      [,2]      [,3]      [,4]      [,5]      [,6]
[1,] 1.0000000 0.8660254 0.7453560 0.6614378 0.6000000 0.5527708
[2,] 0.8660254 1.0000000 0.9682458 0.9165151 0.8660254 0.8206518
[3,] 0.7453560 0.9682458 1.0000000 0.9860133 0.9583148 0.9270248
[4,] 0.6614378 0.9165151 0.9860133 1.0000000 0.9921567 0.9749960
[5,] 0.6000000 0.8660254 0.9583148 0.9921567 1.0000000 0.9949874
[6,] 0.5527708 0.8206518 0.9270248 0.9749960 0.9949874 1.0000000
>  H6 <- forceSymmetric(hh)
> 
>  ## result can be pretty surprising:
>  (M <- Matrix(1:36, 6))
6 x 6 Matrix of class "dgeMatrix"
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    7   13   19   25   31
[2,]    2    8   14   20   26   32
[3,]    3    9   15   21   27   33
[4,]    4   10   16   22   28   34
[5,]    5   11   17   23   29   35
[6,]    6   12   18   24   30   36
>  forceSymmetric(M) # symmetric, hence very different in lower triangle
6 x 6 Matrix of class "dsyMatrix"
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    7   13   19   25   31
[2,]    7    8   14   20   26   32
[3,]   13   14   15   21   27   33
[4,]   19   20   21   22   28   34
[5,]   25   26   27   28   29   35
[6,]   31   32   33   34   35   36
>  (tm <- tril(M))
6 x 6 Matrix of class "dtrMatrix"
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    .    .    .    .    .
[2,]    2    8    .    .    .    .
[3,]    3    9   15    .    .    .
[4,]    4   10   16   22    .    .
[5,]    5   11   17   23   29    .
[6,]    6   12   18   24   30   36
>  forceSymmetric(tm)
6 x 6 Matrix of class "dsyMatrix"
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    2    3    4    5    6
[2,]    2    8    9   10   11   12
[3,]    3    9   15   16   17   18
[4,]    4   10   16   22   23   24
[5,]    5   11   17   23   29   30
[6,]    6   12   18   24   30   36
> 
> 
> 
> cleanEx()
> nameEx("formatSparseM")
> ### * formatSparseM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formatSparseM
> ### Title: Formatting Sparse Numeric Matrices Utilities
> ### Aliases: formatSparseM .formatSparseSimple
> ### Keywords: character print utilities
> 
> ### ** Examples
> 
> m <- suppressWarnings(matrix(c(0, 3.2, 0,0, 11,0,0,0,0,-7,0), 4,9))
> fm <- formatSparseM(m)
> noquote(fm)
                                    
[1,] .   11 .   3.2 . -7.0 .  .  .  
[2,] 3.2 .  -7 .    . .    .  .  .  
[3,] .   .  .  .    . .    11 .  3.2
[4,] .   .  .  11.0 .  3.2 .  -7 .  
> ## nice, but this is nicer {with "units" vertically aligned}:
> print(fm, quote=FALSE, right=TRUE)
                                    
[1,] .   11  .  3.2 . -7.0  .  . .  
[2,] 3.2  . -7  .   .  .    .  . .  
[3,] .    .  .  .   .  .   11  . 3.2
[4,] .    .  . 11.0 .  3.2  . -7 .  
> ## and "the same" as :
> Matrix(m)
4 x 9 sparse Matrix of class "dgCMatrix"
                                    
[1,] .   11  .  3.2 . -7.0  .  . .  
[2,] 3.2  . -7  .   .  .    .  . .  
[3,] .    .  .  .   .  .   11  . 3.2
[4,] .    .  . 11.0 .  3.2  . -7 .  
> 
> ## align = "right" is cheaper -->  the "." are not aligned:
> noquote(f2 <- formatSparseM(m,align="r"))
                                    
[1,] .   11 .   3.2 . -7.0 .  .  .  
[2,] 3.2 .  -7 .    . .    .  .  .  
[3,] .   .  .  .    . .    11 .  3.2
[4,] .   .  .  11.0 .  3.2 .  -7 .  
> stopifnot(f2 == fm   |   m == 0, dim(f2) == dim(m),
+          (f2 == ".") == (m == 0))
> 
> 
> 
> cleanEx()
> nameEx("graph2T")
> ### * graph2T
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coerce-methods-graph
> ### Title: Conversions "graph" <-> (sparse) Matrix
> ### Aliases: coerce-methods-graph coerce,Matrix,graph-method
> ###   coerce,Matrix,graphNEL-method coerce,TsparseMatrix,graphNEL-method
> ###   coerce,graph,CsparseMatrix-method coerce,graph,Matrix-method
> ###   coerce,graph,RsparseMatrix-method coerce,graph,TsparseMatrix-method
> ###   coerce,graph,sparseMatrix-method coerce,graphAM,TsparseMatrix-method
> ###   coerce,graphNEL,TsparseMatrix-method T2graph graph2T
> ### Keywords: methods utilities
> 
> ### ** Examples
> 
> if(requireNamespace("graph")) {
+   n4 <- LETTERS[1:4]; dns <- list(n4,n4)
+   show(a1 <- sparseMatrix(i= c(1:4),   j=c(2:4,1),   x = 2,    dimnames=dns))
+   show(g1 <- as(a1, "graph")) # directed
+   unlist(graph::edgeWeights(g1)) # all '2'
+ 
+   show(a2 <- sparseMatrix(i= c(1:4,4), j=c(2:4,1:2), x = TRUE, dimnames=dns))
+   show(g2 <- as(a2, "graph")) # directed
+   # now if you want it undirected:
+   show(g3  <- T2graph(as(a2,"TsparseMatrix"), edgemode="undirected"))
+   show(m3 <- as(g3,"Matrix"))
+   show( graph2T(g3) ) # a "pattern Matrix" (nsTMatrix)
+ ## Don't show: 
+   stopifnot(
+    identical(as(g3,"Matrix"), as(as(a2 + t(a2), "nMatrix"),"symmetricMatrix"))
+   ,
+    identical(tg3 <- graph2T(g3), graph2T(g3, use.weights=FALSE))
+   ,
+    identical(as(m3,"TsparseMatrix"), asUniqueT(tg3))
+   )
+ ## End(Don't show)
+   a. <- sparseMatrix(i=4:1, j=1:4, dimnames=list(n4, n4), repr="T") # no 'x'
+   show(a.) # "ngTMatrix"
+   show(g. <- as(a., "graph"))
+ ## Don't show: 
+   stopifnot(graph::edgemode(g.) == "undirected",
+             graph::numEdges(g.) == 2,
+             all.equal(as(g., "TsparseMatrix"),
+                       as(a., "symmetricMatrix"))
+ )
+ ## End(Don't show)
+ }
Loading required namespace: graph
Failed with error:  ‘there is no package called ‘graph’’
> 
> 
> 
> cleanEx()
> nameEx("image-methods")
> ### * image-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: image-methods
> ### Title: Methods for image() in Package 'Matrix'
> ### Aliases: image image-methods image,ANY-method image,CHMfactor-method
> ###   image,Matrix-method image,dgTMatrix-method
> ### Keywords: hplot methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(grDevices, pos = "package:base", verbose = FALSE)
> library(    utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showMethods(image)
Function: image (package graphics)
x="ANY"
x="CHMfactor"
x="Matrix"
x="dgCMatrix"
    (inherited from: x="Matrix")
x="dgTMatrix"
x="dtCMatrix"
    (inherited from: x="Matrix")

> ## And if you want to see the method definitions:
> showMethods(image, includeDefs = TRUE, inherited = FALSE)
Function: image (package graphics)
x="ANY"
function (x, ...) 
UseMethod("image")


x="CHMfactor"
function (x, ...) 
image(.M2gen(.M2T(expand1(x, "L"))), ...)


x="Matrix"
function (x, ...) 
{
    if (.M.kind(x) == "z") 
        stop(gettextf("%s(<%s>) is not yet implemented", "image", 
            "zMatrix"), domain = NA)
    image(.M2kind(.M2gen(.M2T(x)), "d"), ...)
}


x="dgTMatrix"
function (x, ...) 
{
    .local <- function (x, xlim = c(1, di[2L]), ylim = c(di[1L], 
        1), aspect = "iso", sub = sprintf("Dimensions: %d x %d", 
        di[1L], di[2L]), xlab = "Column", ylab = "Row", cuts = 15, 
        useRaster = FALSE, useAbs = NULL, colorkey = !useAbs, 
        col.regions = NULL, lwd = NULL, border.col = NULL, ...) 
    {
        di <- x@Dim
        xx <- x@x
        empty.x <- length(xx) == 0L && length(x) > 0L
        if (empty.x) {
            xx <- 0
            x@i <- x@j <- 0L
        }
        if (missing(useAbs)) 
            useAbs <- if (empty.x) 
                FALSE
            else min(xx, na.rm = TRUE) >= 0
        else if (useAbs) 
            xx <- abs(xx)
        if (is.null(col.regions)) {
            l.col <- empty.x || diff(rx <- range(xx, finite = TRUE)) == 
                0
            col.regions <- if (useAbs) {
                grey(if (l.col) 
                  0.9
                else seq(from = 0.7, to = 0, length.out = 100L))
            }
            else if (l.col) 
                "gray90"
            else {
                nn <- 100
                n0 <- min(nn, max(0, round((0 - rx[1L])/(rx[2L] - 
                  rx[1L]) * nn)))
                col.regions <- c(colorRampPalette(c("blue3", 
                  "gray80"))(n0), colorRampPalette(c("gray75", 
                  "red3"))(nn - n0))
            }
        }
        if (!is.null(lwd) && !(is.numeric(lwd) && all(lwd >= 
            0))) 
            stop("'lwd' must be NULL or non-negative numeric")
        stopifnot(length(xlim) == 2L, length(ylim) == 2L)
        ylim <- sort(ylim, decreasing = TRUE)
        if (all(xlim == round(xlim))) 
            xlim <- xlim + c(-0.5, +0.5)
        if (all(ylim == round(ylim))) 
            ylim <- ylim + c(+0.5, -0.5)
        panel <- if (useRaster) 
            panel.levelplot.raster
        else {
            function(x, y, z, subscripts, at, ..., col.regions) {
                x <- as.numeric(x[subscripts])
                y <- as.numeric(y[subscripts])
                numcol <- length(at) - 1L
                num.r <- length(col.regions)
                col.regions <- if (num.r <= numcol) 
                  rep_len(col.regions, numcol)
                else col.regions[1 + ((1:numcol - 1) * (num.r - 
                  1))%/%(numcol - 1)]
                zcol <- rep.int(NA_integer_, length(z))
                for (i in seq_along(col.regions)) zcol[!is.na(x) & 
                  !is.na(y) & !is.na(z) & at[i] <= z & z < at[i + 
                  1L]] <- i
                zcol <- zcol[subscripts]
                if (any(subscripts)) {
                  if (is.null(lwd)) {
                    wh <- current.viewport()[c("width", "height")]
                    wh <- (par("cra")/par("cin")) * c(convertWidth(wh$width, 
                      "inches", valueOnly = TRUE), convertHeight(wh$height, 
                      "inches", valueOnly = TRUE))
                    pSize <- wh/di
                    pA <- prod(pSize)
                    p1 <- min(pSize)
                    lwd <- if (p1 < 2 || pA < 6) 
                      0.01
                    else if (p1 >= 4) 
                      1
                    else if (p1 > 3) 
                      0.5
                    else 0.2
                    Matrix.message("rectangle size ", paste(round(pSize, 
                      1L), collapse = " x "), " [pixels];  --> lwd :", 
                      formatC(lwd))
                  }
                  else stopifnot(is.numeric(lwd), all(lwd >= 
                    0))
                  if (is.null(border.col) && lwd < 0.01) 
                    border.col <- NA
                  grid.rect(x = x, y = y, width = 1, height = 1, 
                    default.units = "native", gp = gpar(fill = col.regions[zcol], 
                      lwd = lwd, col = border.col))
                }
            }
        }
        levelplot(xx ~ (x@j + 1L) * (x@i + 1L), sub = sub, xlab = xlab, 
            ylab = ylab, xlim = xlim, ylim = ylim, aspect = aspect, 
            colorkey = colorkey, col.regions = col.regions, cuts = cuts, 
            par.settings = list(background = list(col = "transparent")), 
            panel = panel, ...)
    }
    .local(x, ...)
}



> ## Don't show: 
>  
> op <- options(warn = 2)
> ## End(Don't show)
> data(CAex, package = "Matrix")
> image(CAex, main = "image(CAex)") -> imgC; imgC
> stopifnot(!is.null(leg <- imgC$legend), is.list(leg$right)) # failed for 2 days ..
> image(CAex, useAbs=TRUE, main = "image(CAex, useAbs=TRUE)")
> 
> cCA <- Cholesky(crossprod(CAex), Imult = .01)
> ## See  ?print.trellis --- place two image() plots side by side:
> print(image(cCA, main="Cholesky(crossprod(CAex), Imult = .01)"),
+       split=c(x=1,y=1,nx=2, ny=1), more=TRUE)
> print(image(cCA, useAbs=TRUE),
+       split=c(x=2,y=1,nx=2,ny=1))
> 
> data(USCounties, package = "Matrix")
> image(USCounties)# huge
> image(sign(USCounties))## just the pattern
>     # how the result looks, may depend heavily on
>     # the device, screen resolution, antialiasing etc
>     # e.g. x11(type="Xlib") may show very differently than cairo-based
> 
> ## Drawing borders around each rectangle;
>     # again, viewing depends very much on the device:
> image(USCounties[1:400,1:200], lwd=.1)
> ## Using (xlim,ylim) has advantage : matrix dimension and (col/row) indices:
> image(USCounties, c(1,200), c(1,400), lwd=.1)
> image(USCounties, c(1,300), c(1,200), lwd=.5 )
> image(USCounties, c(1,300), c(1,200), lwd=.01)
> ## These 3 are all equivalent :
> (I1 <- image(USCounties, c(1,100), c(1,100), useAbs=FALSE))
>  I2 <- image(USCounties, c(1,100), c(1,100), useAbs=FALSE,        border.col=NA)
>  I3 <- image(USCounties, c(1,100), c(1,100), useAbs=FALSE, lwd=2, border.col=NA)
> stopifnot(all.equal(I1, I2, check.environment=FALSE),
+           all.equal(I2, I3, check.environment=FALSE))
> ## using an opaque border color
> image(USCounties, c(1,100), c(1,100), useAbs=FALSE, lwd=3, border.col = adjustcolor("skyblue", 1/2))
> ## Don't show: 
> options(op)
> ## End(Don't show)
> if(interactive() || nzchar(Sys.getenv("R_MATRIX_CHECK_EXTRA"))) {
+ ## Using raster graphics: For PDF this would give a 77 MB file,
+ ## however, for such a large matrix, this is typically considerably
+ ## *slower* (than vector graphics rectangles) in most cases :
+ if(doPNG <- !dev.interactive())
+    png("image-USCounties-raster.png", width=3200, height=3200)
+ image(USCounties, useRaster = TRUE) # should not suffer from anti-aliasing
+ if(doPNG)
+    dev.off()
+    ## and now look at the *.png image in a viewer you can easily zoom in and out
+ }#only if(doExtras)
> 
> 
> 
> cleanEx()
> nameEx("indMatrix-class")
> ### * indMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: indMatrix-class
> ### Title: Index Matrices
> ### Aliases: indMatrix-class !,indMatrix-method -,indMatrix,missing-method
> ###   Math,indMatrix-method Summary,indMatrix-method
> ###   coerce,indMatrix,pMatrix-method coerce,list,indMatrix-method
> ###   coerce,matrix,indMatrix-method coerce,numeric,indMatrix-method
> ###   determinant,indMatrix,logical-method diag,indMatrix-method
> ###   diag<-,indMatrix-method log,indMatrix-method t,indMatrix-method
> ###   which,indMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> p1 <- as(c(2,3,1), "pMatrix")
> (sm1 <- as(rep(c(2,3,1), e=3), "indMatrix"))
9 x 3 sparse Matrix of class "indMatrix"
           
 [1,] . | .
 [2,] . | .
 [3,] . | .
 [4,] . . |
 [5,] . . |
 [6,] . . |
 [7,] | . .
 [8,] | . .
 [9,] | . .
> stopifnot(all(sm1 == p1[rep(1:3, each=3),]))
> 
> ## row-indexing of a <pMatrix> turns it into an <indMatrix>:
> class(p1[rep(1:3, each=3),])
[1] "indMatrix"
attr(,"package")
[1] "Matrix"
> 
> set.seed(12) # so we know '10' is in sample
> ## random index matrix for 30 observations and 10 unique values:
> (s10 <- as(sample(10, 30, replace=TRUE),"indMatrix"))
30 x 10 sparse Matrix of class "indMatrix"
                         
 [1,] . | . . . . . . . .
 [2,] . . . . . . . . . |
 [3,] . . . . . . | . . .
 [4,] . . . . | . . . . .
 [5,] . . . . | . . . . .
 [6,] . | . . . . . . . .
 [7,] . . . . . . . | . .
 [8,] . | . . . . . . . .
 [9,] . | . . . . . . . .
[10,] . . . . . . . . | .
[11,] . . . . . | . . . .
[12,] . . . . . . . . . |
[13,] . . . . . . . . . |
[14,] . . . . . . | . . .
[15,] . . . . . . . | . .
[16,] . . . | . . . . . .
[17,] . . . . . . . | . .
[18,] . . . . . . . . | .
[19,] . . . . . . . | . .
[20,] . . . . . . . . . |
[21,] . . . . . . | . . .
[22,] . . . . | . . . . .
[23,] . . . . . . . . | .
[24,] . | . . . . . . . .
[25,] . . . . . . | . . .
[26,] . . . . . . | . . .
[27,] . . . . . . . . . |
[28,] . . . | . . . . . .
[29,] . . . | . . . . . .
[30,] . . | . . . . . . .
> 
> ## Sample rows of a numeric matrix :
> (mm <- matrix(1:10, nrow=10, ncol=3))
      [,1] [,2] [,3]
 [1,]    1    1    1
 [2,]    2    2    2
 [3,]    3    3    3
 [4,]    4    4    4
 [5,]    5    5    5
 [6,]    6    6    6
 [7,]    7    7    7
 [8,]    8    8    8
 [9,]    9    9    9
[10,]   10   10   10
> s10 %*% mm
30 x 3 Matrix of class "dgeMatrix"
      [,1] [,2] [,3]
 [1,]    2    2    2
 [2,]   10   10   10
 [3,]    7    7    7
 [4,]    5    5    5
 [5,]    5    5    5
 [6,]    2    2    2
 [7,]    8    8    8
 [8,]    2    2    2
 [9,]    2    2    2
[10,]    9    9    9
[11,]    6    6    6
[12,]   10   10   10
[13,]   10   10   10
[14,]    7    7    7
[15,]    8    8    8
[16,]    4    4    4
[17,]    8    8    8
[18,]    9    9    9
[19,]    8    8    8
[20,]   10   10   10
[21,]    7    7    7
[22,]    5    5    5
[23,]    9    9    9
[24,]    2    2    2
[25,]    7    7    7
[26,]    7    7    7
[27,]   10   10   10
[28,]    4    4    4
[29,]    4    4    4
[30,]    3    3    3
> 
> set.seed(27)
> IM1 <- as(sample(1:20, 100, replace=TRUE), "indMatrix")
> IM2 <- as(sample(1:18, 100, replace=TRUE), "indMatrix")
> (c12 <- crossprod(IM1,IM2))
20 x 18 sparse Matrix of class "dgTMatrix"
                                         
 [1,] . . 2 . . . . 1 1 . . . 1 . . . . 1
 [2,] . . . . . . 1 . 1 . 1 . . . . . 1 .
 [3,] . 1 . 1 1 1 . . . . . . . . 1 1 . 1
 [4,] . . . 1 1 . . . 1 . 1 . . 1 1 1 1 .
 [5,] . 1 1 . 1 . 1 . . . 1 . . . 1 2 . 1
 [6,] . . . 1 . . . . . 1 . . . 1 . . . .
 [7,] . . . . . . . . . 1 . . . . . . . .
 [8,] . . . 1 . 1 1 . 1 . . . . . . . . .
 [9,] . . 1 . 2 1 . 2 2 . . 1 1 . 1 . . 1
[10,] . 1 . . . . . . . . . 1 . . . . . .
[11,] . . . . 2 . . . . . 1 . . 2 . . . .
[12,] . . . 1 . . 1 . . . . . 1 . . . . 1
[13,] . . . . . . . . . . . 1 . 1 . 1 . .
[14,] . 1 . 1 . . . 1 . . . 1 . . . . . .
[15,] . . . . . . 1 . . . . . . . . . 1 .
[16,] . 1 1 . . . . . . . . 1 . . 1 . . .
[17,] . 1 . . . . . . . . . 1 . 1 . . 2 1
[18,] . . . 1 . . . 1 . 1 . . . . 1 1 . .
[19,] 1 1 . . . 1 1 . 1 1 . 1 . 1 . . 1 .
[20,] 1 . . . . . . . . . . . . . . . . 1
> ## same as cross-tabulation of the two index vectors:
> stopifnot(all(c12 - unclass(table(IM1@perm, IM2@perm)) == 0))
> 
> # 3 observations, 4 implied values, first does not occur in sample:
> as(2:4, "indMatrix")
3 x 4 sparse Matrix of class "indMatrix"
            
[1,] . | . .
[2,] . . | .
[3,] . . . |
> # 3 observations, 5 values, first and last do not occur in sample:
> as(list(2:4, 5), "indMatrix")
3 x 5 sparse Matrix of class "indMatrix"
              
[1,] . | . . .
[2,] . . | . .
[3,] . . . | .
> 
> as(sm1, "nMatrix")
9 x 3 sparse Matrix of class "ngRMatrix"
           
 [1,] . | .
 [2,] . | .
 [3,] . | .
 [4,] . . |
 [5,] . . |
 [6,] . . |
 [7,] | . .
 [8,] | . .
 [9,] | . .
> s10[1:7, 1:4] # gives an "ngTMatrix" (most economic!)
7 x 4 sparse Matrix of class "ngCMatrix"
            
[1,] . | . .
[2,] . . . .
[3,] . . . .
[4,] . . . .
[5,] . . . .
[6,] . | . .
[7,] . . . .
> s10[1:4, ]  # preserves "indMatrix"-class
4 x 10 sparse Matrix of class "indMatrix"
                        
[1,] . | . . . . . . . .
[2,] . . . . . . . . . |
[3,] . . . . . . | . . .
[4,] . . . . | . . . . .
> 
> I1 <- as(c(5:1,6:4,7:3), "indMatrix")
> I2 <- as(7:1, "pMatrix")
> (I12 <- rbind(I1, I2))
20 x 7 sparse Matrix of class "indMatrix"
                   
 [1,] . . . . | . .
 [2,] . . . | . . .
 [3,] . . | . . . .
 [4,] . | . . . . .
 [5,] | . . . . . .
 [6,] . . . . . | .
 [7,] . . . . | . .
 [8,] . . . | . . .
 [9,] . . . . . . |
[10,] . . . . . | .
[11,] . . . . | . .
[12,] . . . | . . .
[13,] . . | . . . .
[14,] . . . . . . |
[15,] . . . . . | .
[16,] . . . . | . .
[17,] . . . | . . .
[18,] . . | . . . .
[19,] . | . . . . .
[20,] | . . . . . .
> stopifnot(is(I12, "indMatrix"),
+           identical(I12, rbind(I1, I2)),
+ 	  colSums(I12) == c(2L,2:4,4:2))
> 
> 
> 
> cleanEx()
> nameEx("index-class")
> ### * index-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: index-class
> ### Title: Virtual Class "index" - Simple Class for Matrix Indices
> ### Aliases: index-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("index")
Virtual Class "index" [package "Matrix"]

No Slots, prototype of class "logical"

Known Subclasses: 
Class "logical", directly
Class "numeric", directly
Class "character", directly
Class "integer", by class "numeric", distance 2
Class "double", by class "numeric", distance 2
Class "signature", by class "character", distance 2
Class "className", by class "character", distance 2
Class "ObjectsWithPackage", by class "character", distance 2
Class "factor", by class "numeric", distance 3
Class "ordered", by class "numeric", distance 4
> 
> 
> 
> cleanEx()
> nameEx("invPerm")
> ### * invPerm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: invertPerm
> ### Title: Utilities for Permutation Vectors
> ### Aliases: invertPerm signPerm isPerm asPerm invPerm
> ### Keywords: utilities
> 
> ### ** Examples
> 
> p <- sample(10L) # a random permutation vector
> ip <- invertPerm(p)
> s <- signPerm(p)
> 
> ## 'p' and 'ip' are indeed inverses:
> stopifnot(exprs = {
+     isPerm(p)
+     isPerm(ip)
+     identical(s, 1L) || identical(s, -1L)
+     identical(s, signPerm(ip))
+     identical(p[ip], 1:10)
+     identical(ip[p], 1:10)
+     identical(invertPerm(ip), p)
+ })
> 
> ## Product of transpositions (1 2)(2 1)(4 3)(6 8)(10 1) = (3 4)(6 8)(1 10)
> pivot <- c(2L, 1L, 3L, 3L, 5L, 8L, 7L, 8L, 9L, 1L)
> q <- asPerm(pivot)
> stopifnot(exprs = {
+     identical(q, c(10L, 2L, 4L, 3L, 5L, 8L, 7L, 6L, 9L, 1L))
+     identical(q[q], seq_len(10L)) # because the permutation is odd:
+     signPerm(q) == -1L
+ })
> 
> invPerm # a less general version of 'invertPerm'
function (p, zero.p = FALSE, zero.res = FALSE) 
invertPerm(p, if (zero.p) 0L else 1L, if (zero.res) 0L else 1L)
<bytecode: 0x55da8b74b170>
<environment: namespace:Matrix>
> ## Don't show: 
> stopifnot(exprs = {
+     identical(isPerm(0L), FALSE)
+     identical(signPerm(1:2),  1L)
+     identical(signPerm(2:1), -1L)
+     identical(invertPerm(c(3, 1:2)), c(2:3, 1L)) # 'p' of type "double",
+     tryCatch(invPerm(NA), error = function(e) TRUE) # was a segfault
+ })
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("is.na-methods")
> ### * is.na-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.na-methods
> ### Title: is.na(), is.finite() Methods for 'Matrix' Objects
> ### Aliases: anyNA anyNA-methods is.na is.na-methods is.nan is.nan-methods
> ###   is.infinite is.infinite-methods is.finite is.finite-methods
> ###   anyNA,denseMatrix-method anyNA,diagonalMatrix-method
> ###   anyNA,indMatrix-method anyNA,sparseMatrix-method
> ###   anyNA,sparseVector-method is.na,abIndex-method
> ###   is.na,denseMatrix-method is.na,diagonalMatrix-method
> ###   is.na,indMatrix-method is.na,sparseMatrix-method
> ###   is.na,sparseVector-method is.nan,denseMatrix-method
> ###   is.nan,diagonalMatrix-method is.nan,indMatrix-method
> ###   is.nan,sparseMatrix-method is.nan,sparseVector-method
> ###   is.infinite,abIndex-method is.infinite,denseMatrix-method
> ###   is.infinite,diagonalMatrix-method is.infinite,indMatrix-method
> ###   is.infinite,sparseMatrix-method is.infinite,sparseVector-method
> ###   is.finite,abIndex-method is.finite,denseMatrix-method
> ###   is.finite,diagonalMatrix-method is.finite,indMatrix-method
> ###   is.finite,sparseMatrix-method is.finite,sparseVector-method
> ### Keywords: NA math programming methods
> 
> ### ** Examples
> 
> (M <- Matrix(1:6, nrow = 4, ncol = 3,
+              dimnames = list(letters[1:4], LETTERS[1:3])))
4 x 3 Matrix of class "dgeMatrix"
  A B C
a 1 5 3
b 2 6 4
c 3 1 5
d 4 2 6
> stopifnot(!anyNA(M), !any(is.na(M)))
> 
> M[2:3, 2] <- NA
> (inM <- is.na(M))
4 x 3 Matrix of class "ngeMatrix"
      A     B     C
a FALSE FALSE FALSE
b FALSE  TRUE FALSE
c FALSE  TRUE FALSE
d FALSE FALSE FALSE
> stopifnot(anyNA(M), sum(inM) == 2)
> 
> (A <- spMatrix(nrow = 10, ncol = 20,
+                i = c(1, 3:8), j = c(2, 9, 6:10), x = 7 * (1:7)))
10 x 20 sparse Matrix of class "dgTMatrix"
                                                  
 [1,] . 7 . . .  .  .  .  .  . . . . . . . . . . .
 [2,] . . . . .  .  .  .  .  . . . . . . . . . . .
 [3,] . . . . .  .  .  . 14  . . . . . . . . . . .
 [4,] . . . . . 21  .  .  .  . . . . . . . . . . .
 [5,] . . . . .  . 28  .  .  . . . . . . . . . . .
 [6,] . . . . .  .  . 35  .  . . . . . . . . . . .
 [7,] . . . . .  .  .  . 42  . . . . . . . . . . .
 [8,] . . . . .  .  .  .  . 49 . . . . . . . . . .
 [9,] . . . . .  .  .  .  .  . . . . . . . . . . .
[10,] . . . . .  .  .  .  .  . . . . . . . . . . .
> stopifnot(!anyNA(A), !any(is.na(A)))
> 
> A[2, 3] <- A[1, 2] <- A[5, 5:9] <- NA
> (inA <- is.na(A))
10 x 20 sparse Matrix of class "ngTMatrix"
                                             
 [1,] . | . . . . . . . . . . . . . . . . . .
 [2,] . . | . . . . . . . . . . . . . . . . .
 [3,] . . . . . . . . . . . . . . . . . . . .
 [4,] . . . . . . . . . . . . . . . . . . . .
 [5,] . . . . | | | | | . . . . . . . . . . .
 [6,] . . . . . . . . . . . . . . . . . . . .
 [7,] . . . . . . . . . . . . . . . . . . . .
 [8,] . . . . . . . . . . . . . . . . . . . .
 [9,] . . . . . . . . . . . . . . . . . . . .
[10,] . . . . . . . . . . . . . . . . . . . .
> stopifnot(anyNA(A), sum(inA) == 1 + 1 + 5)
> 
> 
> 
> cleanEx()
> nameEx("is.null.DN")
> ### * is.null.DN
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.null.DN
> ### Title: Are the Dimnames 'dn' NULL-like ?
> ### Aliases: is.null.DN
> ### Keywords: array attribute programming utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> m1 <- m2 <- m3 <- m4 <- m <-
+     matrix(round(100 * rnorm(6)), 2, 3)
> dimnames(m1) <- list(NULL, NULL)
> dimnames(m2) <- list(NULL, character())
> dimnames(m3) <- rev(dimnames(m2))
> dimnames(m4) <- rep(list(character()),2)
> 
> m4 # prints absolutely identically to m
     [,1] [,2] [,3]
[1,]  -63  -84   33
[2,]   18  160  -82
> 
> c.o <- capture.output
> cm <- c.o(m)
> stopifnot(exprs = {
+     m == m1; m == m2; m == m3; m == m4
+ 	identical(cm, c.o(m1));	identical(cm, c.o(m2))
+ 	identical(cm, c.o(m3)); identical(cm, c.o(m4))
+ })
> 
> hasNoDimnames <- function(.) is.null.DN(dimnames(.))
> stopifnot(exprs = {
+     hasNoDimnames(m)
+     hasNoDimnames(m1); hasNoDimnames(m2)
+     hasNoDimnames(m3); hasNoDimnames(m4)
+     hasNoDimnames(Matrix(m) -> M)
+     hasNoDimnames(as(M, "sparseMatrix"))
+ })
> 
> 
> 
> cleanEx()
> nameEx("isSymmetric-methods")
> ### * isSymmetric-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isSymmetric-methods
> ### Title: Methods for Function 'isSymmetric' in Package 'Matrix'
> ### Aliases: isSymmetric isSymmetric-methods
> ###   isSymmetric,CsparseMatrix-method isSymmetric,RsparseMatrix-method
> ###   isSymmetric,TsparseMatrix-method isSymmetric,denseMatrix-method
> ###   isSymmetric,diagonalMatrix-method isSymmetric,indMatrix-method
> ###   isSymmetric,dgCMatrix-method isSymmetric,dgRMatrix-method
> ###   isSymmetric,dgTMatrix-method isSymmetric,dgeMatrix-method
> ###   isSymmetric,dtCMatrix-method isSymmetric,dtRMatrix-method
> ###   isSymmetric,dtTMatrix-method isSymmetric,dtpMatrix-method
> ###   isSymmetric,dtrMatrix-method
> ### Keywords: array programming methods
> 
> ### ** Examples
> 
> isSymmetric(Diagonal(4)) # TRUE of course
[1] TRUE
> M <- Matrix(c(1,2,2,1), 2,2)
> isSymmetric(M) # TRUE (*and* of formal class "dsyMatrix")
[1] TRUE
> isSymmetric(as(M, "generalMatrix")) # still symmetric, even if not "formally"
[1] TRUE
> isSymmetric(triu(M)) # FALSE
[1] FALSE
> 
> ## Look at implementations:
> showMethods("isSymmetric", includeDefs = TRUE) # includes S3 generic from base
Function: isSymmetric (package base)
object="ANY"
function (object, ...) 
UseMethod("isSymmetric")


object="CsparseMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        .Call(R_sparse_is_symmetric, object, checkDN)
    }
    .local(object, ...)
}


object="RsparseMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        .Call(R_sparse_is_symmetric, object, checkDN)
    }
    .local(object, ...)
}


object="TsparseMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        .Call(R_sparse_is_symmetric, object, checkDN)
    }
    .local(object, ...)
}


object="denseMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        .Call(R_dense_is_symmetric, object, checkDN)
    }
    .local(object, ...)
}


object="dgCMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, tol = 100 * .Machine$double.eps, 
        ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        if (tol <= 0) 
            return(.Call(R_sparse_is_symmetric, object, checkDN))
        d <- object@Dim
        if ((n <- d[2L]) != d[1L]) 
            return(FALSE)
        if (checkDN && !isSymmetricDN(object@Dimnames)) 
            return(FALSE)
        if (n == 0L) 
            return(TRUE)
        Cj <- if (is.complex(object@x)) 
            Conj
        else identity
        ae <- function(check.attributes, ...) {
            all.equal(..., check.attributes = FALSE)
        }
        isTRUE(ae(target = .M2V(object), current = .M2V(Cj(t(object))), 
            tolerance = tol, ...))
    }
    .local(object, ...)
}


object="dgRMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, tol = 100 * .Machine$double.eps, 
        ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        if (tol <= 0) 
            return(.Call(R_sparse_is_symmetric, object, checkDN))
        d <- object@Dim
        if ((n <- d[2L]) != d[1L]) 
            return(FALSE)
        if (checkDN && !isSymmetricDN(object@Dimnames)) 
            return(FALSE)
        if (n == 0L) 
            return(TRUE)
        Cj <- if (is.complex(object@x)) 
            Conj
        else identity
        ae <- function(check.attributes, ...) {
            all.equal(..., check.attributes = FALSE)
        }
        isTRUE(ae(target = .M2V(object), current = .M2V(Cj(t(object))), 
            tolerance = tol, ...))
    }
    .local(object, ...)
}


object="dgTMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, tol = 100 * .Machine$double.eps, 
        ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        if (tol <= 0) 
            return(.Call(R_sparse_is_symmetric, object, checkDN))
        d <- object@Dim
        if ((n <- d[2L]) != d[1L]) 
            return(FALSE)
        if (checkDN && !isSymmetricDN(object@Dimnames)) 
            return(FALSE)
        if (n == 0L) 
            return(TRUE)
        Cj <- if (is.complex(object@x)) 
            Conj
        else identity
        ae <- function(check.attributes, ...) {
            all.equal(..., check.attributes = FALSE)
        }
        isTRUE(ae(target = .M2V(object), current = .M2V(Cj(t(object))), 
            tolerance = tol, ...))
    }
    .local(object, ...)
}


object="dgeMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, tol = 100 * .Machine$double.eps, 
        tol1 = 8 * tol, ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        if (tol <= 0) 
            return(.Call(R_dense_is_symmetric, object, checkDN))
        d <- object@Dim
        if ((n <- d[2L]) != d[1L]) 
            return(FALSE)
        if (checkDN && !isSymmetricDN(object@Dimnames)) 
            return(FALSE)
        if (n == 0L) 
            return(TRUE)
        object <- .M2gen(object)
        Cj <- if (is.complex(object@x)) 
            Conj
        else identity
        ae <- function(check.attributes, ...) {
            all.equal.numeric(..., check.attributes = FALSE)
        }
        if (length(tol1)) {
            i. <- if (n <= 4L) 
                1L:n
            else c(1L, 2L, n - 1L, n)
            for (i in i.) if (!isTRUE(ae(target = object[i, ], 
                current = Cj(object[, i]), tolerance = tol1, 
                ...))) 
                return(FALSE)
        }
        isTRUE(ae(target = object@x, current = Cj(t(object))@x, 
            tolerance = tol, ...))
    }
    .local(object, ...)
}


object="diagonalMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            if (ca(...) && !isSymmetricDN(object@Dimnames)) 
                return(FALSE)
        }
        .M.kind(object) != "z" || object@diag != "N" || {
            x <- object@x
            isTRUE(all.equal.numeric(x, Conj(x), ...))
        }
    }
    .local(object, ...)
}


object="dtCMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, tol = 100 * .Machine$double.eps, 
        ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        if (tol <= 0) 
            return(.Call(R_sparse_is_symmetric, object, checkDN))
        d <- object@Dim
        if ((n <- d[2L]) != d[1L]) 
            return(FALSE)
        if (checkDN && !isSymmetricDN(object@Dimnames)) 
            return(FALSE)
        if (n == 0L) 
            return(TRUE)
        Cj <- if (is.complex(object@x)) 
            Conj
        else identity
        ae <- function(check.attributes, ...) {
            all.equal(..., check.attributes = FALSE)
        }
        isTRUE(ae(target = .M2V(object), current = .M2V(Cj(t(object))), 
            tolerance = tol, ...))
    }
    .local(object, ...)
}


object="dtRMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, tol = 100 * .Machine$double.eps, 
        ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        if (tol <= 0) 
            return(.Call(R_sparse_is_symmetric, object, checkDN))
        d <- object@Dim
        if ((n <- d[2L]) != d[1L]) 
            return(FALSE)
        if (checkDN && !isSymmetricDN(object@Dimnames)) 
            return(FALSE)
        if (n == 0L) 
            return(TRUE)
        Cj <- if (is.complex(object@x)) 
            Conj
        else identity
        ae <- function(check.attributes, ...) {
            all.equal(..., check.attributes = FALSE)
        }
        isTRUE(ae(target = .M2V(object), current = .M2V(Cj(t(object))), 
            tolerance = tol, ...))
    }
    .local(object, ...)
}


object="dtTMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, tol = 100 * .Machine$double.eps, 
        ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        if (tol <= 0) 
            return(.Call(R_sparse_is_symmetric, object, checkDN))
        d <- object@Dim
        if ((n <- d[2L]) != d[1L]) 
            return(FALSE)
        if (checkDN && !isSymmetricDN(object@Dimnames)) 
            return(FALSE)
        if (n == 0L) 
            return(TRUE)
        Cj <- if (is.complex(object@x)) 
            Conj
        else identity
        ae <- function(check.attributes, ...) {
            all.equal(..., check.attributes = FALSE)
        }
        isTRUE(ae(target = .M2V(object), current = .M2V(Cj(t(object))), 
            tolerance = tol, ...))
    }
    .local(object, ...)
}


object="dtpMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, tol = 100 * .Machine$double.eps, 
        tol1 = 8 * tol, ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        if (tol <= 0) 
            return(.Call(R_dense_is_symmetric, object, checkDN))
        d <- object@Dim
        if ((n <- d[2L]) != d[1L]) 
            return(FALSE)
        if (checkDN && !isSymmetricDN(object@Dimnames)) 
            return(FALSE)
        if (n == 0L) 
            return(TRUE)
        object <- .M2gen(object)
        Cj <- if (is.complex(object@x)) 
            Conj
        else identity
        ae <- function(check.attributes, ...) {
            all.equal.numeric(..., check.attributes = FALSE)
        }
        if (length(tol1)) {
            i. <- if (n <= 4L) 
                1L:n
            else c(1L, 2L, n - 1L, n)
            for (i in i.) if (!isTRUE(ae(target = object[i, ], 
                current = Cj(object[, i]), tolerance = tol1, 
                ...))) 
                return(FALSE)
        }
        isTRUE(ae(target = object@x, current = Cj(t(object))@x, 
            tolerance = tol, ...))
    }
    .local(object, ...)
}


object="dtrMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, tol = 100 * .Machine$double.eps, 
        tol1 = 8 * tol, ...) 
    {
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            checkDN <- ca(...)
        }
        if (tol <= 0) 
            return(.Call(R_dense_is_symmetric, object, checkDN))
        d <- object@Dim
        if ((n <- d[2L]) != d[1L]) 
            return(FALSE)
        if (checkDN && !isSymmetricDN(object@Dimnames)) 
            return(FALSE)
        if (n == 0L) 
            return(TRUE)
        object <- .M2gen(object)
        Cj <- if (is.complex(object@x)) 
            Conj
        else identity
        ae <- function(check.attributes, ...) {
            all.equal.numeric(..., check.attributes = FALSE)
        }
        if (length(tol1)) {
            i. <- if (n <= 4L) 
                1L:n
            else c(1L, 2L, n - 1L, n)
            for (i in i.) if (!isTRUE(ae(target = object[i, ], 
                current = Cj(object[, i]), tolerance = tol1, 
                ...))) 
                return(FALSE)
        }
        isTRUE(ae(target = object@x, current = Cj(t(object))@x, 
            tolerance = tol, ...))
    }
    .local(object, ...)
}


object="indMatrix"
function (object, ...) 
{
    .local <- function (object, checkDN = TRUE, ...) 
    {
        d <- object@Dim
        if ((n <- d[2L]) != d[1L]) 
            return(FALSE)
        if (checkDN) {
            ca <- function(check.attributes = TRUE, ...) check.attributes
            if (ca(...) && !isSymmetricDN(object@Dimnames)) 
                return(FALSE)
        }
        perm <- object@perm
        all(perm[perm] == seq_len(n))
    }
    .local(object, ...)
}



> 
> 
> 
> cleanEx()
> nameEx("isTriangular")
> ### * isTriangular
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isTriangular-methods
> ### Title: Test whether a Matrix is Triangular or Diagonal
> ### Aliases: isTriangular isTriangular-methods isDiagonal
> ###   isDiagonal-methods isTriangular,CsparseMatrix-method
> ###   isTriangular,RsparseMatrix-method isTriangular,TsparseMatrix-method
> ###   isTriangular,denseMatrix-method isTriangular,diagonalMatrix-method
> ###   isTriangular,indMatrix-method isTriangular,matrix-method
> ###   isDiagonal,CsparseMatrix-method isDiagonal,RsparseMatrix-method
> ###   isDiagonal,TsparseMatrix-method isDiagonal,denseMatrix-method
> ###   isDiagonal,diagonalMatrix-method isDiagonal,indMatrix-method
> ###   isDiagonal,matrix-method
> ### Keywords: array programming methods
> 
> ### ** Examples
> 
> isTriangular(Diagonal(4))
[1] TRUE
attr(,"kind")
[1] "U"
> ## is TRUE: a diagonal matrix is also (both upper and lower) triangular
> (M <- Matrix(c(1,2,0,1), 2,2))
2 x 2 Matrix of class "dtrMatrix"
     [,1] [,2]
[1,]    1    .
[2,]    2    1
> isTriangular(M) # TRUE (*and* of formal class "dtrMatrix")
[1] TRUE
attr(,"kind")
[1] "L"
> isTriangular(as(M, "generalMatrix")) # still triangular, even if not "formally"
[1] TRUE
attr(,"kind")
[1] "L"
> isTriangular(crossprod(M)) # FALSE
[1] FALSE
> 
> isDiagonal(matrix(c(2,0,0,1), 2,2)) # TRUE
[1] TRUE
> 
> ## Look at implementations:
> showMethods("isTriangular", includeDefs = TRUE)
Function: isTriangular (package Matrix)
object="CsparseMatrix"
function (object, upper = NA, ...) 
.Call(R_sparse_is_triangular, object, upper)


object="RsparseMatrix"
function (object, upper = NA, ...) 
.Call(R_sparse_is_triangular, object, upper)


object="TsparseMatrix"
function (object, upper = NA, ...) 
.Call(R_sparse_is_triangular, object, upper)


object="denseMatrix"
function (object, upper = NA, ...) 
.Call(R_dense_is_triangular, object, upper)


object="diagonalMatrix"
function (object, upper = NA, ...) 
if (is.na(upper)) `attr<-`(TRUE, "kind", "U") else TRUE


object="indMatrix"
function (object, upper = NA, ...) 
{
    d <- object@Dim
    if ((n <- d[2L]) != d[1L]) 
        return(FALSE)
    if (object@margin == 1L) {
        i <- seq_len(n)
        j <- object@perm
    }
    else {
        i <- object@perm
        j <- seq_len(n)
    }
    if (is.na(upper)) {
        if (all(j >= i)) 
            return(`attr<-`(TRUE, "kind", "U"))
        if (all(i <= j)) 
            return(`attr<-`(TRUE, "kind", "L"))
        FALSE
    }
    else if (upper) {
        all(j >= i)
    }
    else {
        all(i <= j)
    }
}


object="matrix"
function (object, upper = NA, ...) 
.Call(R_dense_is_triangular, object, upper)



> showMethods("isDiagonal", includeDefs = TRUE)
Function: isDiagonal (package Matrix)
object="CsparseMatrix"
function (object) 
.Call(R_sparse_is_diagonal, object)


object="RsparseMatrix"
function (object) 
.Call(R_sparse_is_diagonal, object)


object="TsparseMatrix"
function (object) 
.Call(R_sparse_is_diagonal, object)


object="denseMatrix"
function (object) 
.Call(R_dense_is_diagonal, object)


object="diagonalMatrix"
function (object) 
TRUE


object="indMatrix"
function (object) 
{
    d <- object@Dim
    if ((n <- d[2L]) != d[1L]) 
        return(FALSE)
    all(object@perm == seq_len(n))
}


object="matrix"
function (object) 
.Call(R_dense_is_diagonal, object)



> 
> 
> 
> cleanEx()
> nameEx("kronecker-methods")
> ### * kronecker-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kronecker-methods
> ### Title: Methods for Function 'kronecker()' in Package 'Matrix'
> ### Aliases: kronecker kronecker-methods
> ###   kronecker,CsparseMatrix,CsparseMatrix-method
> ###   kronecker,CsparseMatrix,Matrix-method
> ###   kronecker,CsparseMatrix,diagonalMatrix-method
> ###   kronecker,Matrix,matrix-method kronecker,Matrix,vector-method
> ###   kronecker,RsparseMatrix,Matrix-method
> ###   kronecker,RsparseMatrix,RsparseMatrix-method
> ###   kronecker,RsparseMatrix,diagonalMatrix-method
> ###   kronecker,TsparseMatrix,Matrix-method
> ###   kronecker,TsparseMatrix,TsparseMatrix-method
> ###   kronecker,TsparseMatrix,diagonalMatrix-method
> ###   kronecker,denseMatrix,Matrix-method
> ###   kronecker,denseMatrix,denseMatrix-method
> ###   kronecker,diagonalMatrix,CsparseMatrix-method
> ###   kronecker,diagonalMatrix,Matrix-method
> ###   kronecker,diagonalMatrix,RsparseMatrix-method
> ###   kronecker,diagonalMatrix,TsparseMatrix-method
> ###   kronecker,diagonalMatrix,diagonalMatrix-method
> ###   kronecker,diagonalMatrix,indMatrix-method
> ###   kronecker,indMatrix,Matrix-method
> ###   kronecker,indMatrix,diagonalMatrix-method
> ###   kronecker,indMatrix,indMatrix-method kronecker,matrix,Matrix-method
> ###   kronecker,vector,Matrix-method
> ### Keywords: algebra arith array methods methods array
> 
> ### ** Examples
> 
> (t1 <- spMatrix(5,4, x= c(3,2,-7,11), i= 1:4, j=4:1)) #  5 x  4
5 x 4 sparse Matrix of class "dgTMatrix"
              
[1,]  .  . . 3
[2,]  .  . 2 .
[3,]  . -7 . .
[4,] 11  . . .
[5,]  .  . . .
> (t2 <- kronecker(Diagonal(3, 2:4), t1))               # 15 x 12
15 x 12 sparse Matrix of class "dgTMatrix"
                                       
 [1,]  .   . . 6  .   . . .  .   . .  .
 [2,]  .   . 4 .  .   . . .  .   . .  .
 [3,]  . -14 . .  .   . . .  .   . .  .
 [4,] 22   . . .  .   . . .  .   . .  .
 [5,]  .   . . .  .   . . .  .   . .  .
 [6,]  .   . . .  .   . . 9  .   . .  .
 [7,]  .   . . .  .   . 6 .  .   . .  .
 [8,]  .   . . .  . -21 . .  .   . .  .
 [9,]  .   . . . 33   . . .  .   . .  .
[10,]  .   . . .  .   . . .  .   . .  .
[11,]  .   . . .  .   . . .  .   . . 12
[12,]  .   . . .  .   . . .  .   . 8  .
[13,]  .   . . .  .   . . .  . -28 .  .
[14,]  .   . . .  .   . . . 44   . .  .
[15,]  .   . . .  .   . . .  .   . .  .
> 
> ## should also work with special-cased logical matrices
> l3 <- upper.tri(matrix(,3,3))
> M <- Matrix(l3)
> (N <- as(M, "nsparseMatrix")) # "ntCMatrix" (upper triangular)
3 x 3 sparse Matrix of class "ntCMatrix"
          
[1,] . | |
[2,] . . |
[3,] . . .
> N2 <- as(N, "generalMatrix")  # (lost "t"riangularity)
> MM <- kronecker(M,M)
> NN <- kronecker(N,N) # "dtTMatrix" i.e. did keep
> NN2 <- kronecker(N2,N2)
> stopifnot(identical(NN,MM),
+           is(NN2, "sparseMatrix"), all(NN2 == NN),
+           is(NN, "triangularMatrix"))
> 
> 
> 
> cleanEx()
> nameEx("ldenseMatrix-class")
> ### * ldenseMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ldenseMatrix-class
> ### Title: Virtual Class "ldenseMatrix" of Dense Logical Matrices
> ### Aliases: ldenseMatrix-class !,ldenseMatrix-method
> ###   &,ldenseMatrix,ddiMatrix-method &,ldenseMatrix,ldiMatrix-method
> ###   &,ldenseMatrix,ndiMatrix-method *,ldenseMatrix,ddiMatrix-method
> ###   *,ldenseMatrix,ldiMatrix-method *,ldenseMatrix,ndiMatrix-method
> ###   Logic,ldenseMatrix,lsparseMatrix-method
> ###   Ops,ldenseMatrix,ldenseMatrix-method ^,ldenseMatrix,ddiMatrix-method
> ###   ^,ldenseMatrix,ldiMatrix-method ^,ldenseMatrix,ndiMatrix-method
> ###   coerce,matrix,ldenseMatrix-method coerce,vector,ldenseMatrix-method
> ###   which,ldenseMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("ldenseMatrix")
Virtual Class "ldenseMatrix" [package "Matrix"]

Slots:
                                 
Name:         x      Dim Dimnames
Class:  logical  integer     list

Extends: 
Class "lMatrix", directly
Class "denseMatrix", directly
Class "Matrix", by class "lMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 3

Known Subclasses: "lgeMatrix", "ltrMatrix", "lsyMatrix", "ltpMatrix", "lspMatrix"
> 
> as(diag(3) > 0, "ldenseMatrix")
3 x 3 Matrix of class "lsyMatrix"
      [,1]  [,2]  [,3]
[1,]  TRUE FALSE FALSE
[2,] FALSE  TRUE FALSE
[3,] FALSE FALSE  TRUE
> 
> 
> 
> cleanEx()
> nameEx("ldiMatrix-class")
> ### * ldiMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ldiMatrix-class
> ### Title: Class "ldiMatrix" of Diagonal Logical Matrices
> ### Aliases: ldiMatrix-class ndiMatrix-class !,ldiMatrix-method
> ###   %%,ldiMatrix,Matrix-method %%,ldiMatrix,ddenseMatrix-method
> ###   %%,ldiMatrix,ldenseMatrix-method %%,ldiMatrix,ndenseMatrix-method
> ###   %/%,ldiMatrix,Matrix-method %/%,ldiMatrix,ddenseMatrix-method
> ###   %/%,ldiMatrix,ldenseMatrix-method %/%,ldiMatrix,ndenseMatrix-method
> ###   &,ldiMatrix,Matrix-method &,ldiMatrix,ddenseMatrix-method
> ###   &,ldiMatrix,ldenseMatrix-method &,ldiMatrix,ndenseMatrix-method
> ###   *,ldiMatrix,Matrix-method *,ldiMatrix,ddenseMatrix-method
> ###   *,ldiMatrix,ldenseMatrix-method *,ldiMatrix,ndenseMatrix-method
> ###   /,ldiMatrix,Matrix-method /,ldiMatrix,ddenseMatrix-method
> ###   /,ldiMatrix,ldenseMatrix-method /,ldiMatrix,ndenseMatrix-method
> ###   Arith,ldiMatrix,logical-method Arith,ldiMatrix,numeric-method
> ###   Arith,logical,ldiMatrix-method Arith,numeric,ldiMatrix-method
> ###   Ops,ANY,ldiMatrix-method Ops,ldiMatrix,ANY-method
> ###   Ops,ldiMatrix,Matrix-method Ops,ldiMatrix,dMatrix-method
> ###   Ops,ldiMatrix,ddiMatrix-method Ops,ldiMatrix,ldiMatrix-method
> ###   Ops,ldiMatrix,ndiMatrix-method Ops,ldiMatrix,logical-method
> ###   Ops,ldiMatrix,numeric-method Ops,ldiMatrix,sparseMatrix-method
> ###   which,ldiMatrix-method !,ndiMatrix-method %%,ndiMatrix,Matrix-method
> ###   %%,ndiMatrix,ddenseMatrix-method %%,ndiMatrix,ldenseMatrix-method
> ###   %%,ndiMatrix,ndenseMatrix-method %/%,ndiMatrix,Matrix-method
> ###   %/%,ndiMatrix,ddenseMatrix-method %/%,ndiMatrix,ldenseMatrix-method
> ###   %/%,ndiMatrix,ndenseMatrix-method &,ndiMatrix,Matrix-method
> ###   &,ndiMatrix,ddenseMatrix-method &,ndiMatrix,ldenseMatrix-method
> ###   &,ndiMatrix,ndenseMatrix-method *,ndiMatrix,Matrix-method
> ###   *,ndiMatrix,Matrix-method *,ndiMatrix,ddenseMatrix-method
> ###   *,ndiMatrix,ldenseMatrix-method *,ndiMatrix,ndenseMatrix-method
> ###   /,ndiMatrix,Matrix-method /,ndiMatrix,ddenseMatrix-method
> ###   /,ndiMatrix,ldenseMatrix-method /,ndiMatrix,ndenseMatrix-method
> ###   Ops,ndiMatrix,ddiMatrix-method Ops,ndiMatrix,ldiMatrix-method
> ###   Ops,ndiMatrix,ndiMatrix-method which,ndiMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (lM <- Diagonal(x = c(TRUE,FALSE,FALSE)))
3 x 3 diagonal matrix of class "ldiMatrix"
     [,1] [,2]  [,3] 
[1,] TRUE     .     .
[2,]    . FALSE     .
[3,]    .     . FALSE
> str(lM)#> gory details (slots)
Formal class 'ldiMatrix' [package "Matrix"] with 4 slots
  ..@ diag    : chr "N"
  ..@ Dim     : int [1:2] 3 3
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : logi [1:3] TRUE FALSE FALSE
> 
> crossprod(lM) # numeric
3 x 3 diagonal matrix of class "ddiMatrix"
     [,1] [,2] [,3]
[1,]    1    .    .
[2,]    .    0    .
[3,]    .    .    0
> (nM <- as(lM, "nMatrix"))
3 x 3 diagonal matrix of class "ndiMatrix"
     [,1] [,2]  [,3] 
[1,] TRUE     .     .
[2,]    . FALSE     .
[3,]    .     . FALSE
> crossprod(nM) # pattern sparse
3 x 3 diagonal matrix of class "ddiMatrix"
     [,1] [,2] [,3]
[1,]    1    .    .
[2,]    .    0    .
[3,]    .    .    0
> 
> 
> 
> cleanEx()
> nameEx("lgeMatrix-class")
> ### * lgeMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lgeMatrix-class
> ### Title: Class "lgeMatrix" of General Dense Logical Matrices
> ### Aliases: lgeMatrix-class Arith,lgeMatrix,lgeMatrix-method
> ###   Compare,lgeMatrix,lgeMatrix-method Logic,lgeMatrix,lgeMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("lgeMatrix")
Class "lgeMatrix" [package "Matrix"]

Slots:
                                          
Name:       Dim Dimnames        x  factors
Class:  integer     list  logical     list

Extends: 
Class "unpackedMatrix", directly
Class "ldenseMatrix", directly
Class "generalMatrix", directly
Class "lMatrix", by class "ldenseMatrix", distance 2
Class "denseMatrix", by class "ldenseMatrix", distance 2
Class "compMatrix", by class "generalMatrix", distance 2
Class "Matrix", by class "unpackedMatrix", distance 3
Class "replValueSp", by class "Matrix", distance 4
> str(new("lgeMatrix"))
Formal class 'lgeMatrix' [package "Matrix"] with 4 slots
  ..@ Dim     : int [1:2] 0 0
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : logi(0) 
  ..@ factors : list()
> set.seed(1)
> (lM <- Matrix(matrix(rnorm(28), 4,7) > 0))# a simple random lgeMatrix
4 x 7 Matrix of class "lgeMatrix"
      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]
[1,] FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE
[2,]  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE
[3,] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE
[4,]  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE
> set.seed(11)
> (lC <- Matrix(matrix(rnorm(28), 4,7) > 0))# a simple random lgCMatrix
4 x 7 sparse Matrix of class "lgCMatrix"
                  
[1,] . | . . . . |
[2,] | . . . | . |
[3,] . | . . . . .
[4,] . | . | . | .
> as(lM, "CsparseMatrix")
4 x 7 sparse Matrix of class "lgCMatrix"
                  
[1,] . | | . . | |
[2,] | . . . | | .
[3,] . | | | | | .
[4,] | | | . | . .
> 
> 
> 
> cleanEx()
> nameEx("lsparseMatrix-classes")
> ### * lsparseMatrix-classes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lsparseMatrix-classes
> ### Title: Sparse logical matrices
> ### Aliases: lsparseMatrix-class lgCMatrix-class lgRMatrix-class
> ###   lgTMatrix-class ltCMatrix-class ltRMatrix-class ltTMatrix-class
> ###   lsCMatrix-class lsRMatrix-class lsTMatrix-class
> ###   !,lsparseMatrix-method Arith,lsparseMatrix,Matrix-method
> ###   Logic,lsparseMatrix,ldenseMatrix-method
> ###   Logic,lsparseMatrix,lsparseMatrix-method
> ###   Ops,lsparseMatrix,lsparseMatrix-method
> ###   Ops,lsparseMatrix,nsparseMatrix-method
> ###   coerce,matrix,lsparseMatrix-method coerce,vector,lsparseMatrix-method
> ###   which,lsparseMatrix-method Arith,lgCMatrix,lgCMatrix-method
> ###   Logic,lgCMatrix,lgCMatrix-method Arith,lgTMatrix,lgTMatrix-method
> ###   Logic,lgTMatrix,lgTMatrix-method Logic,ltCMatrix,ltCMatrix-method
> ###   Logic,lsCMatrix,lsCMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (m <- Matrix(c(0,0,2:0), 3,5, dimnames=list(LETTERS[1:3],NULL)))
3 x 5 sparse Matrix of class "dgCMatrix"
           
A . 1 . . 2
B . . 2 . 1
C 2 . 1 . .
> (lm <- (m > 1)) # lgC
3 x 5 sparse Matrix of class "lgCMatrix"
           
A . : . . |
B . . | . :
C | . : . .
> !lm     # no longer sparse
3 x 5 Matrix of class "lgeMatrix"
   [,1] [,2]  [,3] [,4]  [,5]
A  TRUE TRUE  TRUE TRUE FALSE
B  TRUE TRUE FALSE TRUE  TRUE
C FALSE TRUE  TRUE TRUE  TRUE
> stopifnot(is(lm,"lsparseMatrix"),
+           identical(!lm, m <= 1))
> 
> data(KNex, package = "Matrix")
> str(mmG.1 <- (KNex $ mm) > 0.1)# "lgC..."
Formal class 'lgCMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:8755] 0 2 25 27 163 165 1258 1261 1276 1278 ...
  ..@ p       : int [1:713] 0 13 17 26 38 43 52 56 61 67 ...
  ..@ Dim     : int [1:2] 1850 712
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : logi [1:8755] TRUE TRUE TRUE TRUE TRUE TRUE ...
  ..@ factors : list()
> table(mmG.1@x)# however with many ``non-structural zeros''

FALSE  TRUE 
 4320  4435 
> ## from logical to nz_pattern -- okay when there are no NA's :
> nmG.1 <- as(mmG.1, "nMatrix") # <<< has "TRUE" also where mmG.1 had FALSE
> ## from logical to "double"
> dmG.1 <- as(mmG.1, "dMatrix") # has '0' and back:
> lmG.1 <- as(dmG.1, "lMatrix")
> stopifnot(identical(nmG.1, as((KNex $ mm) != 0,"nMatrix")),
+           validObject(lmG.1),
+           identical(lmG.1, mmG.1))
> 
> class(xnx <- crossprod(nmG.1))# "nsC.."
[1] "nsCMatrix"
attr(,"package")
[1] "Matrix"
> class(xlx <- crossprod(mmG.1))# "dsC.." : numeric
[1] "dsCMatrix"
attr(,"package")
[1] "Matrix"
> is0 <- (xlx == 0)
> mean(as.vector(is0))# 99.3% zeros: quite sparse, but
[1] 0.9928769
> table(xlx@x == 0)# more than half of the entries are (non-structural!) 0

FALSE  TRUE 
 2158  2760 
> stopifnot(isSymmetric(xlx), isSymmetric(xnx),
+           ## compare xnx and xlx : have the *same* non-structural 0s :
+           sapply(slotNames(xnx),
+                  function(n) identical(slot(xnx, n), slot(xlx, n))))
> 
> 
> 
> cleanEx()
> nameEx("lsyMatrix-class")
> ### * lsyMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lsyMatrix-class
> ### Title: Symmetric Dense Logical Matrices
> ### Aliases: lsyMatrix-class lspMatrix-class
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (M2 <- Matrix(c(TRUE, NA, FALSE, FALSE), 2, 2)) # logical dense (ltr)
2 x 2 Matrix of class "ltrMatrix"
     [,1]  [,2] 
[1,]  TRUE     .
[2,]    NA FALSE
> str(M2)
Formal class 'ltrMatrix' [package "Matrix"] with 5 slots
  ..@ Dim     : int [1:2] 2 2
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : logi [1:4] TRUE NA FALSE FALSE
  ..@ uplo    : chr "L"
  ..@ diag    : chr "N"
> # can
> (sM <- M2 | t(M2)) # "lge"
2 x 2 Matrix of class "lgeMatrix"
     [,1]  [,2]
[1,] TRUE    NA
[2,]   NA FALSE
> as(sM, "symmetricMatrix")
2 x 2 Matrix of class "lsyMatrix"
     [,1]  [,2]
[1,] TRUE    NA
[2,]   NA FALSE
> str(sM <- as(sM, "packedMatrix")) # packed symmetric
Formal class 'lspMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 2 2
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : logi [1:3] TRUE NA FALSE
  ..@ factors : list()
> 
> 
> 
> cleanEx()
> nameEx("ltrMatrix-class")
> ### * ltrMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ltrMatrix-class
> ### Title: Triangular Dense Logical Matrices
> ### Aliases: ltrMatrix-class ltpMatrix-class
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("ltrMatrix")
Class "ltrMatrix" [package "Matrix"]

Slots:
                                                        
Name:        Dim  Dimnames         x      uplo      diag
Class:   integer      list   logical character character

Extends: 
Class "unpackedMatrix", directly
Class "ldenseMatrix", directly
Class "triangularMatrix", directly
Class "lMatrix", by class "ldenseMatrix", distance 2
Class "denseMatrix", by class "ldenseMatrix", distance 2
Class "Matrix", by class "triangularMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 4
> 
> str(new("ltpMatrix"))
Formal class 'ltpMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 0 0
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : logi(0) 
  ..@ diag    : chr "N"
> (lutr <- as(upper.tri(matrix(, 4, 4)), "ldenseMatrix"))
4 x 4 Matrix of class "ltrMatrix"
     [,1]  [,2]  [,3]  [,4] 
[1,] FALSE  TRUE  TRUE  TRUE
[2,]     . FALSE  TRUE  TRUE
[3,]     .     . FALSE  TRUE
[4,]     .     .     . FALSE
> str(lutp <- pack(lutr)) # packed matrix: only 10 = 4*(4+1)/2 entries
Formal class 'ltpMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 4 4
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : logi [1:10] FALSE TRUE FALSE TRUE TRUE FALSE ...
  ..@ diag    : chr "N"
> !lutp # the logical negation (is *not* logical triangular !)
4 x 4 Matrix of class "lgeMatrix"
     [,1]  [,2]  [,3]  [,4]
[1,] TRUE FALSE FALSE FALSE
[2,] TRUE  TRUE FALSE FALSE
[3,] TRUE  TRUE  TRUE FALSE
[4,] TRUE  TRUE  TRUE  TRUE
> ## but this one is:
> stopifnot(all.equal(lutp, pack(!!lutp)))
> 
> 
> 
> cleanEx()
> nameEx("lu")
> ### * lu
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lu-methods
> ### Title: Methods for LU Factorization
> ### Aliases: lu lu-methods lu,denseMatrix-method lu,diagonalMatrix-method
> ###   lu,dgCMatrix-method lu,dgRMatrix-method lu,dgTMatrix-method
> ###   lu,dgeMatrix-method lu,dsCMatrix-method lu,dsRMatrix-method
> ###   lu,dsTMatrix-method lu,dspMatrix-method lu,dsyMatrix-method
> ###   lu,dtCMatrix-method lu,dtRMatrix-method lu,dtTMatrix-method
> ###   lu,dtpMatrix-method lu,dtrMatrix-method lu,matrix-method
> ###   lu,sparseMatrix-method
> ### Keywords: algebra array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showMethods("lu", inherited = FALSE)
Function: lu (package Matrix)
x="denseMatrix"
x="dgCMatrix"
x="dgRMatrix"
x="dgTMatrix"
x="dgeMatrix"
x="diagonalMatrix"
x="dsCMatrix"
x="dsRMatrix"
x="dsTMatrix"
x="dspMatrix"
x="dsyMatrix"
x="dtCMatrix"
x="dtRMatrix"
x="dtTMatrix"
x="dtpMatrix"
x="dtrMatrix"
x="matrix"
x="sparseMatrix"

> set.seed(0)
> 
> ## ---- Dense ----------------------------------------------------------
> 
> (A1 <- Matrix(rnorm(9L), 3L, 3L))
3 x 3 Matrix of class "dgeMatrix"
           [,1]       [,2]         [,3]
[1,]  1.2629543  1.2724293 -0.928567035
[2,] -0.3262334  0.4146414 -0.294720447
[3,]  1.3297993 -1.5399500 -0.005767173
> (lu.A1 <- lu(A1))
LU factorization of Formal class 'denseLU' [package "Matrix"] with 4 slots
  ..@ x       : num [1:9] 1.33 0.95 -0.245 -1.54 2.735 ...
  ..@ perm    : int [1:3] 3 3 3
  ..@ Dim     : int [1:2] 3 3
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> 
> (A2 <- round(10 * A1[, -3L]))
3 x 2 Matrix of class "dgeMatrix"
     [,1] [,2]
[1,]   13   13
[2,]   -3    4
[3,]   13  -15
> (lu.A2 <- lu(A2))
LU factorization of Formal class 'denseLU' [package "Matrix"] with 4 slots
  ..@ x       : num [1:6] 13 1 -0.231 13 -28 ...
  ..@ perm    : int [1:2] 1 3
  ..@ Dim     : int [1:2] 3 2
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> 
> ## A ~ P1' L U in floating point
> str(e.lu.A2 <- expand2(lu.A2), max.level = 2L)
List of 3
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L  :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
 $ U  :Formal class 'dtrMatrix' [package "Matrix"] with 5 slots
> stopifnot(all.equal(A2, Reduce(`%*%`, e.lu.A2)))
> 
> ## ---- Sparse ---------------------------------------------------------
> 
> A3 <- as(readMM(system.file("external/pores_1.mtx", package = "Matrix")),
+          "CsparseMatrix")
> (lu.A3 <- lu(A3))
LU factorization of Formal class 'sparseLU' [package "Matrix"] with 6 slots
  ..@ L       :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
  .. .. ..@ i       : int [1:141] 0 1 18 22 25 26 1 18 22 25 ...
  .. .. ..@ p       : int [1:31] 0 6 11 13 16 19 22 26 31 35 ...
  .. .. ..@ Dim     : int [1:2] 30 30
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:141] 1 -0.993819 -0.004979 -0.000132 0.000132 ...
  .. .. ..@ uplo    : chr "L"
  .. .. ..@ diag    : chr "N"
  ..@ U       :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
  .. .. ..@ i       : int [1:206] 0 0 1 2 2 3 2 4 2 3 ...
  .. .. ..@ p       : int [1:31] 0 1 3 4 6 8 12 15 20 25 ...
  .. .. ..@ Dim     : int [1:2] 30 30
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:206] -7178502 -24613411 -18311731 -6399179 715 ...
  .. .. ..@ uplo    : chr "U"
  .. .. ..@ diag    : chr "N"
  ..@ p       : int [1:30] 1 11 29 27 19 28 9 18 17 7 ...
  ..@ q       : int [1:30] 0 1 29 27 19 28 9 18 17 8 ...
  ..@ Dim     : int [1:2] 30 30
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
> 
> ## A ~ P1' L U P2' in floating point
> str(e.lu.A3 <- expand2(lu.A3), max.level = 2L)
List of 4
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L  :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ U  :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ P2.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
> stopifnot(all.equal(A3, Reduce(`%*%`, e.lu.A3)))
> 
> 
> 
> cleanEx()
> nameEx("mat2triplet")
> ### * mat2triplet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mat2triplet
> ### Title: Map Matrix to its Triplet Representation
> ### Aliases: mat2triplet
> ### Keywords: array utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> mat2triplet # simple definition
function (x, uniqT = FALSE) 
{
    T <- as(x, "TsparseMatrix")
    if (uniqT) 
        T <- asUniqueT(T, isT = TRUE)
    if (is(T, "nsparseMatrix")) 
        list(i = T@i + 1L, j = T@j + 1L)
    else list(i = T@i + 1L, j = T@j + 1L, x = T@x)
}
<bytecode: 0x55da89162878>
<environment: namespace:Matrix>
> 
> i <- c(1,3:8); j <- c(2,9,6:10); x <- 7 * (1:7)
> (Ax <- sparseMatrix(i, j, x = x)) ##  8 x 10 "dgCMatrix"
8 x 10 sparse Matrix of class "dgCMatrix"
                             
[1,] . 7 . . .  .  .  .  .  .
[2,] . . . . .  .  .  .  .  .
[3,] . . . . .  .  .  . 14  .
[4,] . . . . . 21  .  .  .  .
[5,] . . . . .  . 28  .  .  .
[6,] . . . . .  .  . 35  .  .
[7,] . . . . .  .  .  . 42  .
[8,] . . . . .  .  .  .  . 49
> str(trA <- mat2triplet(Ax))
List of 3
 $ i: int [1:7] 1 4 5 6 3 7 8
 $ j: int [1:7] 2 6 7 8 9 9 10
 $ x: num [1:7] 7 21 28 35 14 42 49
> stopifnot(i == sort(trA$i),  sort(j) == trA$j,  x == sort(trA$x))
> 
> D <- Diagonal(x=4:2)
> summary(D)
3 x 3 diagonal Matrix of class "ddiMatrix"
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    2.0     2.5     3.0     3.0     3.5     4.0 
> str(mat2triplet(D))
List of 3
 $ i: int [1:3] 1 2 3
 $ j: int [1:3] 1 2 3
 $ x: num [1:3] 4 3 2
> 
> 
> 
> cleanEx()
> nameEx("matrix-products")
> ### * matrix-products
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matmult-methods
> ### Title: Matrix (Cross) Products (of Transpose)
> ### Aliases: %*% %*%-methods crossprod crossprod-methods tcrossprod
> ###   tcrossprod-methods matmult-methods %*%,ANY,Matrix-method
> ###   %*%,ANY,sparseVector-method %*%,CsparseMatrix,CsparseMatrix-method
> ###   %*%,CsparseMatrix,RsparseMatrix-method
> ###   %*%,CsparseMatrix,TsparseMatrix-method
> ###   %*%,CsparseMatrix,denseMatrix-method
> ###   %*%,CsparseMatrix,diagonalMatrix-method
> ###   %*%,CsparseMatrix,matrix-method %*%,CsparseMatrix,vector-method
> ###   %*%,Matrix,ANY-method %*%,Matrix,indMatrix-method
> ###   %*%,Matrix,pMatrix-method %*%,Matrix,sparseVector-method
> ###   %*%,RsparseMatrix,CsparseMatrix-method
> ###   %*%,RsparseMatrix,RsparseMatrix-method
> ###   %*%,RsparseMatrix,TsparseMatrix-method
> ###   %*%,RsparseMatrix,denseMatrix-method
> ###   %*%,RsparseMatrix,diagonalMatrix-method
> ###   %*%,RsparseMatrix,matrix-method %*%,RsparseMatrix,vector-method
> ###   %*%,TsparseMatrix,CsparseMatrix-method
> ###   %*%,TsparseMatrix,RsparseMatrix-method
> ###   %*%,TsparseMatrix,TsparseMatrix-method
> ###   %*%,TsparseMatrix,denseMatrix-method
> ###   %*%,TsparseMatrix,diagonalMatrix-method
> ###   %*%,TsparseMatrix,matrix-method %*%,TsparseMatrix,vector-method
> ###   %*%,denseMatrix,CsparseMatrix-method
> ###   %*%,denseMatrix,RsparseMatrix-method
> ###   %*%,denseMatrix,TsparseMatrix-method
> ###   %*%,denseMatrix,denseMatrix-method
> ###   %*%,denseMatrix,diagonalMatrix-method %*%,denseMatrix,matrix-method
> ###   %*%,denseMatrix,vector-method %*%,diagonalMatrix,CsparseMatrix-method
> ###   %*%,diagonalMatrix,RsparseMatrix-method
> ###   %*%,diagonalMatrix,TsparseMatrix-method
> ###   %*%,diagonalMatrix,denseMatrix-method
> ###   %*%,diagonalMatrix,diagonalMatrix-method
> ###   %*%,diagonalMatrix,matrix-method %*%,diagonalMatrix,vector-method
> ###   %*%,indMatrix,Matrix-method %*%,indMatrix,indMatrix-method
> ###   %*%,indMatrix,matrix-method %*%,indMatrix,pMatrix-method
> ###   %*%,indMatrix,vector-method %*%,matrix,CsparseMatrix-method
> ###   %*%,matrix,RsparseMatrix-method %*%,matrix,TsparseMatrix-method
> ###   %*%,matrix,denseMatrix-method %*%,matrix,diagonalMatrix-method
> ###   %*%,matrix,indMatrix-method %*%,matrix,pMatrix-method
> ###   %*%,matrix,sparseVector-method %*%,pMatrix,Matrix-method
> ###   %*%,pMatrix,indMatrix-method %*%,pMatrix,matrix-method
> ###   %*%,pMatrix,pMatrix-method %*%,pMatrix,vector-method
> ###   %*%,sparseVector,ANY-method %*%,sparseVector,Matrix-method
> ###   %*%,sparseVector,matrix-method %*%,sparseVector,sparseVector-method
> ###   %*%,sparseVector,vector-method %*%,vector,CsparseMatrix-method
> ###   %*%,vector,RsparseMatrix-method %*%,vector,TsparseMatrix-method
> ###   %*%,vector,denseMatrix-method %*%,vector,diagonalMatrix-method
> ###   %*%,vector,indMatrix-method %*%,vector,pMatrix-method
> ###   %*%,vector,sparseVector-method crossprod,ANY,Matrix-method
> ###   crossprod,ANY,sparseVector-method
> ###   crossprod,CsparseMatrix,CsparseMatrix-method
> ###   crossprod,CsparseMatrix,RsparseMatrix-method
> ###   crossprod,CsparseMatrix,TsparseMatrix-method
> ###   crossprod,CsparseMatrix,denseMatrix-method
> ###   crossprod,CsparseMatrix,diagonalMatrix-method
> ###   crossprod,CsparseMatrix,matrix-method
> ###   crossprod,CsparseMatrix,missing-method
> ###   crossprod,CsparseMatrix,vector-method crossprod,Matrix,ANY-method
> ###   crossprod,Matrix,indMatrix-method crossprod,Matrix,pMatrix-method
> ###   crossprod,Matrix,sparseVector-method
> ###   crossprod,RsparseMatrix,CsparseMatrix-method
> ###   crossprod,RsparseMatrix,RsparseMatrix-method
> ###   crossprod,RsparseMatrix,TsparseMatrix-method
> ###   crossprod,RsparseMatrix,denseMatrix-method
> ###   crossprod,RsparseMatrix,diagonalMatrix-method
> ###   crossprod,RsparseMatrix,matrix-method
> ###   crossprod,RsparseMatrix,missing-method
> ###   crossprod,RsparseMatrix,vector-method
> ###   crossprod,TsparseMatrix,CsparseMatrix-method
> ###   crossprod,TsparseMatrix,RsparseMatrix-method
> ###   crossprod,TsparseMatrix,TsparseMatrix-method
> ###   crossprod,TsparseMatrix,denseMatrix-method
> ###   crossprod,TsparseMatrix,diagonalMatrix-method
> ###   crossprod,TsparseMatrix,matrix-method
> ###   crossprod,TsparseMatrix,missing-method
> ###   crossprod,TsparseMatrix,vector-method
> ###   crossprod,denseMatrix,CsparseMatrix-method
> ###   crossprod,denseMatrix,RsparseMatrix-method
> ###   crossprod,denseMatrix,TsparseMatrix-method
> ###   crossprod,denseMatrix,denseMatrix-method
> ###   crossprod,denseMatrix,diagonalMatrix-method
> ###   crossprod,denseMatrix,matrix-method
> ###   crossprod,denseMatrix,missing-method
> ###   crossprod,denseMatrix,vector-method
> ###   crossprod,diagonalMatrix,CsparseMatrix-method
> ###   crossprod,diagonalMatrix,RsparseMatrix-method
> ###   crossprod,diagonalMatrix,TsparseMatrix-method
> ###   crossprod,diagonalMatrix,denseMatrix-method
> ###   crossprod,diagonalMatrix,diagonalMatrix-method
> ###   crossprod,diagonalMatrix,matrix-method
> ###   crossprod,diagonalMatrix,missing-method
> ###   crossprod,diagonalMatrix,vector-method
> ###   crossprod,indMatrix,Matrix-method crossprod,indMatrix,matrix-method
> ###   crossprod,indMatrix,missing-method crossprod,indMatrix,vector-method
> ###   crossprod,matrix,CsparseMatrix-method
> ###   crossprod,matrix,RsparseMatrix-method
> ###   crossprod,matrix,TsparseMatrix-method
> ###   crossprod,matrix,denseMatrix-method
> ###   crossprod,matrix,diagonalMatrix-method
> ###   crossprod,matrix,indMatrix-method crossprod,matrix,pMatrix-method
> ###   crossprod,matrix,sparseVector-method crossprod,pMatrix,missing-method
> ###   crossprod,pMatrix,pMatrix-method crossprod,sparseVector,ANY-method
> ###   crossprod,sparseVector,Matrix-method
> ###   crossprod,sparseVector,matrix-method
> ###   crossprod,sparseVector,missing-method
> ###   crossprod,sparseVector,sparseVector-method
> ###   crossprod,sparseVector,vector-method
> ###   crossprod,vector,CsparseMatrix-method
> ###   crossprod,vector,RsparseMatrix-method
> ###   crossprod,vector,TsparseMatrix-method
> ###   crossprod,vector,denseMatrix-method
> ###   crossprod,vector,diagonalMatrix-method
> ###   crossprod,vector,indMatrix-method crossprod,vector,pMatrix-method
> ###   crossprod,vector,sparseVector-method tcrossprod,ANY,Matrix-method
> ###   tcrossprod,ANY,sparseVector-method
> ###   tcrossprod,CsparseMatrix,CsparseMatrix-method
> ###   tcrossprod,CsparseMatrix,RsparseMatrix-method
> ###   tcrossprod,CsparseMatrix,TsparseMatrix-method
> ###   tcrossprod,CsparseMatrix,denseMatrix-method
> ###   tcrossprod,CsparseMatrix,diagonalMatrix-method
> ###   tcrossprod,CsparseMatrix,matrix-method
> ###   tcrossprod,CsparseMatrix,missing-method
> ###   tcrossprod,CsparseMatrix,vector-method tcrossprod,Matrix,ANY-method
> ###   tcrossprod,Matrix,indMatrix-method
> ###   tcrossprod,Matrix,sparseVector-method
> ###   tcrossprod,RsparseMatrix,CsparseMatrix-method
> ###   tcrossprod,RsparseMatrix,RsparseMatrix-method
> ###   tcrossprod,RsparseMatrix,TsparseMatrix-method
> ###   tcrossprod,RsparseMatrix,denseMatrix-method
> ###   tcrossprod,RsparseMatrix,diagonalMatrix-method
> ###   tcrossprod,RsparseMatrix,matrix-method
> ###   tcrossprod,RsparseMatrix,missing-method
> ###   tcrossprod,RsparseMatrix,vector-method
> ###   tcrossprod,TsparseMatrix,CsparseMatrix-method
> ###   tcrossprod,TsparseMatrix,RsparseMatrix-method
> ###   tcrossprod,TsparseMatrix,TsparseMatrix-method
> ###   tcrossprod,TsparseMatrix,denseMatrix-method
> ###   tcrossprod,TsparseMatrix,diagonalMatrix-method
> ###   tcrossprod,TsparseMatrix,matrix-method
> ###   tcrossprod,TsparseMatrix,missing-method
> ###   tcrossprod,TsparseMatrix,vector-method
> ###   tcrossprod,denseMatrix,CsparseMatrix-method
> ###   tcrossprod,denseMatrix,RsparseMatrix-method
> ###   tcrossprod,denseMatrix,TsparseMatrix-method
> ###   tcrossprod,denseMatrix,denseMatrix-method
> ###   tcrossprod,denseMatrix,diagonalMatrix-method
> ###   tcrossprod,denseMatrix,matrix-method
> ###   tcrossprod,denseMatrix,missing-method
> ###   tcrossprod,denseMatrix,vector-method
> ###   tcrossprod,diagonalMatrix,CsparseMatrix-method
> ###   tcrossprod,diagonalMatrix,RsparseMatrix-method
> ###   tcrossprod,diagonalMatrix,TsparseMatrix-method
> ###   tcrossprod,diagonalMatrix,denseMatrix-method
> ###   tcrossprod,diagonalMatrix,diagonalMatrix-method
> ###   tcrossprod,diagonalMatrix,matrix-method
> ###   tcrossprod,diagonalMatrix,missing-method
> ###   tcrossprod,diagonalMatrix,vector-method
> ###   tcrossprod,indMatrix,Matrix-method tcrossprod,indMatrix,matrix-method
> ###   tcrossprod,indMatrix,missing-method
> ###   tcrossprod,indMatrix,vector-method
> ###   tcrossprod,matrix,CsparseMatrix-method
> ###   tcrossprod,matrix,RsparseMatrix-method
> ###   tcrossprod,matrix,TsparseMatrix-method
> ###   tcrossprod,matrix,denseMatrix-method
> ###   tcrossprod,matrix,diagonalMatrix-method
> ###   tcrossprod,matrix,indMatrix-method
> ###   tcrossprod,matrix,sparseVector-method
> ###   tcrossprod,pMatrix,Matrix-method tcrossprod,pMatrix,matrix-method
> ###   tcrossprod,pMatrix,missing-method tcrossprod,pMatrix,pMatrix-method
> ###   tcrossprod,pMatrix,vector-method tcrossprod,sparseVector,ANY-method
> ###   tcrossprod,sparseVector,Matrix-method
> ###   tcrossprod,sparseVector,matrix-method
> ###   tcrossprod,sparseVector,missing-method
> ###   tcrossprod,sparseVector,sparseVector-method
> ###   tcrossprod,sparseVector,vector-method
> ###   tcrossprod,vector,CsparseMatrix-method
> ###   tcrossprod,vector,RsparseMatrix-method
> ###   tcrossprod,vector,TsparseMatrix-method
> ###   tcrossprod,vector,denseMatrix-method
> ###   tcrossprod,vector,diagonalMatrix-method
> ###   tcrossprod,vector,indMatrix-method
> ###   tcrossprod,vector,sparseVector-method
> ### Keywords: algebra arith array
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
>  ## A random sparse "incidence" matrix :
>  m <- matrix(0, 400, 500)
>  set.seed(12)
>  m[runif(314, 0, length(m))] <- 1
>  mm <- as(m, "CsparseMatrix")
>  object.size(m) / object.size(mm) # smaller by a factor of > 200
220.1 bytes
> 
>  ## tcrossprod() is very fast:
>  system.time(tCmm <- tcrossprod(mm))# 0   (PIII, 933 MHz)
   user  system elapsed 
  0.001   0.000   0.002 
>  system.time(cm <- crossprod(t(m))) # 0.16
   user  system elapsed 
  0.010   0.004   0.008 
>  system.time(cm. <- tcrossprod(m))  # 0.02
   user  system elapsed 
  0.015   0.001   0.009 
> 
>  stopifnot(cm == as(tCmm, "matrix"))
> 
>  ## show sparse sub matrix
>  tCmm[1:16, 1:30]
16 x 30 sparse Matrix of class "dgCMatrix"
                                                                 
 [1,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 [2,] . 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 [3,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 [4,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 [5,] . . . . 1 . . . . . . . . . . . . . . . . . . . . . . . . .
 [6,] . . . . . 1 . . . . . . . . . . . . . . . . . . . . . . . .
 [7,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 [8,] . . . . . . . 1 . . . . . . . . . . . . . . . . . . . . . .
 [9,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
[10,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
[11,] . . . . . . . . . . 1 . . . . . . . . . . . . . . . . . . .
[12,] . . . . . . . . . . . 1 . . . . . . . . . . . . . . . . . .
[13,] . . . . . . . . . . . . 1 . . . . . . . . . . . . . . . . .
[14,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
[15,] . . . . . . . . . . . . . . 3 . . . . . . . . . . . . . . .
[16,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
> 
> 
> 
> cleanEx()
> nameEx("nMatrix-class")
> ### * nMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nMatrix-class
> ### Title: Class "nMatrix" of Non-zero Pattern Matrices
> ### Aliases: nMatrix-class Arith,logical,nMatrix-method
> ###   Arith,nMatrix,logical-method Arith,nMatrix,numeric-method
> ###   Arith,numeric,nMatrix-method Compare,logical,nMatrix-method
> ###   Compare,nMatrix,logical-method Compare,nMatrix,nMatrix-method
> ###   Compare,nMatrix,numeric-method Compare,numeric,nMatrix-method
> ###   Logic,logical,nMatrix-method Logic,nMatrix,Matrix-method
> ###   Logic,nMatrix,logical-method Logic,nMatrix,nMatrix-method
> ###   Logic,nMatrix,numeric-method Logic,nMatrix,sparseVector-method
> ###   Logic,numeric,nMatrix-method Ops,nMatrix,dMatrix-method
> ###   Ops,nMatrix,lMatrix-method Ops,nMatrix,nMatrix-method
> ###   Ops,nMatrix,numeric-method Ops,numeric,nMatrix-method
> ###   coerce,matrix,nMatrix-method coerce,vector,nMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> getClass("nMatrix")
Virtual Class "nMatrix" [package "Matrix"]

Slots:
                        
Name:       Dim Dimnames
Class:  integer     list

Extends: 
Class "Matrix", directly
Class "replValueSp", by class "Matrix", distance 2

Known Subclasses: 
Class "ndenseMatrix", directly
Class "nsparseMatrix", directly
Class "ndiMatrix", directly
Class "ngeMatrix", by class "ndenseMatrix", distance 2
Class "ntrMatrix", by class "ndenseMatrix", distance 2
Class "nsyMatrix", by class "ndenseMatrix", distance 2
Class "ntpMatrix", by class "ndenseMatrix", distance 2
Class "nspMatrix", by class "ndenseMatrix", distance 2
Class "ngCMatrix", by class "nsparseMatrix", distance 2
Class "ntCMatrix", by class "nsparseMatrix", distance 2
Class "nsCMatrix", by class "nsparseMatrix", distance 2
Class "ngRMatrix", by class "nsparseMatrix", distance 2
Class "ntRMatrix", by class "nsparseMatrix", distance 2
Class "nsRMatrix", by class "nsparseMatrix", distance 2
Class "ngTMatrix", by class "nsparseMatrix", distance 2
Class "ntTMatrix", by class "nsparseMatrix", distance 2
Class "nsTMatrix", by class "nsparseMatrix", distance 2
> 
> L3 <- Matrix(upper.tri(diag(3)))
> L3 # an "ltCMatrix"
3 x 3 sparse Matrix of class "ltCMatrix"
          
[1,] . | |
[2,] . . |
[3,] . . .
> as(L3, "nMatrix") # -> ntC*
3 x 3 sparse Matrix of class "ntCMatrix"
          
[1,] . | |
[2,] . . |
[3,] . . .
> 
> ## similar, not using Matrix()
> as(upper.tri(diag(3)), "nMatrix")# currently "ngTMatrix"
3 x 3 sparse Matrix of class "ntCMatrix"
          
[1,] . | |
[2,] . . |
[3,] . . .
> 
> 
> 
> cleanEx()
> nameEx("ndenseMatrix-class")
> ### * ndenseMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ndenseMatrix-class
> ### Title: Virtual Class "ndenseMatrix" of Dense Logical Matrices
> ### Aliases: ndenseMatrix-class !,ndenseMatrix-method
> ###   &,ndenseMatrix,ddiMatrix-method &,ndenseMatrix,ldiMatrix-method
> ###   &,ndenseMatrix,ndiMatrix-method *,ndenseMatrix,ddiMatrix-method
> ###   *,ndenseMatrix,ldiMatrix-method *,ndenseMatrix,ndiMatrix-method
> ###   Ops,ndenseMatrix,ndenseMatrix-method ^,ndenseMatrix,ddiMatrix-method
> ###   ^,ndenseMatrix,ldiMatrix-method ^,ndenseMatrix,ndiMatrix-method
> ###   coerce,matrix,ndenseMatrix-method coerce,vector,ndenseMatrix-method
> ###   which,ndenseMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("ndenseMatrix")
Virtual Class "ndenseMatrix" [package "Matrix"]

Slots:
                                 
Name:         x      Dim Dimnames
Class:  logical  integer     list

Extends: 
Class "nMatrix", directly
Class "denseMatrix", directly
Class "Matrix", by class "nMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 3

Known Subclasses: "ngeMatrix", "ntrMatrix", "nsyMatrix", "ntpMatrix", "nspMatrix"
> 
> as(diag(3) > 0, "ndenseMatrix")# -> "nge"
3 x 3 Matrix of class "nsyMatrix"
      [,1]  [,2]  [,3]
[1,]  TRUE FALSE FALSE
[2,] FALSE  TRUE FALSE
[3,] FALSE FALSE  TRUE
> 
> 
> 
> cleanEx()
> nameEx("nearPD")
> ### * nearPD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nearPD
> ### Title: Nearest Positive Definite Matrix
> ### Aliases: nearPD
> ### Keywords: algebra array utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(    stats, pos = "package:base", verbose = FALSE)
> library( graphics, pos = "package:base", verbose = FALSE)
> library(grDevices, pos = "package:base", verbose = FALSE)
> library(    utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
>  ## Higham(2002), p.334f - simple example
>  A <- matrix(1, 3,3); A[1,3] <- A[3,1] <- 0
>  n.A <- nearPD(A, corr=TRUE, do2eigen=FALSE)
>  n.A[c("mat", "normF")]
$mat
3 x 3 Matrix of class "dpoMatrix"
          [,1]      [,2]      [,3]
[1,] 1.0000000 0.7606899 0.1572981
[2,] 0.7606899 1.0000000 0.7606899
[3,] 0.1572981 0.7606899 1.0000000

$normF
[1] 0.5277903

>  n.A.m <- nearPD(A, corr=TRUE, do2eigen=FALSE, base.matrix=TRUE)$mat
>  stopifnot(exprs = {                           #=--------------
+    all.equal(n.A$mat[1,2], 0.760689917)
+    all.equal(n.A$normF, 0.52779033, tolerance=1e-9)
+    all.equal(n.A.m, unname(as.matrix(n.A$mat)), tolerance = 1e-15)# seen rel.d.= 1.46e-16
+  })
>  set.seed(27)
>  m <- matrix(round(rnorm(25),2), 5, 5)
>  m <- m + t(m)
>  diag(m) <- pmax(0, diag(m)) + 1
>  (m <- round(cov2cor(m), 2))
      [,1]  [,2]  [,3]  [,4]  [,5]
[1,]  1.00  0.65 -0.46 -1.15 -0.76
[2,]  0.65  1.00  0.58  0.50 -0.90
[3,] -0.46  0.58  1.00 -0.45 -0.32
[4,] -1.15  0.50 -0.45  1.00  0.25
[5,] -0.76 -0.90 -0.32  0.25  1.00
> 
>  str(near.m <- nearPD(m, trace = TRUE))
iter   1 : #{p}=4, ||Y-X|| / ||Y||=    0.268591
iter   2 : #{p}=4, ||Y-X|| / ||Y||=           0
List of 7
 $ mat        :Formal class 'dpoMatrix' [package "Matrix"] with 5 slots
  .. ..@ Dim     : int [1:2] 5 5
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:25] 1.313 0.406 -0.242 -0.852 -0.753 ...
  .. ..@ uplo    : chr "U"
  .. ..@ factors : list()
 $ eigenvalues: num [1:5] 2.80 1.83 1.23 7.70e-02 2.80e-08
 $ corr       : logi FALSE
 $ normF      : num 0.938
 $ iterations : int 2
 $ rel.tol    : num 0
 $ converged  : logi TRUE
 - attr(*, "class")= chr "nearPD"
>  round(near.m$mat, 2)
5 x 5 Matrix of class "dsyMatrix"
      [,1]  [,2]  [,3]  [,4]  [,5]
[1,]  1.31  0.41 -0.24 -0.85 -0.75
[2,]  0.41  1.19  0.41  0.27 -0.91
[3,] -0.24  0.41  1.15 -0.24 -0.32
[4,] -0.85  0.27 -0.24  1.28  0.26
[5,] -0.75 -0.91 -0.32  0.26  1.00
>  norm(m - near.m$mat) # 1.102 / 1.08
[1] 1.079735
> 
>  if(requireNamespace("sfsmisc")) {
+     m2 <- sfsmisc::posdefify(m) # a simpler approach
+     norm(m - m2)  # 1.185, i.e., slightly "less near"
+  }
Loading required namespace: sfsmisc
Failed with error:  ‘there is no package called ‘sfsmisc’’
> 
>  round(nearPD(m, only.values=TRUE), 9)
[1] 2.800681404 1.831722441 1.229003616 0.076994641 0.000000028
> 
> ## A longer example, extended from Jens' original,
> ## showing the effects of some of the options:
> 
> pr <- Matrix(c(1,     0.477, 0.644, 0.478, 0.651, 0.826,
+                0.477, 1,     0.516, 0.233, 0.682, 0.75,
+                0.644, 0.516, 1,     0.599, 0.581, 0.742,
+                0.478, 0.233, 0.599, 1,     0.741, 0.8,
+                0.651, 0.682, 0.581, 0.741, 1,     0.798,
+                0.826, 0.75,  0.742, 0.8,   0.798, 1),
+              nrow = 6, ncol = 6)
> 
> nc.  <- nearPD(pr, conv.tol = 1e-7) # default
> nc.$iterations  # 2
[1] 2
> nc.1 <- nearPD(pr, conv.tol = 1e-7, corr = TRUE)
> nc.1$iterations # 11 / 12 (!)
[1] 12
> ncr   <- nearPD(pr, conv.tol = 1e-15)
> str(ncr)# still 2 iterations
List of 7
 $ mat        :Formal class 'dpoMatrix' [package "Matrix"] with 5 slots
  .. ..@ Dim     : int [1:2] 6 6
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:36] 1.006 0.485 0.643 0.487 0.646 ...
  .. ..@ uplo    : chr "U"
  .. ..@ factors : list()
 $ eigenvalues: num [1:6] 4.213 0.771 0.515 0.385 0.178 ...
 $ corr       : logi FALSE
 $ normF      : num 0.0626
 $ iterations : int 2
 $ rel.tol    : num 0
 $ converged  : logi TRUE
 - attr(*, "class")= chr "nearPD"
> ncr.1 <- nearPD(pr, conv.tol = 1e-15, corr = TRUE)
> ncr.1 $ iterations # 27 / 30 !
[1] 30
> 
> ncF <- nearPD(pr, conv.tol = 1e-15, conv.norm = "F")
> stopifnot(all.equal(ncr, ncF))# norm type does not matter at all in this example
> 
> ## But indeed, the 'corr = TRUE' constraint did ensure a better solution;
> ## cov2cor() does not just fix it up equivalently :
> norm(pr - cov2cor(ncr$mat)) # = 0.09994
[1] 0.09994443
> norm(pr -       ncr.1$mat)  # = 0.08746 / 0.08805
[1] 0.08804689
> 
> ### 3) a real data example from a 'systemfit' model (3 eq.):
> (load(system.file("external", "symW.rda", package="Matrix"))) # "symW"
[1] "symW"
> dim(symW) #  24 x 24
[1] 24 24
> class(symW)# "dsCMatrix": sparse symmetric
[1] "dsCMatrix"
attr(,"package")
[1] "Matrix"
> if(dev.interactive())  image(symW)
> EV <- eigen(symW, only=TRUE)$values
> summary(EV) ## looking more closely {EV sorted decreasingly}:
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
        0        37       999  11031812      5536 177467251 
> tail(EV)# all 6 are negative
[1] -1.615418e-05 -4.803894e-05 -9.448841e-05 -8.402689e-04 -1.658025e-03
[6] -5.476273e-03
> EV2 <- eigen(sWpos <- nearPD(symW)$mat, only=TRUE)$values
> stopifnot(EV2 > 0)
> if(requireNamespace("sfsmisc")) {
+     plot(pmax(1e-3,EV), EV2, type="o", log="xy", xaxt="n", yaxt="n")
+     for(side in 1:2) sfsmisc::eaxis(side)
+ } else
+     plot(pmax(1e-3,EV), EV2, type="o", log="xy")
Loading required namespace: sfsmisc
Failed with error:  ‘there is no package called ‘sfsmisc’’
> abline(0, 1, col="red3", lty=2)
> 
> 
> 
> cleanEx()
> nameEx("ngeMatrix-class")
> ### * ngeMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ngeMatrix-class
> ### Title: Class "ngeMatrix" of General Dense Nonzero-pattern Matrices
> ### Aliases: ngeMatrix-class Arith,ngeMatrix,ngeMatrix-method
> ###   Compare,ngeMatrix,ngeMatrix-method Logic,ngeMatrix,ngeMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("ngeMatrix")
Class "ngeMatrix" [package "Matrix"]

Slots:
                                          
Name:       Dim Dimnames        x  factors
Class:  integer     list  logical     list

Extends: 
Class "unpackedMatrix", directly
Class "ndenseMatrix", directly
Class "generalMatrix", directly
Class "nMatrix", by class "ndenseMatrix", distance 2
Class "denseMatrix", by class "ndenseMatrix", distance 2
Class "compMatrix", by class "generalMatrix", distance 2
Class "Matrix", by class "unpackedMatrix", distance 3
Class "replValueSp", by class "Matrix", distance 4
> ## "lgeMatrix" is really more relevant
> 
> 
> 
> cleanEx()
> nameEx("nnzero")
> ### * nnzero
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nnzero-methods
> ### Title: The Number of Non-Zero Values of a Matrix
> ### Aliases: nnzero nnzero-methods nnzero,ANY-method
> ###   nnzero,CHMfactor-method nnzero,denseMatrix-method
> ###   nnzero,diagonalMatrix-method nnzero,indMatrix-method
> ###   nnzero,sparseMatrix-method nnzero,vector-method
> ### Keywords: array logic methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> m <- Matrix(0+1:28, nrow = 4)
> m[-3,c(2,4:5,7)] <- m[ 3, 1:4] <- m[1:3, 6] <- 0
> (mT <- as(m, "TsparseMatrix"))
4 x 7 sparse Matrix of class "dgTMatrix"
                      
[1,] 1 .  9 .  .  .  .
[2,] 2 . 10 .  .  .  .
[3,] . .  . . 19  . 27
[4,] 4 . 12 .  . 24  .
> nnzero(mT)
[1] 9
> (S <- crossprod(mT))
7 x 7 sparse Matrix of class "dsCMatrix"
                           
[1,] 21 .  77 .   .  96   .
[2,]  . .   . .   .   .   .
[3,] 77 . 325 .   . 288   .
[4,]  . .   . .   .   .   .
[5,]  . .   . . 361   . 513
[6,] 96 . 288 .   . 576   .
[7,]  . .   . . 513   . 729
> nnzero(S)
[1] 13
> str(S) # slots are smaller than nnzero()
Formal class 'dsCMatrix' [package "Matrix"] with 7 slots
  ..@ i       : int [1:9] 0 0 2 4 0 2 5 4 6
  ..@ p       : int [1:8] 0 1 1 3 3 4 7 9
  ..@ Dim     : int [1:2] 7 7
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:9] 21 77 325 361 96 288 576 513 729
  ..@ uplo    : chr "U"
  ..@ factors : list()
> stopifnot(nnzero(S) == sum(as.matrix(S) != 0))# failed earlier
> 
> data(KNex, package = "Matrix")
> M <- KNex$mm
> class(M)
[1] "dgCMatrix"
attr(,"package")
[1] "Matrix"
> dim(M)
[1] 1850  712
> length(M); stopifnot(length(M) == prod(dim(M)))
[1] 1317200
> nnzero(M) # more relevant than length
[1] 8755
> ## the above are also visible from
> str(M)
Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:8755] 0 2 25 27 163 165 1258 1261 1276 1278 ...
  ..@ p       : int [1:713] 0 13 17 26 38 43 52 56 61 67 ...
  ..@ Dim     : int [1:2] 1850 712
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:8755] 0.277 0.277 0.277 0.277 0.277 ...
  ..@ factors : list()
> 
> 
> 
> cleanEx()
> nameEx("norm")
> ### * norm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: norm-methods
> ### Title: Matrix Norms
> ### Aliases: norm norm-methods norm,ANY,missing-method
> ###   norm,denseMatrix,character-method
> ###   norm,diagonalMatrix,character-method norm,indMatrix,character-method
> ###   norm,pMatrix,character-method norm,sparseMatrix,character-method
> ### Keywords: algebra math methods
> 
> ### ** Examples
> 
> x <- Hilbert(9)
> norm(x)# = "O" = "1"
[1] 2.828968
> stopifnot(identical(norm(x), norm(x, "1")))
> norm(x, "I")# the same, because 'x' is symmetric
[1] 2.828968
> 
> allnorms <- function(x) {
+     ## norm(NA, "2") did not work until R 4.0.0
+     do2 <- getRversion() >= "4.0.0" || !anyNA(x)
+     vapply(c("1", "I", "F", "M", if(do2) "2"), norm, 0, x = x)
+ }
> allnorms(x)
       1        I        F        M        2 
2.828968 2.828968 1.755872 1.000000 1.725883 
> allnorms(Hilbert(10))
       1        I        F        M        2 
2.928968 2.928968 1.785527 1.000000 1.751920 
> 
> i <- c(1,3:8); j <- c(2,9,6:10); x <- 7 * (1:7)
> A <- sparseMatrix(i, j, x = x)                      ##  8 x 10 "dgCMatrix"
> (sA <- sparseMatrix(i, j, x = x, symmetric = TRUE)) ## 10 x 10 "dsCMatrix"
10 x 10 sparse Matrix of class "dsCMatrix"
                                 
 [1,] . 7  .  .  .  .  .  .  .  .
 [2,] 7 .  .  .  .  .  .  .  .  .
 [3,] . .  .  .  .  .  .  . 14  .
 [4,] . .  .  .  . 21  .  .  .  .
 [5,] . .  .  .  .  . 28  .  .  .
 [6,] . .  . 21  .  .  . 35  .  .
 [7,] . .  .  . 28  .  .  . 42  .
 [8,] . .  .  .  . 35  .  .  . 49
 [9,] . . 14  .  .  . 42  .  .  .
[10,] . .  .  .  .  .  . 49  .  .
> (tA <- sparseMatrix(i, j, x = x, triangular= TRUE)) ## 10 x 10 "dtCMatrix"
10 x 10 sparse Matrix of class "dtCMatrix"
                              
 [1,] . 7 . . .  .  .  .  .  .
 [2,] . . . . .  .  .  .  .  .
 [3,] . . . . .  .  .  . 14  .
 [4,] . . . . . 21  .  .  .  .
 [5,] . . . . .  . 28  .  .  .
 [6,] . . . . .  .  . 35  .  .
 [7,] . . . . .  .  .  . 42  .
 [8,] . . . . .  .  .  .  . 49
 [9,] . . . . .  .  .  .  .  .
[10,] . . . . .  .  .  .  .  .
> (allnorms(A) -> nA)
Warning in FUN(X[[i]], ...) : 'norm' via sparse -> dense coercion
       1        I        F        M        2 
56.00000 49.00000 82.82512 49.00000 49.00000 
> allnorms(sA)
Warning in FUN(X[[i]], ...) : 'norm' via sparse -> dense coercion
        1         I         F         M         2 
 84.00000  84.00000 117.13240  49.00000  61.54212 
> allnorms(tA)
Warning in FUN(X[[i]], ...) : 'norm' via sparse -> dense coercion
       1        I        F        M        2 
56.00000 49.00000 82.82512 49.00000 49.00000 
> stopifnot(all.equal(nA, allnorms(as(A, "matrix"))),
+ 	  all.equal(nA, allnorms(tA))) # because tA == rbind(A, 0, 0)
Warning in FUN(X[[i]], ...) : 'norm' via sparse -> dense coercion
> A. <- A; A.[1,3] <- NA
> stopifnot(is.na(allnorms(A.))) # gave error
Warning in FUN(X[[i]], ...) : 'norm' via sparse -> dense coercion
> 
> 
> 
> cleanEx()
> nameEx("nsparseMatrix-classes")
> ### * nsparseMatrix-classes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nsparseMatrix-classes
> ### Title: Sparse "pattern" Matrices
> ### Aliases: nsparseMatrix-class ngCMatrix-class ngRMatrix-class
> ###   ngTMatrix-class ntCMatrix-class ntRMatrix-class ntTMatrix-class
> ###   nsCMatrix-class nsRMatrix-class nsTMatrix-class
> ###   !,nsparseMatrix-method -,nsparseMatrix,missing-method
> ###   Arith,nsparseMatrix,Matrix-method
> ###   Arith,dsparseMatrix,nsparseMatrix-method
> ###   Arith,lsparseMatrix,nsparseMatrix-method
> ###   Arith,nsparseMatrix,dsparseMatrix-method
> ###   Arith,nsparseMatrix,lsparseMatrix-method
> ###   Ops,nsparseMatrix,dsparseMatrix-method
> ###   Ops,nsparseMatrix,lsparseMatrix-method
> ###   Ops,nsparseMatrix,sparseMatrix-method
> ###   coerce,matrix,nsparseMatrix-method
> ###   coerce,nsparseMatrix,indMatrix-method
> ###   coerce,nsparseMatrix,pMatrix-method
> ###   coerce,vector,nsparseMatrix-method which,nsparseMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (m <- Matrix(c(0,0,2:0), 3,5, dimnames=list(LETTERS[1:3],NULL)))
3 x 5 sparse Matrix of class "dgCMatrix"
           
A . 1 . . 2
B . . 2 . 1
C 2 . 1 . .
> ## ``extract the nonzero-pattern of (m) into an nMatrix'':
> nm <- as(m, "nsparseMatrix") ## -> will be a "ngCMatrix"
> str(nm) # no 'x' slot
Formal class 'ngCMatrix' [package "Matrix"] with 5 slots
  ..@ i       : int [1:6] 2 0 1 2 0 1
  ..@ p       : int [1:6] 0 1 2 4 4 6
  ..@ Dim     : int [1:2] 3 5
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:3] "A" "B" "C"
  .. ..$ : NULL
  ..@ factors : list()
> nnm <- !nm # no longer sparse
> ## consistency check:
> stopifnot(xor(as( nm, "matrix"),
+               as(nnm, "matrix")))
> 
> ## low-level way of adding "non-structural zeros" :
> nnm <- as(nnm, "lsparseMatrix") # "lgCMatrix"
> nnm@x[2:4] <- c(FALSE, NA, NA)
> nnm
3 x 5 sparse Matrix of class "lgCMatrix"
           
A | . | | .
B : N . | .
C . N . | |
> as(nnm, "nMatrix") # NAs *and* non-structural 0  |--->  'TRUE'
3 x 5 sparse Matrix of class "ngCMatrix"
           
A | . | | .
B | | . | .
C . | . | |
> 
> data(KNex, package = "Matrix")
> nmm <- as(KNex $ mm, "nMatrix")
> str(xlx <- crossprod(nmm))# "nsCMatrix"
Formal class 'nsCMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:4918] 0 1 2 3 4 5 6 7 8 9 ...
  ..@ p       : int [1:713] 0 1 2 3 4 5 6 7 8 9 ...
  ..@ Dim     : int [1:2] 712 712
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ uplo    : chr "U"
  ..@ factors : list()
> stopifnot(isSymmetric(xlx))
> image(xlx, main=paste("crossprod(nmm) : Sparse", class(xlx)))
> 
> 
> 
> cleanEx()
> nameEx("nsyMatrix-class")
> ### * nsyMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nsyMatrix-class
> ### Title: Symmetric Dense Nonzero-Pattern Matrices
> ### Aliases: nsyMatrix-class nspMatrix-class
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (s0 <- new("nsyMatrix"))
0 x 0 Matrix of class "nsyMatrix"
<0 x 0 matrix>
> 
> (M2 <- Matrix(c(TRUE, NA, FALSE, FALSE), 2, 2)) # logical dense (ltr)
2 x 2 Matrix of class "ltrMatrix"
     [,1]  [,2] 
[1,]  TRUE     .
[2,]    NA FALSE
> (sM <- M2 & t(M2))                       # -> "lge"
2 x 2 Matrix of class "lgeMatrix"
      [,1]  [,2]
[1,]  TRUE FALSE
[2,] FALSE FALSE
> class(sM <- as(sM, "nMatrix"))           # -> "nge"
[1] "ngeMatrix"
attr(,"package")
[1] "Matrix"
>      (sM <- as(sM, "symmetricMatrix"))   # -> "nsy"
2 x 2 Matrix of class "nsyMatrix"
      [,1]  [,2]
[1,]  TRUE FALSE
[2,] FALSE FALSE
> str(sM <- as(sM, "packedMatrix")) # -> "nsp", i.e., packed symmetric
Formal class 'nspMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 2 2
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : logi [1:3] TRUE FALSE FALSE
  ..@ factors : list()
> 
> 
> 
> cleanEx()
> nameEx("ntrMatrix-class")
> ### * ntrMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ntrMatrix-class
> ### Title: Triangular Dense Logical Matrices
> ### Aliases: ntrMatrix-class ntpMatrix-class
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("ntrMatrix")
Class "ntrMatrix" [package "Matrix"]

Slots:
                                                        
Name:        Dim  Dimnames         x      uplo      diag
Class:   integer      list   logical character character

Extends: 
Class "unpackedMatrix", directly
Class "ndenseMatrix", directly
Class "triangularMatrix", directly
Class "nMatrix", by class "ndenseMatrix", distance 2
Class "denseMatrix", by class "ndenseMatrix", distance 2
Class "Matrix", by class "triangularMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 4
> 
> str(new("ntpMatrix"))
Formal class 'ntpMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 0 0
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : logi(0) 
  ..@ diag    : chr "N"
> (nutr <- as(upper.tri(matrix(, 4, 4)), "ndenseMatrix"))
4 x 4 Matrix of class "ntrMatrix"
     [,1]  [,2]  [,3]  [,4] 
[1,] FALSE  TRUE  TRUE  TRUE
[2,]     . FALSE  TRUE  TRUE
[3,]     .     . FALSE  TRUE
[4,]     .     .     . FALSE
> str(nutp <- pack(nutr)) # packed matrix: only 10 = 4*(4+1)/2 entries
Formal class 'ntpMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 4 4
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : logi [1:10] FALSE TRUE FALSE TRUE TRUE FALSE ...
  ..@ diag    : chr "N"
> !nutp # the logical negation (is *not* logical triangular !)
4 x 4 Matrix of class "ngeMatrix"
     [,1]  [,2]  [,3]  [,4]
[1,] TRUE FALSE FALSE FALSE
[2,] TRUE  TRUE FALSE FALSE
[3,] TRUE  TRUE  TRUE FALSE
[4,] TRUE  TRUE  TRUE  TRUE
> ## but this one is:
> stopifnot(all.equal(nutp, pack(!!nutp)))
> 
> 
> 
> cleanEx()
> nameEx("number-class")
> ### * number-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: number-class
> ### Title: Class "number" of Possibly Complex Numbers
> ### Aliases: number-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("number")
Virtual Class "number" [package "Matrix"]

No Slots, prototype of class "numeric"

Known Subclasses: 
Class "numeric", directly
Class "complex", directly
Class "integer", by class "numeric", distance 2
Class "double", by class "numeric", distance 2
Class "factor", by class "numeric", distance 3
Class "ordered", by class "numeric", distance 4
> stopifnot( is(1i, "number"), is(pi, "number"), is(1:3, "number") )
> 
> 
> 
> cleanEx()
> nameEx("pMatrix-class")
> ### * pMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pMatrix-class
> ### Title: Permutation matrices
> ### Aliases: pMatrix-class coerce,matrix,pMatrix-method
> ###   coerce,numeric,pMatrix-method determinant,pMatrix,logical-method
> ###   t,pMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> (pm1 <- as(as.integer(c(2,3,1)), "pMatrix"))
3 x 3 sparse Matrix of class "pMatrix"
          
[1,] . | .
[2,] . . |
[3,] | . .
> t(pm1) # is the same as
3 x 3 sparse Matrix of class "pMatrix"
          
[1,] . . |
[2,] | . .
[3,] . | .
> solve(pm1)
3 x 3 sparse Matrix of class "pMatrix"
          
[1,] . . |
[2,] | . .
[3,] . | .
> pm1 %*% t(pm1) # check that the transpose is the inverse
3 x 3 sparse Matrix of class "pMatrix"
          
[1,] | . .
[2,] . | .
[3,] . . |
> stopifnot(all(diag(3) == as(pm1 %*% t(pm1), "matrix")),
+           is.logical(as(pm1, "matrix")))
> 
> set.seed(11)
> ## random permutation matrix :
> (p10 <- as(sample(10),"pMatrix"))
10 x 10 sparse Matrix of class "pMatrix"
                         
 [1,] . . . . . . . . . |
 [2,] . | . . . . . . . .
 [3,] . . . . . . . | . .
 [4,] | . . . . . . . . .
 [5,] . . . . . . | . . .
 [6,] . . . . | . . . . .
 [7,] . . . | . . . . . .
 [8,] . . . . . . . . | .
 [9,] . . | . . . . . . .
[10,] . . . . . | . . . .
> 
> ## Permute rows / columns of a numeric matrix :
> (mm <- round(array(rnorm(3 * 3), c(3, 3)), 2))
      [,1]  [,2]  [,3]
[1,] -0.15 -0.44 -0.38
[2,]  1.04 -0.05 -0.04
[3,]  0.19  0.47 -2.14
> mm %*% pm1
3 x 3 Matrix of class "dgeMatrix"
      [,1]  [,2]  [,3]
[1,] -0.38 -0.15 -0.44
[2,] -0.04  1.04 -0.05
[3,] -2.14  0.19  0.47
> pm1 %*% mm
3 x 3 Matrix of class "dgeMatrix"
      [,1]  [,2]  [,3]
[1,]  1.04 -0.05 -0.04
[2,]  0.19  0.47 -2.14
[3,] -0.15 -0.44 -0.38
> try(as(as.integer(c(3,3,1)), "pMatrix"))# Error: not a permutation
Error in .perm2ind(from, check.p = 2L) : 
  'perm' is not a permutation of seq_len(max(perm, 0))
> 
> as(pm1, "TsparseMatrix")
3 x 3 sparse Matrix of class "ngTMatrix"
          
[1,] . | .
[2,] . . |
[3,] | . .
> p10[1:7, 1:4] # gives an "ngTMatrix" (most economic!)
7 x 4 sparse Matrix of class "ngCMatrix"
            
[1,] . . . .
[2,] . | . .
[3,] . . . .
[4,] | . . .
[5,] . . . .
[6,] . . . .
[7,] . . . |
> 
> ## row-indexing of a <pMatrix> keeps it as an <indMatrix>:
> p10[1:3, ]
3 x 10 sparse Matrix of class "indMatrix"
                        
[1,] . . . . . . . . . |
[2,] . | . . . . . . . .
[3,] . . . . . . . | . .
> 
> 
> 
> cleanEx()
> nameEx("packedMatrix-class")
> ### * packedMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: packedMatrix-class
> ### Title: Virtual Class '"packedMatrix"' of Packed Dense Matrices
> ### Aliases: packedMatrix-class coerce,matrix,packedMatrix-method
> ###   cov2cor,packedMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("packedMatrix")
Virtual Class "packedMatrix" [package "Matrix"]

Slots:
                                    
Name:       uplo       Dim  Dimnames
Class: character   integer      list

Extends: 
Class "denseMatrix", directly
Class "Matrix", by class "denseMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 3

Known Subclasses: 
Class "ntpMatrix", directly
Class "nspMatrix", directly
Class "ltpMatrix", directly
Class "lspMatrix", directly
Class "dtpMatrix", directly
Class "dspMatrix", directly
Class "dppMatrix", by class "dspMatrix", distance 2
Class "pcorMatrix", by class "dppMatrix", distance 3
> showMethods(classes = "packedMatrix")
Function: coerce (package methods)
from="Matrix", to="packedMatrix"
from="dtpMatrix", to="packedMatrix"
from="generalMatrix", to="packedMatrix"
from="lgeMatrix", to="packedMatrix"
    (inherited from: from="generalMatrix", to="packedMatrix")
from="lspMatrix", to="packedMatrix"
from="matrix", to="packedMatrix"
from="nsyMatrix", to="packedMatrix"
    (inherited from: from="Matrix", to="packedMatrix")

Function: cov2cor (package stats)
V="packedMatrix"

Function: pack (package Matrix)
x="packedMatrix"

Function: unpack (package Matrix)
x="packedMatrix"

> 
> 
> 
> cleanEx()
> nameEx("printSpMatrix")
> ### * printSpMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: printSpMatrix
> ### Title: Format and Print Sparse Matrices Flexibly
> ### Aliases: formatSpMatrix printSpMatrix printSpMatrix2
> ### Keywords: character print utilities
> 
> ### ** Examples
> 
> f1 <- gl(5, 3, labels = LETTERS[1:5])
> X <- as(f1, "sparseMatrix")
> X ## <==>  show(X)  <==>  print(X)
5 x 15 sparse Matrix of class "dgCMatrix"
                               
A 1 1 1 . . . . . . . . . . . .
B . . . 1 1 1 . . . . . . . . .
C . . . . . . 1 1 1 . . . . . .
D . . . . . . . . . 1 1 1 . . .
E . . . . . . . . . . . . 1 1 1
> t(X) ## shows column names, since only 5 columns
15 x 5 sparse Matrix of class "dgCMatrix"
      A B C D E
 [1,] 1 . . . .
 [2,] 1 . . . .
 [3,] 1 . . . .
 [4,] . 1 . . .
 [5,] . 1 . . .
 [6,] . 1 . . .
 [7,] . . 1 . .
 [8,] . . 1 . .
 [9,] . . 1 . .
[10,] . . . 1 .
[11,] . . . 1 .
[12,] . . . 1 .
[13,] . . . . 1
[14,] . . . . 1
[15,] . . . . 1
> 
> X2 <- as(gl(12, 3, labels = paste(LETTERS[1:12],"c",sep=".")),
+          "sparseMatrix")
> X2
12 x 36 sparse Matrix of class "dgCMatrix"
                                                                           
A.c 1 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
B.c . . . 1 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
C.c . . . . . . 1 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . .
D.c . . . . . . . . . 1 1 1 . . . . . . . . . . . . . . . . . . . . . . . .
E.c . . . . . . . . . . . . 1 1 1 . . . . . . . . . . . . . . . . . . . . .
F.c . . . . . . . . . . . . . . . 1 1 1 . . . . . . . . . . . . . . . . . .
G.c . . . . . . . . . . . . . . . . . . 1 1 1 . . . . . . . . . . . . . . .
H.c . . . . . . . . . . . . . . . . . . . . . 1 1 1 . . . . . . . . . . . .
I.c . . . . . . . . . . . . . . . . . . . . . . . . 1 1 1 . . . . . . . . .
J.c . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 1 . . . . . .
K.c . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 1 . . .
L.c . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 1
> ## less nice, but possible:
> print(X2, col.names = TRUE) # use [,1] [,2] .. => does not fit
12 x 36 sparse Matrix of class "dgCMatrix"
    [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]
A.c    1    1    1    .    .    .    .    .    .     .     .     .     .     .
B.c    .    .    .    1    1    1    .    .    .     .     .     .     .     .
C.c    .    .    .    .    .    .    1    1    1     .     .     .     .     .
D.c    .    .    .    .    .    .    .    .    .     1     1     1     .     .
E.c    .    .    .    .    .    .    .    .    .     .     .     .     1     1
F.c    .    .    .    .    .    .    .    .    .     .     .     .     .     .
G.c    .    .    .    .    .    .    .    .    .     .     .     .     .     .
H.c    .    .    .    .    .    .    .    .    .     .     .     .     .     .
I.c    .    .    .    .    .    .    .    .    .     .     .     .     .     .
J.c    .    .    .    .    .    .    .    .    .     .     .     .     .     .
K.c    .    .    .    .    .    .    .    .    .     .     .     .     .     .
L.c    .    .    .    .    .    .    .    .    .     .     .     .     .     .
    [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26]
A.c     .     .     .     .     .     .     .     .     .     .     .     .
B.c     .     .     .     .     .     .     .     .     .     .     .     .
C.c     .     .     .     .     .     .     .     .     .     .     .     .
D.c     .     .     .     .     .     .     .     .     .     .     .     .
E.c     1     .     .     .     .     .     .     .     .     .     .     .
F.c     .     1     1     1     .     .     .     .     .     .     .     .
G.c     .     .     .     .     1     1     1     .     .     .     .     .
H.c     .     .     .     .     .     .     .     1     1     1     .     .
I.c     .     .     .     .     .     .     .     .     .     .     1     1
J.c     .     .     .     .     .     .     .     .     .     .     .     .
K.c     .     .     .     .     .     .     .     .     .     .     .     .
L.c     .     .     .     .     .     .     .     .     .     .     .     .
    [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36]
A.c     .     .     .     .     .     .     .     .     .     .
B.c     .     .     .     .     .     .     .     .     .     .
C.c     .     .     .     .     .     .     .     .     .     .
D.c     .     .     .     .     .     .     .     .     .     .
E.c     .     .     .     .     .     .     .     .     .     .
F.c     .     .     .     .     .     .     .     .     .     .
G.c     .     .     .     .     .     .     .     .     .     .
H.c     .     .     .     .     .     .     .     .     .     .
I.c     1     .     .     .     .     .     .     .     .     .
J.c     .     1     1     1     .     .     .     .     .     .
K.c     .     .     .     .     1     1     1     .     .     .
L.c     .     .     .     .     .     .     .     1     1     1
> 
> ## Possibilities with column names printing:
>       t(X2) # suppressing column names
36 x 12 sparse Matrix of class "dgCMatrix"
  [[ suppressing 12 column names ‘A.c’, ‘B.c’, ‘C.c’ ... ]]
                             
 [1,] 1 . . . . . . . . . . .
 [2,] 1 . . . . . . . . . . .
 [3,] 1 . . . . . . . . . . .
 [4,] . 1 . . . . . . . . . .
 [5,] . 1 . . . . . . . . . .
 [6,] . 1 . . . . . . . . . .
 [7,] . . 1 . . . . . . . . .
 [8,] . . 1 . . . . . . . . .
 [9,] . . 1 . . . . . . . . .
[10,] . . . 1 . . . . . . . .
[11,] . . . 1 . . . . . . . .
[12,] . . . 1 . . . . . . . .
[13,] . . . . 1 . . . . . . .
[14,] . . . . 1 . . . . . . .
[15,] . . . . 1 . . . . . . .
[16,] . . . . . 1 . . . . . .
[17,] . . . . . 1 . . . . . .
[18,] . . . . . 1 . . . . . .
[19,] . . . . . . 1 . . . . .
[20,] . . . . . . 1 . . . . .
[21,] . . . . . . 1 . . . . .
[22,] . . . . . . . 1 . . . .
[23,] . . . . . . . 1 . . . .
[24,] . . . . . . . 1 . . . .
[25,] . . . . . . . . 1 . . .
[26,] . . . . . . . . 1 . . .
[27,] . . . . . . . . 1 . . .
[28,] . . . . . . . . . 1 . .
[29,] . . . . . . . . . 1 . .
[30,] . . . . . . . . . 1 . .
[31,] . . . . . . . . . . 1 .
[32,] . . . . . . . . . . 1 .
[33,] . . . . . . . . . . 1 .
[34,] . . . . . . . . . . . 1
[35,] . . . . . . . . . . . 1
[36,] . . . . . . . . . . . 1
> print(t(X2), col.names=TRUE)
36 x 12 sparse Matrix of class "dgCMatrix"
      A.c B.c C.c D.c E.c F.c G.c H.c I.c J.c K.c L.c
 [1,]   1   .   .   .   .   .   .   .   .   .   .   .
 [2,]   1   .   .   .   .   .   .   .   .   .   .   .
 [3,]   1   .   .   .   .   .   .   .   .   .   .   .
 [4,]   .   1   .   .   .   .   .   .   .   .   .   .
 [5,]   .   1   .   .   .   .   .   .   .   .   .   .
 [6,]   .   1   .   .   .   .   .   .   .   .   .   .
 [7,]   .   .   1   .   .   .   .   .   .   .   .   .
 [8,]   .   .   1   .   .   .   .   .   .   .   .   .
 [9,]   .   .   1   .   .   .   .   .   .   .   .   .
[10,]   .   .   .   1   .   .   .   .   .   .   .   .
[11,]   .   .   .   1   .   .   .   .   .   .   .   .
[12,]   .   .   .   1   .   .   .   .   .   .   .   .
[13,]   .   .   .   .   1   .   .   .   .   .   .   .
[14,]   .   .   .   .   1   .   .   .   .   .   .   .
[15,]   .   .   .   .   1   .   .   .   .   .   .   .
[16,]   .   .   .   .   .   1   .   .   .   .   .   .
[17,]   .   .   .   .   .   1   .   .   .   .   .   .
[18,]   .   .   .   .   .   1   .   .   .   .   .   .
[19,]   .   .   .   .   .   .   1   .   .   .   .   .
[20,]   .   .   .   .   .   .   1   .   .   .   .   .
[21,]   .   .   .   .   .   .   1   .   .   .   .   .
[22,]   .   .   .   .   .   .   .   1   .   .   .   .
[23,]   .   .   .   .   .   .   .   1   .   .   .   .
[24,]   .   .   .   .   .   .   .   1   .   .   .   .
[25,]   .   .   .   .   .   .   .   .   1   .   .   .
[26,]   .   .   .   .   .   .   .   .   1   .   .   .
[27,]   .   .   .   .   .   .   .   .   1   .   .   .
[28,]   .   .   .   .   .   .   .   .   .   1   .   .
[29,]   .   .   .   .   .   .   .   .   .   1   .   .
[30,]   .   .   .   .   .   .   .   .   .   1   .   .
[31,]   .   .   .   .   .   .   .   .   .   .   1   .
[32,]   .   .   .   .   .   .   .   .   .   .   1   .
[33,]   .   .   .   .   .   .   .   .   .   .   1   .
[34,]   .   .   .   .   .   .   .   .   .   .   .   1
[35,]   .   .   .   .   .   .   .   .   .   .   .   1
[36,]   .   .   .   .   .   .   .   .   .   .   .   1
> print(t(X2), zero.print = "", col.names="abbr. 1")
36 x 12 sparse Matrix of class "dgCMatrix"
      A B C D E F G H I J K L
 [1,] 1                      
 [2,] 1                      
 [3,] 1                      
 [4,]   1                    
 [5,]   1                    
 [6,]   1                    
 [7,]     1                  
 [8,]     1                  
 [9,]     1                  
[10,]       1                
[11,]       1                
[12,]       1                
[13,]         1              
[14,]         1              
[15,]         1              
[16,]           1            
[17,]           1            
[18,]           1            
[19,]             1          
[20,]             1          
[21,]             1          
[22,]               1        
[23,]               1        
[24,]               1        
[25,]                 1      
[26,]                 1      
[27,]                 1      
[28,]                   1    
[29,]                   1    
[30,]                   1    
[31,]                     1  
[32,]                     1  
[33,]                     1  
[34,]                       1
[35,]                       1
[36,]                       1
> print(t(X2), zero.print = "-", col.names="substring 2")
36 x 12 sparse Matrix of class "dgCMatrix"
      A. B. C. D. E. F. G. H. I. J. K. L.
 [1,]  1  -  -  -  -  -  -  -  -  -  -  -
 [2,]  1  -  -  -  -  -  -  -  -  -  -  -
 [3,]  1  -  -  -  -  -  -  -  -  -  -  -
 [4,]  -  1  -  -  -  -  -  -  -  -  -  -
 [5,]  -  1  -  -  -  -  -  -  -  -  -  -
 [6,]  -  1  -  -  -  -  -  -  -  -  -  -
 [7,]  -  -  1  -  -  -  -  -  -  -  -  -
 [8,]  -  -  1  -  -  -  -  -  -  -  -  -
 [9,]  -  -  1  -  -  -  -  -  -  -  -  -
[10,]  -  -  -  1  -  -  -  -  -  -  -  -
[11,]  -  -  -  1  -  -  -  -  -  -  -  -
[12,]  -  -  -  1  -  -  -  -  -  -  -  -
[13,]  -  -  -  -  1  -  -  -  -  -  -  -
[14,]  -  -  -  -  1  -  -  -  -  -  -  -
[15,]  -  -  -  -  1  -  -  -  -  -  -  -
[16,]  -  -  -  -  -  1  -  -  -  -  -  -
[17,]  -  -  -  -  -  1  -  -  -  -  -  -
[18,]  -  -  -  -  -  1  -  -  -  -  -  -
[19,]  -  -  -  -  -  -  1  -  -  -  -  -
[20,]  -  -  -  -  -  -  1  -  -  -  -  -
[21,]  -  -  -  -  -  -  1  -  -  -  -  -
[22,]  -  -  -  -  -  -  -  1  -  -  -  -
[23,]  -  -  -  -  -  -  -  1  -  -  -  -
[24,]  -  -  -  -  -  -  -  1  -  -  -  -
[25,]  -  -  -  -  -  -  -  -  1  -  -  -
[26,]  -  -  -  -  -  -  -  -  1  -  -  -
[27,]  -  -  -  -  -  -  -  -  1  -  -  -
[28,]  -  -  -  -  -  -  -  -  -  1  -  -
[29,]  -  -  -  -  -  -  -  -  -  1  -  -
[30,]  -  -  -  -  -  -  -  -  -  1  -  -
[31,]  -  -  -  -  -  -  -  -  -  -  1  -
[32,]  -  -  -  -  -  -  -  -  -  -  1  -
[33,]  -  -  -  -  -  -  -  -  -  -  1  -
[34,]  -  -  -  -  -  -  -  -  -  -  -  1
[35,]  -  -  -  -  -  -  -  -  -  -  -  1
[36,]  -  -  -  -  -  -  -  -  -  -  -  1
> 
> ## Don't show: 
> op <- options(max.print = 25000, width = 80)
> sink(print(tempfile()))
[1] "/tmp/RtmpRZi6J1/file36474461e972"
> M <- Matrix(0, 10000, 100)
> M[1,1] <- M[2,3] <- 3.14
> st <- system.time(show(M))
> sink()
> st
   user  system elapsed 
  0.104   0.027   0.131 
> 
> if(interactive() || nzchar(Sys.getenv("R_MATRIX_CHECK_EXTRA")))
+ ## valgrind (2023-07-26) gave 10.5 sec!
+ stopifnot(st[1] < 1.0) # only 0.09 on cmath-3
> options(op)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("qr-methods")
> ### * qr-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qr-methods
> ### Title: Methods for QR Factorization
> ### Aliases: qr qr-methods qr,dgCMatrix-method qr,sparseMatrix-method
> ### Keywords: algebra array methods
> 
> ### ** Examples
> 
> showMethods("qr", inherited = FALSE)
Function: qr (package base)
x="ANY"
x="dgCMatrix"
x="sparseMatrix"

> 
> ## Rank deficient: columns 3 {b2} and 6 {c3} are "extra"
> M <- as(cbind(a1 = 1,
+               b1 = rep(c(1, 0), each = 3L),
+               b2 = rep(c(0, 1), each = 3L),
+               c1 = rep(c(1, 0, 0), 2L),
+               c2 = rep(c(0, 1, 0), 2L),
+               c3 = rep(c(0, 0, 1), 2L)),
+         "CsparseMatrix")
> rownames(M) <- paste0("r", seq_len(nrow(M)))
> b <- 1:6
> eps <- .Machine$double.eps
> 
> ## .... [1] full rank ..................................................
> ## ===> a least squares solution of A x = b exists
> ##      and is unique _in exact arithmetic_
> 
> (A1 <- M[, -c(3L, 6L)])
6 x 4 sparse Matrix of class "dgCMatrix"
   a1 b1 c1 c2
r1  1  1  1  .
r2  1  1  .  1
r3  1  1  .  .
r4  1  .  1  .
r5  1  .  .  1
r6  1  .  .  .
> (qr.A1 <- qr(A1))
QR factorization of Formal class 'sparseQR' [package "Matrix"] with 7 slots
  ..@ beta    : num [1:4] 1.71 1.71 0.5 1.58
  ..@ V       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:11] 0 3 1 2 2 3 4 5 3 4 ...
  .. .. ..@ p       : int [1:5] 0 2 4 8 11
  .. .. ..@ Dim     : int [1:2] 6 4
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:11] -0.414 1 -0.414 1 -1.414 ...
  .. .. ..@ factors : list()
  ..@ R       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:9] 0 1 0 1 2 0 1 2 3
  .. .. ..@ p       : int [1:5] 0 1 2 5 9
  .. .. ..@ Dim     : int [1:2] 6 4
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:9] 1.41 1.41 1.41 1.41 1.41 ...
  .. .. ..@ factors : list()
  ..@ p       : int [1:6] 0 1 4 3 2 5
  ..@ q       : int [1:4] 2 3 0 1
  ..@ Dim     : int [1:2] 6 4
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:6] "r1" "r2" "r3" "r4" ...
  .. ..$ : chr [1:4] "a1" "b1" "c1" "c2"
> 
> stopifnot(exprs = {
+     rankMatrix(A1) == ncol(A1)
+     { d1 <- abs(diag(qr.A1@R)); sum(d1 < max(d1) * eps) == 0L }
+     rcond(crossprod(A1)) >= eps
+     all.equal(qr.coef(qr.A1, b), drop(solve(crossprod(A1), crossprod(A1, b))))
+     all.equal(qr.fitted(qr.A1, b) + qr.resid(qr.A1, b), b)
+ })
Warning in .local(x, norm, ...) : 'rcond' via sparse -> dense coercion
> 
> ## .... [2] numerically rank deficient with full structural rank .......
> ## ===> a least squares solution of A x = b does not
> ##      exist or is not unique _in exact arithmetic_
> 
> (A2 <- M)
6 x 6 sparse Matrix of class "dgCMatrix"
   a1 b1 b2 c1 c2 c3
r1  1  1  .  1  .  .
r2  1  1  .  .  1  .
r3  1  1  .  .  .  1
r4  1  .  1  1  .  .
r5  1  .  1  .  1  .
r6  1  .  1  .  .  1
> (qr.A2 <- qr(A2))
QR factorization of Formal class 'sparseQR' [package "Matrix"] with 7 slots
  ..@ beta    : num [1:6] 1.71 7.24e-01 8.00e-01 1.26 2.52e+31 ...
  ..@ V       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:14] 0 1 1 2 3 2 3 4 3 4 ...
  .. .. ..@ p       : int [1:7] 0 2 5 8 11 13 14
  .. .. ..@ Dim     : int [1:2] 6 6
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:14] -0.414 1 -0.874 1 1 ...
  .. .. ..@ factors : list()
  ..@ R       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:19] 0 0 1 1 2 1 2 3 0 1 ...
  .. .. ..@ p       : int [1:7] 0 1 3 5 8 13 19
  .. .. ..@ Dim     : int [1:2] 6 6
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:19] 1.414 0.707 1.581 0.632 1.265 ...
  .. .. ..@ factors : list()
  ..@ p       : int [1:6] 2 5 0 1 3 4
  ..@ q       : int [1:6] 5 1 3 4 2 0
  ..@ Dim     : int [1:2] 6 6
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:6] "r1" "r2" "r3" "r4" ...
  .. ..$ : chr [1:6] "a1" "b1" "b2" "c1" ...
> 
> stopifnot(exprs = {
+     rankMatrix(A2) == ncol(A2) - 2L
+     { d2 <- abs(diag(qr.A2@R)); sum(d2 < max(d2) * eps) == 2L }
+     rcond(crossprod(A2)) < eps
+ 
+     ## 'qr.coef' computes unique least squares solution of "nearby" problem
+     ## Z x = b for some full rank Z ~ A, currently without warning {FIXME} !
+     tryCatch({ qr.coef(qr.A2, b); TRUE }, condition = function(x) FALSE)
+ 
+     all.equal(qr.fitted(qr.A2, b) + qr.resid(qr.A2, b), b)
+ })
Warning in .local(x, norm, ...) : 'rcond' via sparse -> dense coercion
> 
> ## .... [3] numerically and structurally rank deficient ................
> ## ===> factorization of _augmented_ matrix with
> ##      full structural rank proceeds as in [2]
> 
> ##  NB: implementation details are subject to change; see (*) below
> 
> A3 <- M
> A3[, c(3L, 6L)] <- 0
> A3
6 x 6 sparse Matrix of class "dgCMatrix"
   a1 b1 b2 c1 c2 c3
r1  1  1  .  1  .  .
r2  1  1  .  .  1  .
r3  1  1  .  .  .  .
r4  1  .  .  1  .  .
r5  1  .  .  .  1  .
r6  1  .  .  .  .  .
> (qr.A3 <- qr(A3)) # with a warning ... "additional 2 row(s) of zeros"
Warning in .qr.rank.def.warn(r) :
  matrix is structurally rank deficient; using augmented matrix with additional 2 row(s) of zeros
QR factorization of Formal class 'sparseQR' [package "Matrix"] with 7 slots
  ..@ beta    : num [1:6] 1.707 0.25 2 0.667 2 ...
  ..@ V       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:16] 0 1 1 2 3 6 7 2 3 6 ...
  .. .. ..@ p       : int [1:7] 0 2 7 11 14 15 16
  .. .. ..@ Dim     : int [1:2] 8 6
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:16] -0.414 1 -2 1 1 ...
  .. .. ..@ factors : list()
  ..@ R       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:9] 0 0 1 1 2 0 1 2 3
  .. .. ..@ p       : int [1:7] 0 1 3 5 9 9 9
  .. .. ..@ Dim     : int [1:2] 8 6
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:9] 1.41 1.41 2 1 1 ...
  .. .. ..@ factors : list()
  ..@ p       : int [1:8] 1 4 0 2 6 7 3 5
  ..@ q       : int [1:6] 4 0 3 1 2 5
  ..@ Dim     : int [1:2] 6 6
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:6] "r1" "r2" "r3" "r4" ...
  .. ..$ : chr [1:6] "a1" "b1" "b2" "c1" ...
> 
> stopifnot(exprs = {
+     ## sparseQR object preserves the unaugmented dimensions (*)
+     dim(qr.A3  ) == dim(A3)
+     dim(qr.A3@V) == dim(A3) + c(2L, 0L)
+     dim(qr.A3@R) == dim(A3) + c(2L, 0L)
+ 
+     ## The augmented matrix remains numerically rank deficient
+     rankMatrix(A3) == ncol(A3) - 2L
+     { d3 <- abs(diag(qr.A3@R)); sum(d3 < max(d3) * eps) == 2L }
+     rcond(crossprod(A3)) < eps
+ })
Warning in .local(x, norm, ...) : 'rcond' via sparse -> dense coercion
> 
> ## Auxiliary functions accept and return a vector or matrix
> ## with dimensions corresponding to the unaugmented matrix (*),
> ## in all cases with a warning
> qr.coef  (qr.A3, b)
Warning in .qr.rank.def.warn(qr) :
  matrix is structurally rank deficient; using augmented matrix with additional 2 row(s) of zeros
a1 b1 b2 c1 c2 c3 
 6 -3  0 -2 -1  0 
> qr.fitted(qr.A3, b)
Warning in .qr.rank.def.warn(qr) :
  matrix is structurally rank deficient; using augmented matrix with additional 2 row(s) of zeros
[1] 1 2 3 4 5 6
> qr.resid (qr.A3, b)
Warning in .qr.rank.def.warn(qr) :
  matrix is structurally rank deficient; using augmented matrix with additional 2 row(s) of zeros
[1]  3.767597e-16 -1.072126e-15  6.953665e-16 -3.767597e-16  1.072126e-15
[6] -6.953665e-16
> 
> ## .... [4] yet more examples ..........................................
> 
> ## By disabling column pivoting, one gets the "vanilla" factorization
> ## A = Q~ R, where Q~ := P1' Q is orthogonal because P1 and Q are
> 
> (qr.A1.pp <- qr(A1, order = 0L)) # partial pivoting
QR factorization of Formal class 'sparseQR' [package "Matrix"] with 7 slots
  ..@ beta    : num [1:4] 0.282 2.15 1.16 3.103
  ..@ V       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:18] 0 1 2 3 4 5 1 2 3 4 ...
  .. .. ..@ p       : int [1:5] 0 6 11 15 18
  .. .. ..@ Dim     : int [1:2] 6 4
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:18] -1.45 1 1 1 1 ...
  .. .. ..@ factors : list()
  ..@ R       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:9] 0 0 1 0 2 0 1 2 3
  .. .. ..@ p       : int [1:5] 0 1 3 5 9
  .. .. ..@ Dim     : int [1:2] 6 4
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:9] 2.449 1.225 1.225 0.816 1.155 ...
  .. .. ..@ factors : list()
  ..@ p       : int [1:6] 0 1 2 3 4 5
  ..@ q       : int(0) 
  ..@ Dim     : int [1:2] 6 4
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:6] "r1" "r2" "r3" "r4" ...
  .. ..$ : chr [1:4] "a1" "b1" "c1" "c2"
> 
> ae1 <- function(a, b, ...) all.equal(as(a, "matrix"), as(b, "matrix"), ...)
> ae2 <- function(a, b, ...) ae1(unname(a), unname(b), ...)
> 
> stopifnot(exprs = {
+     length(qr.A1   @q) == ncol(A1)
+     length(qr.A1.pp@q) == 0L # indicating no column pivoting
+     ae2(A1[, qr.A1@q + 1L], qr.Q(qr.A1   ) %*% qr.R(qr.A1   ))
+     ae2(A1                , qr.Q(qr.A1.pp) %*% qr.R(qr.A1.pp))
+ })
> 
> 
> 
> cleanEx()
> nameEx("rankMatrix")
> ### * rankMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rankMatrix
> ### Title: Rank of a Matrix
> ### Aliases: rankMatrix qr2rankMatrix
> ### Keywords: algebra utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> rankMatrix(cbind(1, 0, 1:3)) # 2
[1] 2
attr(,"method")
[1] "tolNorm2"
attr(,"useGrad")
[1] FALSE
attr(,"tol")
[1] 6.661338e-16
> 
> (meths <- eval(formals(rankMatrix)$method))
[1] "tolNorm2"  "qr.R"      "qrLINPACK" "qr"        "useGrad"   "maybeGrad"
> 
> ## a "border" case:
> H12 <- Hilbert(12)
> rankMatrix(H12, tol = 1e-20) # 12;  but  11  with default method & tol.
[1] 12
attr(,"method")
[1] "tolNorm2"
attr(,"useGrad")
[1] FALSE
attr(,"tol")
[1] 1e-20
> sapply(meths, function(.m.) rankMatrix(H12, method = .m.))
 tolNorm2      qr.R qrLINPACK        qr   useGrad maybeGrad 
       11        11        12        12        11        11 
> ## tolNorm2   qr.R  qrLINPACK   qr  useGrad maybeGrad
> ##       11     11         12   12       11        11
> ## The meaning of 'tol' for method="qrLINPACK" and *dense* x is not entirely "scale free"
> rMQL <- function(ex, M) rankMatrix(M, method="qrLINPACK",tol = 10^-ex)
> rMQR <- function(ex, M) rankMatrix(M, method="qr.R",     tol = 10^-ex)
> sapply(5:15, rMQL, M = H12) # result is platform dependent
 [1]  7  7  8 10 11 11 11 11 12 12 12
> ##  7  7  8 10 10 11 11 11 12 12 12  {x86_64}
> sapply(5:15, rMQL, M = 1000 * H12) # not identical unfortunately
 [1]  7  7  8 10 11 11 12 12 12 12 12
> ##  7  7  8 10 11 11 12 12 12 12 12
> sapply(5:15, rMQR, M = H12)
 [1]  5  6  7  8  8  9  9 10 10 11 11
> ##  5  6  7  8  8  9  9 10 10 11 11
> sapply(5:15, rMQR, M = 1000 * H12) # the *same*
 [1]  5  6  7  8  8  9  9 10 10 11 11
> ## Don't show: 
>   (r12 <- sapply(5:15, rMQR, M = H12))
 [1]  5  6  7  8  8  9  9 10 10 11 11
>   stopifnot(identical(r12, sapply(5:15, rMQR, M = H12 / 100)),
+             identical(r12, sapply(5:15, rMQR, M = H12 * 1e5)))
> 
>   rM1 <- function(ex, M) rankMatrix(M, tol = 10^-ex)
>   (r12 <- sapply(5:15, rM1, M = H12))
 [1]  5  6  7  7  8  9  9 10 10 11 11
>   stopifnot(identical(r12, sapply(5:15, rM1, M = H12 / 100)),
+             identical(r12, sapply(5:15, rM1, M = H12 * 1e5)))
> ## End(Don't show)
> 
> ## "sparse" case:
> M15 <- kronecker(diag(x=c(100,1,10)), Hilbert(5))
> sapply(meths, function(.m.) rankMatrix(M15, method = .m.))
 tolNorm2      qr.R qrLINPACK        qr   useGrad maybeGrad 
       15        15        15        15        14        15 
> #--> all 15, but 'useGrad' has 14.
> sapply(meths, function(.m.) rankMatrix(M15, method = .m., tol = 1e-7)) # all 14
 tolNorm2      qr.R qrLINPACK        qr   useGrad maybeGrad 
       14        14        15        15        14        14 
> 
> ## "large" sparse
> n <- 250000; p <- 33; nnz <- 10000
> L <- sparseMatrix(i = sample.int(n, nnz, replace=TRUE),
+                   j = sample.int(p, nnz, replace=TRUE),
+                   x = rnorm(nnz))
> (st1 <- system.time(r1 <- rankMatrix(L)))                # warning+ ~1.5 sec (2013)
Warning in rankMatrix(L) :
  rankMatrix(<large sparse Matrix>, method = 'tolNorm2') coerces to dense matrix.
 Probably should rather use method = 'qr' !?
   user  system elapsed 
  0.848   0.145   1.065 
> (st2 <- system.time(r2 <- rankMatrix(L, method = "qr"))) # considerably faster!
   user  system elapsed 
  0.022   0.000   0.023 
> r1[[1]] == print(r2[[1]]) ## -->  ( 33  TRUE )
[1] 33
[1] TRUE
> ## Don't show: 
> stopifnot(r1[[1]] == 33, 33 == r2[[1]])
> if(interactive() || nzchar(Sys.getenv("R_MATRIX_CHECK_EXTRA")))
+     stopifnot(st2[[1]] < 0.2) # seeing 0.03 (on ~ 2010-hardware; R 3.0.2)
> ## End(Don't show)
> ## another sparse-"qr" one, which ``failed'' till 2013-11-23:
> set.seed(42)
> f1 <- factor(sample(50, 1000, replace=TRUE))
> f2 <- factor(sample(50, 1000, replace=TRUE))
> f3 <- factor(sample(50, 1000, replace=TRUE))
> D <- t(do.call(rbind, lapply(list(f1,f2,f3), as, 'sparseMatrix')))
> dim(D); nnzero(D) ## 1000 x 150 // 3000 non-zeros (= 2%)
[1] 1000  150
[1] 3000
> stopifnot(rankMatrix(D,           method='qr') == 148,
+ 	  rankMatrix(crossprod(D),method='qr') == 148)
> 
> ## zero matrix has rank 0 :
> stopifnot(sapply(meths, function(.m.)
+                         rankMatrix(matrix(0, 2, 2), method = .m.)) == 0)
> 
> 
> 
> cleanEx()
> nameEx("rcond")
> ### * rcond
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rcond-methods
> ### Title: Estimate the Reciprocal Condition Number
> ### Aliases: rcond rcond-methods rcond,ANY,missing-method
> ###   rcond,denseMatrix,character-method
> ###   rcond,diagonalMatrix,character-method
> ###   rcond,indMatrix,character-method rcond,pMatrix,character-method
> ###   rcond,sparseMatrix,character-method
> ### Keywords: algebra math methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> x <- Matrix(rnorm(9), 3, 3)
> rcond(x)
[1] 0.180367
> ## typically "the same" (with more computational effort):
> 1 / (norm(x) * norm(solve(x)))
[1] 0.180367
> rcond(Hilbert(9))  # should be about 9.1e-13
[1] 9.093811e-13
> 
> ## For non-square matrices:
> rcond(x1 <- cbind(1,1:10))# 0.05278
[1] 0.05278005
> rcond(x2 <- cbind(x1, 2:11))# practically 0, since x2 does not have full rank
[1] 1.144414e-17
> 
> ## sparse
> (S1 <- Matrix(rbind(0:1,0, diag(3:-2))))
8 x 6 sparse Matrix of class "dgCMatrix"
                  
[1,] . 1 . 1  .  1
[2,] . . . .  .  .
[3,] 3 . . .  .  .
[4,] . 2 . .  .  .
[5,] . . 1 .  .  .
[6,] . . . .  .  .
[7,] . . . . -1  .
[8,] . . . .  . -2
> rcond(S1)
Warning in .local(x, norm, ...) : 'rcond' via sparse -> dense coercion
[1] 0.2992542
> m1 <- as(S1, "denseMatrix")
> all.equal(rcond(S1), rcond(m1))
Warning in .local(x, norm, ...) : 'rcond' via sparse -> dense coercion
[1] "Mean relative difference: 0.254644"
> 
> ## wide and sparse
> rcond(Matrix(cbind(0, diag(2:-1))))
Warning in .qr.rank.def.warn(r) :
  matrix is structurally rank deficient; using augmented matrix with additional 1 row(s) of zeros
Warning in .local(x, norm, ...) : 'rcond' via sparse -> dense coercion
[1] 0
> 
> ## Large sparse example ----------
> m <- Matrix(c(3,0:2), 2,2)
> M <- bdiag(kronecker(Diagonal(2), m), kronecker(m,m))
> 36*(iM <- solve(M)) # still sparse
8 x 8 sparse Matrix of class "dtCMatrix"
                           
[1,] 12 -6  .  . .  .  .  .
[2,]  . 18  .  . .  .  .  .
[3,]  .  . 12 -6 .  .  .  .
[4,]  .  .  . 18 .  .  .  .
[5,]  .  .  .  . 4 -2 -2  1
[6,]  .  .  .  . .  6  . -3
[7,]  .  .  .  . .  .  6 -3
[8,]  .  .  .  . .  .  .  9
> MM <- kronecker(Diagonal(10), kronecker(Diagonal(5),kronecker(m,M)))
> dim(M3 <- kronecker(bdiag(M,M),MM)) # 12'800 ^ 2
[1] 12800 12800
> if(interactive()) ## takes about 2 seconds if you have >= 8 GB RAM
+   system.time(r <- rcond(M3))
> ## whereas this is *fast* even though it computes  solve(M3)
> system.time(r. <- rcond(M3, useInv=TRUE))
   user  system elapsed 
  0.007   0.000   0.007 
> if(interactive()) ## the values are not the same
+   c(r, r.)  # 0.05555 0.013888
> ## for all 4 norms available for sparseMatrix :
> cbind(rr <- sapply(c("1","I","F","M"),
+              function(N) rcond(M3, norm=N, useInv=TRUE)))
          [,1]
1 1.388889e-02
I 7.812500e-03
F 2.059462e-05
M 3.292181e-02
> ## Don't show: 
> stopifnot(all.equal(r., 1/72, tolerance=1e-12))
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("rep2abI")
> ### * rep2abI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rep2abI
> ### Title: Replicate Vectors into 'abIndex' Result
> ### Aliases: rep2abI
> ### Keywords: manip utilities
> 
> ### ** Examples
> 
> (ab <- rep2abI(2:7, 4))
Abstract Index vector (class 'abIndex') of length 24, kind "rleDiff"
 and slot "rleD":
 RLE difference (class 'rleDiff'): first = 2, "rle":
   Run Length Encoding
     lengths: int [1:7] 5 1 5 1 5 1 5
     values : int [1:7] 1 -5 1 -5 1 -5 1
> stopifnot(identical(as(ab, "numeric"),
+ 	   rep(2:7, 4)))
> 
> 
> 
> cleanEx()
> nameEx("replValue-class")
> ### * replValue-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: replValue-class
> ### Title: Virtual Class "replValue" - Simple Class for Subassignment
> ###   Values
> ### Aliases: replValue-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("replValue")
Virtual Class "replValue" [package "Matrix"]

No Slots, prototype of class "logical"

Extends: "replValueSp"

Known Subclasses: 
Class "logical", directly
Class "numeric", directly
Class "complex", directly
Class "raw", directly
Class "integer", by class "numeric", distance 2
Class "double", by class "numeric", distance 2
Class "factor", by class "numeric", distance 3
Class "ordered", by class "numeric", distance 4
> 
> 
> 
> cleanEx()
> nameEx("rleDiff-class")
> ### * rleDiff-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rleDiff-class
> ### Title: Class "rleDiff" of rle(diff(.)) Stored Vectors
> ### Aliases: rleDiff-class show,rleDiff-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("rleDiff")
Class "rleDiff" [package "Matrix"]

Slots:
                      
Name:    first     rle
Class: numeric     rle
> 
> ab <- c(abIseq(2, 100), abIseq(20, -2))
> ab@rleD  # is "rleDiff"
 RLE difference (class 'rleDiff'): first = 2, "rle":
   Run Length Encoding
     lengths: num [1:3] 98 1 22
     values : num [1:3] 1 -80 -1
> 
> 
> 
> cleanEx()
> nameEx("rsparsematrix")
> ### * rsparsematrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rsparsematrix
> ### Title: Random Sparse Matrix
> ### Aliases: rsparsematrix
> ### Keywords: array distribution utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> set.seed(17)# to be reproducible
> M <- rsparsematrix(8, 12, nnz = 30) # small example, not very sparse
> M
8 x 12 sparse Matrix of class "dgCMatrix"
                                                                         
[1,] -0.710  .     .     .     0.54  .     .     -0.62 .    .    -1.2 .  
[2,]  .      .     .     .     .     0.12 -0.720  .    .   -0.96  .   .  
[3,]  .      .     1.20 -0.83 -0.23  .     .      .    .    .     .   .  
[4,]  0.052  .    -0.45  .     .     .     .      1.80 .    .     .   .  
[5,] -0.780  .     0.25  .     2.40 -0.60  .      .    .    .     .   .  
[6,] -0.880  .     0.26 -3.60  .     .     0.074  .    .    .     .   1.7
[7,]  .      .     .     .     1.20  0.38  .      .    .   -0.33  .   .  
[8,] -0.990 -0.21  .     .     .     .    -1.400  0.32 1.9  .     .   .  
> M1 <- rsparsematrix(1000, 20,  nnz = 123,  rand.x = runif)
> summary(M1)
1000 x 20 sparse Matrix of class "dgCMatrix", with 123 entries
      i  j           x
1    30  1 0.121030300
2   256  1 0.171285824
3   471  1 0.658082934
4   490  1 0.672053193
5   515  1 0.563469009
6   799  1 0.754721688
7   914  1 0.214298567
8   112  2 0.230193013
9   146  2 0.520770952
10  238  2 0.895551263
11  460  2 0.747560311
12  494  2 0.338654988
13  669  2 0.633221050
14  753  2 0.029495869
15   26  3 0.857548872
16  103  3 0.877821950
17  123  3 0.373133136
18  163  3 0.365224795
19  395  3 0.244816811
20  425  3 0.474136304
21  697  3 0.463969983
22  858  3 0.272504956
23  875  3 0.840738221
24  157  4 0.277547142
25  317  4 0.394847750
26  400  4 0.991649291
27  510  4 0.362585672
28  514  4 0.520276636
29  634  4 0.808294520
30  850  4 0.007048685
31  934  4 0.536796092
32   30  5 0.166392594
33  263  5 0.306517981
34  301  5 0.834864402
35  884  5 0.772908976
36  967  5 0.792207911
37  268  6 0.697779252
38  290  6 0.080128319
39  434  6 0.307286057
40  535  6 0.539794671
41  759  6 0.651017611
42  866  6 0.069991217
43  167  7 0.720624894
44  394  7 0.798488620
45  502  7 0.837568737
46  580  7 0.182004452
47  705  7 0.289417504
48  723  7 0.114946217
49  216  8 0.780055751
50  409  8 0.961610656
51  631  8 0.188212461
52  361  9 0.849970878
53  411  9 0.110761594
54  482  9 0.918999826
55  564  9 0.106341774
56  634  9 0.966994960
57  817  9 0.080746639
58  842  9 0.936882774
59  940  9 0.723470934
60  989  9 0.964498797
61   47 10 0.359321831
62  405 10 0.023504461
63  507 10 0.112909265
64  717 10 0.748889274
65  734 10 0.642421125
66  329 11 0.111511966
67  438 11 0.498936020
68  492 11 0.691674638
69  570 11 0.246009281
70  748 11 0.161394011
71  753 11 0.872274340
72  783 11 0.100716683
73  977 11 0.462361495
74  355 12 0.807811439
75  645 12 0.652533316
76  672 12 0.437335808
77  697 12 0.308880390
78  864 12 0.614445118
79  949 12 0.469374262
80  167 13 0.640432993
81  318 13 0.598486273
82  382 13 0.373182097
83  400 13 0.973641726
84  547 13 0.338046568
85  601 13 0.117673368
86  729 13 0.159017836
87  996 13 0.350850822
88  307 14 0.998227660
89  385 14 0.323179815
90  453 14 0.351955581
91  526 14 0.706791886
92  680 14 0.538912676
93  916 14 0.176190115
94  926 14 0.276029720
95   11 15 0.118834062
96  161 15 0.343942903
97  211 15 0.850774512
98  323 15 0.133445217
99  478 15 0.788471288
100 597 15 0.145946067
101 608 15 0.197623800
102 886 15 0.862795090
103 275 16 0.714235556
104 510 16 0.019910095
105 527 16 0.639534228
106 695 16 0.428969391
107 765 16 0.905435610
108 103 17 0.899292917
109 736 17 0.150202421
110 101 18 0.505359340
111 513 18 0.784202072
112 739 18 0.770542073
113 941 18 0.728378107
114 225 19 0.216264430
115 558 19 0.311900054
116 680 19 0.807296937
117 948 19 0.314206922
118 154 20 0.226125864
119 341 20 0.942557140
120 637 20 0.635889334
121 650 20 0.914174104
122 767 20 0.673403587
123 952 20 0.392104291
> 
> ## a random *symmetric* Matrix
> (S9 <- rsparsematrix(9, 9, nnz = 10, symmetric=TRUE)) # dsCMatrix
9 x 9 sparse Matrix of class "dsCMatrix"
                                                   
 [1,] -0.038  .    .    1.50 0.17  .     0.96 .   .
 [2,]  .      .    .    .    .     .    -0.48 .   .
 [3,]  .      .    .    .    .     .     .    1.3 .
 [4,]  1.500  .    .    .    .    -0.48  .    .   .
 [5,]  0.170  .    .    .    .     .     .    2.4 .
 [6,]  .      .    .   -0.48 .     .    -0.48 .   .
 [7,]  0.960 -0.48 .    .    .    -0.48 -0.33 .   .
 [8,]  .      .    1.3  .    2.40  .     .    .   .
 [9,]  .      .    .    .    .     .     .    .   .
> nnzero(S9)# ~ 20: as 'nnz' only counts one "triangle"
[1] 18
> 
> ## a random patter*n* aka boolean Matrix (no 'x' slot):
> (n7 <- rsparsematrix(5, 12, nnz = 10, rand.x = NULL))
5 x 12 sparse Matrix of class "ngCMatrix"
                            
[1,] . . . . . . . . . . . .
[2,] . . . . . . . . | . . .
[3,] . . | . . . | . . . . .
[4,] | . . . . . . | . | . .
[5,] . | . . . | . . . | . |
> 
> ## a [T]riplet representation sparseMatrix:
> T2 <- rsparsematrix(40, 12, nnz = 99, repr = "T")
> head(T2)
6 x 12 sparse Matrix of class "dgTMatrix"
                                                             
[1,] 1.8  .    -2.8  .    . -0.77 . -1.20 . .     .      0.27
[2,] .   -0.71  .    .    .  .    .  .    . 0.96  .     -0.32
[3,] .    .     .    .    .  .    .  .    . .    -0.051  .   
[4,] .    .     .    .    .  .    .  0.17 . .    -0.027  .   
[5,] .    .     .    .    .  .    .  .    . .    -1.400 -0.94
[6,] .    .     .   -0.26 .  .    .  .    . .     .      .   
> 
> 
> 
> cleanEx()
> nameEx("solve-methods")
> ### * solve-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: solve-methods
> ### Title: Methods in Package 'Matrix' for Function 'solve'
> ### Aliases: solve solve-methods solve,ANY,ANY-method
> ###   solve,BunchKaufman,missing-method solve,BunchKaufman,dgeMatrix-method
> ###   solve,CHMfactor,missing-method solve,CHMfactor,dgeMatrix-method
> ###   solve,CHMfactor,dgCMatrix-method solve,Cholesky,missing-method
> ###   solve,Cholesky,dgeMatrix-method solve,CsparseMatrix,ANY-method
> ###   solve,Matrix,sparseVector-method
> ###   solve,MatrixFactorization,CsparseMatrix-method
> ###   solve,MatrixFactorization,RsparseMatrix-method
> ###   solve,MatrixFactorization,TsparseMatrix-method
> ###   solve,MatrixFactorization,denseMatrix-method
> ###   solve,MatrixFactorization,dgCMatrix-method
> ###   solve,MatrixFactorization,dgeMatrix-method
> ###   solve,MatrixFactorization,diagonalMatrix-method
> ###   solve,MatrixFactorization,indMatrix-method
> ###   solve,MatrixFactorization,matrix-method
> ###   solve,MatrixFactorization,sparseVector-method
> ###   solve,MatrixFactorization,vector-method
> ###   solve,RsparseMatrix,ANY-method solve,Schur,ANY-method
> ###   solve,TsparseMatrix,ANY-method solve,ddiMatrix,Matrix-method
> ###   solve,ddiMatrix,matrix-method solve,ddiMatrix,missing-method
> ###   solve,ddiMatrix,vector-method solve,denseLU,missing-method
> ###   solve,denseLU,dgeMatrix-method solve,denseMatrix,ANY-method
> ###   solve,dgCMatrix,denseMatrix-method solve,dgCMatrix,matrix-method
> ###   solve,dgCMatrix,missing-method solve,dgCMatrix,sparseMatrix-method
> ###   solve,dgCMatrix,vector-method solve,dgeMatrix,ANY-method
> ###   solve,diagonalMatrix,ANY-method solve,dpoMatrix,ANY-method
> ###   solve,dppMatrix,ANY-method solve,dsCMatrix,denseMatrix-method
> ###   solve,dsCMatrix,matrix-method solve,dsCMatrix,missing-method
> ###   solve,dsCMatrix,sparseMatrix-method solve,dsCMatrix,vector-method
> ###   solve,dspMatrix,ANY-method solve,dsyMatrix,ANY-method
> ###   solve,dtCMatrix,dgCMatrix-method solve,dtCMatrix,dgeMatrix-method
> ###   solve,dtCMatrix,missing-method
> ###   solve,dtCMatrix,triangularMatrix-method
> ###   solve,dtpMatrix,dgeMatrix-method solve,dtpMatrix,missing-method
> ###   solve,dtpMatrix,triangularMatrix-method
> ###   solve,dtrMatrix,dgeMatrix-method solve,dtrMatrix,missing-method
> ###   solve,dtrMatrix,triangularMatrix-method solve,indMatrix,ANY-method
> ###   solve,matrix,Matrix-method solve,matrix,sparseVector-method
> ###   solve,pBunchKaufman,missing-method
> ###   solve,pBunchKaufman,dgeMatrix-method solve,pCholesky,missing-method
> ###   solve,pCholesky,dgeMatrix-method solve,pMatrix,Matrix-method
> ###   solve,pMatrix,matrix-method solve,pMatrix,missing-method
> ###   solve,pMatrix,vector-method solve,sparseLU,missing-method
> ###   solve,sparseLU,dgeMatrix-method solve,sparseLU,dgCMatrix-method
> ###   solve,sparseQR,missing-method solve,sparseQR,dgeMatrix-method
> ###   solve,sparseQR,dgCMatrix-method
> ###   solve,triangularMatrix,CsparseMatrix-method
> ###   solve,triangularMatrix,RsparseMatrix-method
> ###   solve,triangularMatrix,TsparseMatrix-method
> ###   solve,triangularMatrix,denseMatrix-method
> ###   solve,triangularMatrix,dgCMatrix-method
> ###   solve,triangularMatrix,dgeMatrix-method
> ###   solve,triangularMatrix,diagonalMatrix-method
> ###   solve,triangularMatrix,indMatrix-method
> ###   solve,triangularMatrix,matrix-method
> ###   solve,triangularMatrix,vector-method
> ### Keywords: algebra array methods
> 
> ### ** Examples
> 
> ## A close to symmetric example with "quite sparse" inverse:
> n1 <- 7; n2 <- 3
> dd <- data.frame(a = gl(n1,n2), b = gl(n2,1,n1*n2))# balanced 2-way
> X <- sparse.model.matrix(~ -1+ a + b, dd)# no intercept --> even sparser
> XXt <- tcrossprod(X)
> diag(XXt) <- rep(c(0,0,1,0), length.out = nrow(XXt))
> 
> n <- nrow(ZZ <- kronecker(XXt, Diagonal(x=c(4,1))))
> image(a <- 2*Diagonal(n) + ZZ %*% Diagonal(x=c(10, rep(1, n-1))))
> isSymmetric(a) # FALSE
[1] FALSE
> image(drop0(skewpart(a)))
> image(ia0 <- solve(a, tol = 0)) # checker board, dense [but really, a is singular!]
> try(solve(a, sparse=TRUE))##-> error [ TODO: assertError ]
Error in .solve.checkCondBound(a@U, tol) : 
  'a' is computationally singular, min(d)/max(d)=3.03577e-18, d=abs(diag(U))
> ia. <- solve(a, sparse=TRUE, tol = 1e-19)##-> *no* error
> if(R.version$arch == "x86_64")
+   ## Fails on 32-bit [Fedora 19, R 3.0.2] from Matrix 1.1-0 on [FIXME ??] only
+   stopifnot(all.equal(as.matrix(ia.), as.matrix(ia0)))
> a <- a + Diagonal(n)
> iad <- solve(a)
> ias <- solve(a, sparse=FALSE)
> stopifnot(all.equal(as(iad,"denseMatrix"), ias, tolerance=1e-14))
> I. <- iad %*% a          ; image(I.)
> I0 <- drop0(zapsmall(I.)); image(I0)
> .I <- a %*% iad
> .I0 <- drop0(zapsmall(.I))
> stopifnot( all.equal(as(I0, "diagonalMatrix"), Diagonal(n)),
+            all.equal(as(.I0,"diagonalMatrix"), Diagonal(n)) )
> 
> 
> 
> 
> cleanEx()
> nameEx("spMatrix")
> ### * spMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spMatrix
> ### Title: Sparse Matrix Constructor From Triplet
> ### Aliases: spMatrix
> ### Keywords: array utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> ## simple example
> A <- spMatrix(10,20, i = c(1,3:8),
+                      j = c(2,9,6:10),
+                      x = 7 * (1:7))
> A # a "dgTMatrix"
10 x 20 sparse Matrix of class "dgTMatrix"
                                                  
 [1,] . 7 . . .  .  .  .  .  . . . . . . . . . . .
 [2,] . . . . .  .  .  .  .  . . . . . . . . . . .
 [3,] . . . . .  .  .  . 14  . . . . . . . . . . .
 [4,] . . . . . 21  .  .  .  . . . . . . . . . . .
 [5,] . . . . .  . 28  .  .  . . . . . . . . . . .
 [6,] . . . . .  .  . 35  .  . . . . . . . . . . .
 [7,] . . . . .  .  .  . 42  . . . . . . . . . . .
 [8,] . . . . .  .  .  .  . 49 . . . . . . . . . .
 [9,] . . . . .  .  .  .  .  . . . . . . . . . . .
[10,] . . . . .  .  .  .  .  . . . . . . . . . . .
> summary(A)
10 x 20 sparse Matrix of class "dgTMatrix", with 7 entries
  i  j  x
1 1  2  7
2 3  9 14
3 4  6 21
4 5  7 28
5 6  8 35
6 7  9 42
7 8 10 49
> str(A) # note that *internally* 0-based indices (i,j) are used
Formal class 'dgTMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:7] 0 2 3 4 5 6 7
  ..@ j       : int [1:7] 1 8 5 6 7 8 9
  ..@ Dim     : int [1:2] 10 20
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:7] 7 14 21 28 35 42 49
  ..@ factors : list()
> 
> L <- spMatrix(9, 30, i = rep(1:9, 3), 1:27,
+               (1:27) %% 4 != 1)
> L # an "lgTMatrix"
9 x 30 sparse Matrix of class "lgTMatrix"
                                                                 
 [1,] : . . . . . . . . | . . . . . . . . | . . . . . . . . . . .
 [2,] . | . . . . . . . . | . . . . . . . . | . . . . . . . . . .
 [3,] . . | . . . . . . . . | . . . . . . . . : . . . . . . . . .
 [4,] . . . | . . . . . . . . : . . . . . . . . | . . . . . . . .
 [5,] . . . . : . . . . . . . . | . . . . . . . . | . . . . . . .
 [6,] . . . . . | . . . . . . . . | . . . . . . . . | . . . . . .
 [7,] . . . . . . | . . . . . . . . | . . . . . . . . : . . . . .
 [8,] . . . . . . . | . . . . . . . . : . . . . . . . . | . . . .
 [9,] . . . . . . . . : . . . . . . . . | . . . . . . . . | . . .
> 
> 
> ## A simplified predecessor of  Matrix'  rsparsematrix() function :
> 
>  rSpMatrix <- function(nrow, ncol, nnz,
+                        rand.x = function(n) round(rnorm(nnz), 2))
+  {
+      ## Purpose: random sparse matrix
+      ## --------------------------------------------------------------
+      ## Arguments: (nrow,ncol): dimension
+      ##          nnz  :  number of non-zero entries
+      ##         rand.x:  random number generator for 'x' slot
+      ## --------------------------------------------------------------
+      ## Author: Martin Maechler, Date: 14.-16. May 2007
+      stopifnot((nnz <- as.integer(nnz)) >= 0,
+                nrow >= 0, ncol >= 0, nnz <= nrow * ncol)
+      spMatrix(nrow, ncol,
+               i = sample(nrow, nnz, replace = TRUE),
+               j = sample(ncol, nnz, replace = TRUE),
+               x = rand.x(nnz))
+  }
> 
>  M1 <- rSpMatrix(100000, 20, nnz = 200)
>  summary(M1)
100000 x 20 sparse Matrix of class "dgTMatrix", with 200 entries
        i  j     x
1   12129  8 -0.63
2   58842  5  0.18
3   47428 12 -0.84
4   61625  9  1.60
5   23423  2  0.33
6   96720  9 -0.82
7   85725  9  0.49
8   53923  9  0.74
9   99270 11  0.58
10  74919 10 -0.31
11  26593  6  1.51
12  61118  2  0.39
13  57635  3 -0.62
14   4749  1 -2.21
15  35250  2  1.12
16  52540 19 -0.04
17  68954  5 -0.02
18  84804  2  0.94
19  93265  9  0.82
20   4590 12  0.59
21  94537  9  0.92
22  11158 18  0.78
23  64691  2  0.07
24   4257 15 -1.99
25  96692 13  0.62
26  28932  7 -0.06
27  61500  4 -0.16
28  10688  6 -1.47
29  91564 18 -0.48
30  15737 16  0.42
31  28573 13  1.36
32  45347 16 -0.10
33  75721  8  0.39
34  62051 16 -0.05
35  32916 14 -1.38
36  65657  6 -0.41
37   8790  8 -0.39
38  61548  3 -0.06
39  10770  8  1.10
40  95655  5  0.76
41  33883 14 -0.16
42  69152 13 -0.25
43  45107 19  0.70
44  43473  3  0.56
45  63539  5 -0.69
46  55677 13 -0.71
47  30613 19  0.36
48  47695 14  0.77
49  12284  4 -0.11
50  35520 20  0.88
51  46464 13  0.40
52   8411  3 -0.61
53  49722  8  0.34
54  65138 10 -1.13
55  67462 13  1.43
56  83733 10  1.98
57   2833  6 -0.37
58  22078 10 -1.04
59  40749  7  0.57
60  87081 18 -0.14
61   7560 19  2.40
62  90393 18 -0.04
63  48020 14  0.69
64  90604 15  0.03
65  68791 15 -0.74
66   8706 10  0.19
67  47932  5 -1.80
68  45626  1  1.47
69  42213 17  0.15
70  27417 13  2.17
71  71722  6  0.48
72  99963 12 -0.71
73  92293  9  0.61
74   2312  1 -0.93
75  27219  1 -1.25
76  15923 10  0.29
77  42504 13 -0.44
78  32445 19  0.00
79  95060  8  0.07
80  60869 12 -0.59
81  63884 11 -0.57
82  25818 16 -0.14
83  72526 11  1.18
84  22687  6 -1.52
85  35311  8  0.59
86  92130  7  0.33
87  87834  3  1.06
88   3760 10 -0.30
89  13936  1  0.37
90   8945  5  0.27
91  40703  5 -0.54
92  41608  4  1.21
93  89843 11  1.16
94  86238  9  0.70
95  69790  2  1.59
96  43782 10  0.56
97  19772  2 -1.28
98  13238  2 -0.57
99  80258 12 -1.22
100 55255  6 -0.47
101 91251 14 -0.62
102 71772  9  0.04
103 56836  7 -0.91
104 52352 19  0.16
105 38531  5 -0.65
106 78607 17  1.77
107 44002  9  0.72
108 99763 12  0.91
109 34544 13  0.38
110 93060 12  1.68
111 73626  3 -0.64
112 18133  8 -0.46
113 99322  2  1.43
114 33151  9 -0.65
115 93461 16 -0.21
116 60250  7 -0.39
117 33252  5 -0.32
118 39217  7 -0.28
119 10992  7  0.49
120 96568 12 -0.18
121  4801 12 -0.51
122 34789  2  1.34
123 30811 20 -0.21
124 51322 20 -0.18
125 93812 19 -0.10
126  9606  9  0.71
127 39558 20 -0.07
128  3382  8 -0.04
129 35925  3 -0.68
130  3328 16 -0.32
131 19510  7  0.06
132  2796 10 -0.59
133 83321 19  0.53
134 25011  3 -1.52
135 44290 13  0.31
136 59130 16 -1.54
137 73962 19 -0.30
138 78139 14 -0.53
139 80291 19 -0.65
140 29389 10 -0.06
141 10370  2 -1.91
142 79046 16  1.18
143 10807 11 -1.66
144 46428 19 -0.46
145 65282  3 -1.12
146 28081  7 -0.75
147 49371 12  2.09
148 30965  8  0.02
149 76377 13 -1.29
150 19159 20 -1.64
151 68528 18  0.45
152 69333 10 -0.02
153 22463  2 -0.32
154 40977  9 -0.93
155 99361 19 -1.49
156 88360 12 -1.08
157  2257 10  1.00
158 44375 12 -0.62
159  2079  6 -1.38
160 25371  8  1.87
161 62913 13  0.43
162 35805 11 -0.24
163 36326 13  1.06
164 67887  2  0.89
165 89586  8 -0.62
166 47700 12  2.21
167 57212 19 -0.26
168 98667 20 -1.42
169 74352  3 -0.14
170 97647  4  0.21
171 28508 12  2.31
172 42227 13  0.11
173 88583  7  0.46
174 64250  3 -0.08
175 67909  5 -0.33
176 80932 20 -0.03
177 82879 20  0.79
178 67809 15  2.08
179 26065  6  1.03
180 41357 10  1.21
181 70567 13 -1.23
182 80201 12  0.98
183 66280 17  0.22
184 95329 18 -1.47
185 64924 20  0.52
186 58936  7 -0.16
187 51442 14  1.46
188 21671 10 -0.77
189  4313 16 -0.43
190   860  1 -0.93
191 73353  9 -0.18
192 67982  3  0.40
193 76127 11 -0.73
194 12332  8  0.83
195 69598  4 -1.21
196 75246 17 -1.05
197 68347  5  1.44
198 51724 10 -1.02
199 69900  4  0.41
200 28978 12 -0.38
> 
> 
> 
> cleanEx()
> nameEx("sparse.model.matrix")
> ### * sparse.model.matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sparse.model.matrix
> ### Title: Construct Sparse Design / Model Matrices
> ### Aliases: sparse.model.matrix fac2sparse fac2Sparse
> ### Keywords: array models utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> dd <- data.frame(a = gl(3,4), b = gl(4,1,12))# balanced 2-way
> options("contrasts") # the default:  "contr.treatment"
$contrasts
        unordered           ordered 
"contr.treatment"      "contr.poly" 

> sparse.model.matrix(~ a + b, dd)
12 x 6 sparse Matrix of class "dgCMatrix"
   (Intercept) a2 a3 b2 b3 b4
1            1  .  .  .  .  .
2            1  .  .  1  .  .
3            1  .  .  .  1  .
4            1  .  .  .  .  1
5            1  1  .  .  .  .
6            1  1  .  1  .  .
7            1  1  .  .  1  .
8            1  1  .  .  .  1
9            1  .  1  .  .  .
10           1  .  1  1  .  .
11           1  .  1  .  1  .
12           1  .  1  .  .  1
> sparse.model.matrix(~ -1+ a + b, dd)# no intercept --> even sparser
12 x 6 sparse Matrix of class "dgCMatrix"
   a1 a2 a3 b2 b3 b4
1   1  .  .  .  .  .
2   1  .  .  1  .  .
3   1  .  .  .  1  .
4   1  .  .  .  .  1
5   .  1  .  .  .  .
6   .  1  .  1  .  .
7   .  1  .  .  1  .
8   .  1  .  .  .  1
9   .  .  1  .  .  .
10  .  .  1  1  .  .
11  .  .  1  .  1  .
12  .  .  1  .  .  1
> sparse.model.matrix(~ a + b, dd, contrasts = list(a="contr.sum"))
12 x 6 sparse Matrix of class "dgCMatrix"
   (Intercept) a1 a2 b2 b3 b4
1            1  1  .  .  .  .
2            1  1  .  1  .  .
3            1  1  .  .  1  .
4            1  1  .  .  .  1
5            1  .  1  .  .  .
6            1  .  1  1  .  .
7            1  .  1  .  1  .
8            1  .  1  .  .  1
9            1 -1 -1  .  .  .
10           1 -1 -1  1  .  .
11           1 -1 -1  .  1  .
12           1 -1 -1  .  .  1
> sparse.model.matrix(~ a + b, dd, contrasts = list(b="contr.SAS"))
12 x 6 sparse Matrix of class "dgCMatrix"
   (Intercept) a2 a3 b1 b2 b3
1            1  .  .  1  .  .
2            1  .  .  .  1  .
3            1  .  .  .  .  1
4            1  .  .  .  .  .
5            1  1  .  1  .  .
6            1  1  .  .  1  .
7            1  1  .  .  .  1
8            1  1  .  .  .  .
9            1  .  1  1  .  .
10           1  .  1  .  1  .
11           1  .  1  .  .  1
12           1  .  1  .  .  .
> 
> ## Sparse method is equivalent to the traditional one :
> stopifnot(all(sparse.model.matrix(~    a + b, dd) ==
+ 	          Matrix(model.matrix(~    a + b, dd), sparse=TRUE)),
+ 	      all(sparse.model.matrix(~0 + a + b, dd) ==
+ 	          Matrix(model.matrix(~0 + a + b, dd), sparse=TRUE)))
> 
> (ff <- gl(3,4,, c("X","Y", "Z")))
 [1] X X X X Y Y Y Y Z Z Z Z
Levels: X Y Z
> fac2sparse(ff) #  3 x 12 sparse Matrix of class "dgCMatrix"
3 x 12 sparse Matrix of class "dgCMatrix"
                         
X 1 1 1 1 . . . . . . . .
Y . . . . 1 1 1 1 . . . .
Z . . . . . . . . 1 1 1 1
> ##
> ##  X  1 1 1 1 . . . . . . . .
> ##  Y  . . . . 1 1 1 1 . . . .
> ##  Z  . . . . . . . . 1 1 1 1
> 
> ## can also be computed via sparse.model.matrix():
> f30 <- gl(3,0    )
> f12 <- gl(3,0, 12)
> stopifnot(
+   all.equal(t( fac2sparse(ff) ),
+ 	    sparse.model.matrix(~ 0+ff),
+ 	    tolerance = 0, check.attributes=FALSE),
+   is(M <- fac2sparse(f30, drop= TRUE),"CsparseMatrix"), dim(M) == c(0, 0),
+   is(M <- fac2sparse(f30, drop=FALSE),"CsparseMatrix"), dim(M) == c(3, 0),
+   is(M <- fac2sparse(f12, drop= TRUE),"CsparseMatrix"), dim(M) == c(0,12),
+   is(M <- fac2sparse(f12, drop=FALSE),"CsparseMatrix"), dim(M) == c(3,12)
+  )
> 
> 
> 
> cleanEx()
> nameEx("sparseLU-class")
> ### * sparseLU-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sparseLU-class
> ### Title: Sparse LU Factorizations
> ### Aliases: sparseLU-class determinant,sparseLU,logical-method
> ### Keywords: algebra array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("sparseLU")
Class "sparseLU" [package "Matrix"]

Slots:
                                                                  
Name:          L         U         p         q       Dim  Dimnames
Class: dtCMatrix dtCMatrix   integer   integer   integer      list

Extends: 
Class "LU", directly
Class "MatrixFactorization", by class "LU", distance 2
> set.seed(2)
> 
> A <- as(readMM(system.file("external", "pores_1.mtx", package = "Matrix")),
+         "CsparseMatrix")
> (n <- A@Dim[1L])
[1] 30
> 
> ## With dimnames, to see that they are propagated :
> dimnames(A) <- dn <- list(paste0("r", seq_len(n)),
+                           paste0("c", seq_len(n)))
> 
> (lu.A <- lu(A))
LU factorization of Formal class 'sparseLU' [package "Matrix"] with 6 slots
  ..@ L       :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
  .. .. ..@ i       : int [1:141] 0 1 18 22 25 26 1 18 22 25 ...
  .. .. ..@ p       : int [1:31] 0 6 11 13 16 19 22 26 31 35 ...
  .. .. ..@ Dim     : int [1:2] 30 30
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:141] 1 -0.993819 -0.004979 -0.000132 0.000132 ...
  .. .. ..@ uplo    : chr "L"
  .. .. ..@ diag    : chr "N"
  ..@ U       :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
  .. .. ..@ i       : int [1:206] 0 0 1 2 2 3 2 4 2 3 ...
  .. .. ..@ p       : int [1:31] 0 1 3 4 6 8 12 15 20 25 ...
  .. .. ..@ Dim     : int [1:2] 30 30
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:206] -7178502 -24613411 -18311731 -6399179 715 ...
  .. .. ..@ uplo    : chr "U"
  .. .. ..@ diag    : chr "N"
  ..@ p       : int [1:30] 1 11 29 27 19 28 9 18 17 7 ...
  ..@ q       : int [1:30] 0 1 29 27 19 28 9 18 17 8 ...
  ..@ Dim     : int [1:2] 30 30
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:30] "r1" "r2" "r3" "r4" ...
  .. ..$ : chr [1:30] "c1" "c2" "c3" "c4" ...
> str(e.lu.A <- expand2(lu.A), max.level = 2L)
List of 4
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ L  :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ U  :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ P2.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
> 
> ae1 <- function(a, b, ...) all.equal(as(a, "matrix"), as(b, "matrix"), ...)
> ae2 <- function(a, b, ...) ae1(unname(a), unname(b), ...)
> 
> ## A ~ P1' L U P2' in floating point
> stopifnot(exprs = {
+     identical(names(e.lu.A), c("P1.", "L", "U", "P2."))
+     identical(e.lu.A[["P1."]],
+               new("pMatrix", Dim = c(n, n), Dimnames = c(dn[1L], list(NULL)),
+                   margin = 1L, perm = invertPerm(lu.A@p, 0L, 1L)))
+     identical(e.lu.A[["P2."]],
+               new("pMatrix", Dim = c(n, n), Dimnames = c(list(NULL), dn[2L]),
+                   margin = 2L, perm = invertPerm(lu.A@q, 0L, 1L)))
+     identical(e.lu.A[["L"]], lu.A@L)
+     identical(e.lu.A[["U"]], lu.A@U)
+     ae1(A, with(e.lu.A, P1. %*% L %*% U %*% P2.))
+     ae2(A[lu.A@p + 1L, lu.A@q + 1L], with(e.lu.A, L %*% U))
+ })
> 
> ## Factorization handled as factorized matrix
> b <- rnorm(n)
> stopifnot(identical(det(A), det(lu.A)),
+           identical(solve(A, b), solve(lu.A, b)))
> 
> 
> 
> cleanEx()
> nameEx("sparseMatrix-class")
> ### * sparseMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sparseMatrix-class
> ### Title: Virtual Class "sparseMatrix" - Mother of Sparse Matrices
> ### Aliases: sparseMatrix-class -,sparseMatrix,missing-method
> ###   Math,sparseMatrix-method Ops,numeric,sparseMatrix-method
> ###   Ops,sparseMatrix,ddiMatrix-method Ops,sparseMatrix,ldiMatrix-method
> ###   Ops,sparseMatrix,nsparseMatrix-method Ops,sparseMatrix,numeric-method
> ###   Ops,sparseMatrix,sparseMatrix-method Summary,sparseMatrix-method
> ###   coerce,ANY,sparseMatrix-method coerce,factor,sparseMatrix-method
> ###   coerce,matrix,sparseMatrix-method coerce,vector,sparseMatrix-method
> ###   cov2cor,sparseMatrix-method diff,sparseMatrix-method
> ###   dim<-,sparseMatrix-method format,sparseMatrix-method
> ###   log,sparseMatrix-method mean,sparseMatrix-method
> ###   print,sparseMatrix-method rep,sparseMatrix-method
> ###   show,sparseMatrix-method summary,sparseMatrix-method
> ###   print.sparseMatrix
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("sparseMatrix") ## and look at the help() of its subclasses
Virtual Class "sparseMatrix" [package "Matrix"]

Slots:
                        
Name:       Dim Dimnames
Class:  integer     list

Extends: 
Class "Matrix", directly
Class "replValueSp", by class "Matrix", distance 2

Known Subclasses: 
Class "CsparseMatrix", directly
Class "RsparseMatrix", directly
Class "TsparseMatrix", directly
Class "diagonalMatrix", directly
Class "nsparseMatrix", directly
Class "lsparseMatrix", directly
Class "dsparseMatrix", directly
Class "indMatrix", directly
Class "ngCMatrix", by class "CsparseMatrix", distance 2
Class "ntCMatrix", by class "CsparseMatrix", distance 2
Class "nsCMatrix", by class "CsparseMatrix", distance 2
Class "lgCMatrix", by class "CsparseMatrix", distance 2
Class "ltCMatrix", by class "CsparseMatrix", distance 2
Class "lsCMatrix", by class "CsparseMatrix", distance 2
Class "dgCMatrix", by class "CsparseMatrix", distance 2
Class "dtCMatrix", by class "CsparseMatrix", distance 2
Class "dsCMatrix", by class "CsparseMatrix", distance 2
Class "ngRMatrix", by class "RsparseMatrix", distance 2
Class "ntRMatrix", by class "RsparseMatrix", distance 2
Class "nsRMatrix", by class "RsparseMatrix", distance 2
Class "lgRMatrix", by class "RsparseMatrix", distance 2
Class "ltRMatrix", by class "RsparseMatrix", distance 2
Class "lsRMatrix", by class "RsparseMatrix", distance 2
Class "dgRMatrix", by class "RsparseMatrix", distance 2
Class "dtRMatrix", by class "RsparseMatrix", distance 2
Class "dsRMatrix", by class "RsparseMatrix", distance 2
Class "ngTMatrix", by class "TsparseMatrix", distance 2
Class "ntTMatrix", by class "TsparseMatrix", distance 2
Class "nsTMatrix", by class "TsparseMatrix", distance 2
Class "lgTMatrix", by class "TsparseMatrix", distance 2
Class "ltTMatrix", by class "TsparseMatrix", distance 2
Class "lsTMatrix", by class "TsparseMatrix", distance 2
Class "dgTMatrix", by class "TsparseMatrix", distance 2
Class "dtTMatrix", by class "TsparseMatrix", distance 2
Class "dsTMatrix", by class "TsparseMatrix", distance 2
Class "ndiMatrix", by class "diagonalMatrix", distance 2
Class "ldiMatrix", by class "diagonalMatrix", distance 2
Class "ddiMatrix", by class "diagonalMatrix", distance 2
Class "ngCMatrix", by class "nsparseMatrix", distance 2
Class "ntCMatrix", by class "nsparseMatrix", distance 2
Class "nsCMatrix", by class "nsparseMatrix", distance 2
Class "ngRMatrix", by class "nsparseMatrix", distance 2
Class "ntRMatrix", by class "nsparseMatrix", distance 2
Class "nsRMatrix", by class "nsparseMatrix", distance 2
Class "ngTMatrix", by class "nsparseMatrix", distance 2
Class "ntTMatrix", by class "nsparseMatrix", distance 2
Class "nsTMatrix", by class "nsparseMatrix", distance 2
Class "lgCMatrix", by class "lsparseMatrix", distance 2
Class "ltCMatrix", by class "lsparseMatrix", distance 2
Class "lsCMatrix", by class "lsparseMatrix", distance 2
Class "lgRMatrix", by class "lsparseMatrix", distance 2
Class "ltRMatrix", by class "lsparseMatrix", distance 2
Class "lsRMatrix", by class "lsparseMatrix", distance 2
Class "lgTMatrix", by class "lsparseMatrix", distance 2
Class "ltTMatrix", by class "lsparseMatrix", distance 2
Class "lsTMatrix", by class "lsparseMatrix", distance 2
Class "dgCMatrix", by class "dsparseMatrix", distance 2
Class "dtCMatrix", by class "dsparseMatrix", distance 2
Class "dsCMatrix", by class "dsparseMatrix", distance 2
Class "dgRMatrix", by class "dsparseMatrix", distance 2
Class "dtRMatrix", by class "dsparseMatrix", distance 2
Class "dsRMatrix", by class "dsparseMatrix", distance 2
Class "dgTMatrix", by class "dsparseMatrix", distance 2
Class "dtTMatrix", by class "dsparseMatrix", distance 2
Class "dsTMatrix", by class "dsparseMatrix", distance 2
Class "pMatrix", by class "indMatrix", distance 2
Class "A", by class "dgCMatrix", distance 3
> M <- Matrix(0, 10000, 100)
> M[1,1] <- M[2,3] <- 3.14
> M  ## show(.) method suppresses printing of the majority of rows
10000 x 100 sparse Matrix of class "dgCMatrix"
                                                                                    
   [1,] 3.14 . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
   [2,] .    . 3.14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
   [3,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
   [4,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
   [5,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
   [6,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
   [7,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
   [8,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
   [9,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [10,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [11,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [12,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [13,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [14,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [15,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [16,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [17,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [18,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [19,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [20,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [21,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [22,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [23,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [24,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [25,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [26,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [27,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [28,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [29,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [30,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [31,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [32,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [33,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [34,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [35,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [36,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [37,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [38,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [39,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [40,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [41,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [42,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [43,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [44,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [45,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [46,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [47,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [48,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [49,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [50,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [51,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [52,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [53,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [54,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [55,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [56,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [57,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [58,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [59,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [60,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [61,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [62,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [63,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [64,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [65,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [66,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [67,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [68,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [69,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [70,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [71,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [72,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [73,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [74,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [75,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [76,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [77,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [78,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [79,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [80,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [81,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [82,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [83,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [84,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [85,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [86,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [87,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [88,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [89,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [90,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [91,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [92,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [93,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [94,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [95,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [96,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [97,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [98,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
  [99,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [100,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [101,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [102,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [103,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [104,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [105,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [106,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [107,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [108,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [109,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [110,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [111,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [112,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [113,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [114,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [115,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [116,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [117,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [118,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [119,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [120,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [121,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [122,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [123,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [124,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [125,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [126,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [127,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [128,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [129,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [130,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [131,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [132,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [133,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [134,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [135,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [136,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [137,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [138,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [139,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [140,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [141,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [142,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [143,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [144,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [145,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [146,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [147,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [148,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [149,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [150,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [151,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [152,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [153,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [154,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [155,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [156,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [157,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [158,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [159,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [160,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [161,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [162,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [163,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [164,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [165,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [166,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [167,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [168,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [169,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [170,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [171,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [172,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [173,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [174,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [175,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [176,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [177,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [178,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [179,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [180,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [181,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [182,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [183,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [184,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [185,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [186,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [187,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [188,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [189,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [190,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [191,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [192,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [193,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [194,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [195,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [196,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [197,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [198,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [199,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [200,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [201,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [202,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [203,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [204,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [205,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [206,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [207,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [208,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [209,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [210,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [211,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [212,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [213,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [214,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [215,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [216,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [217,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [218,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [219,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [220,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [221,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [222,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [223,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [224,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [225,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [226,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [227,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [228,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [229,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [230,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [231,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [232,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [233,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [234,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [235,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [236,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [237,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [238,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [239,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [240,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [241,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [242,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [243,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [244,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [245,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [246,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [247,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [248,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [249,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [250,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [251,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [252,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [253,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [254,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [255,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [256,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [257,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [258,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [259,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [260,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [261,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [262,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [263,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [264,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [265,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [266,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [267,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [268,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [269,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [270,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [271,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [272,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [273,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [274,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [275,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [276,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [277,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [278,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [279,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [280,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [281,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [282,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [283,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [284,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [285,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [286,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [287,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [288,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [289,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [290,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [291,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [292,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [293,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [294,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [295,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [296,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [297,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [298,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [299,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [300,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [301,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [302,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [303,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [304,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [305,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [306,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [307,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [308,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [309,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [310,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [311,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [312,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [313,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [314,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [315,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [316,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [317,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [318,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [319,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [320,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [321,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [322,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [323,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [324,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [325,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [326,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [327,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [328,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [329,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [330,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [331,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [332,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [333,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [334,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [335,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [336,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [337,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [338,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [339,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [340,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [341,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [342,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [343,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [344,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [345,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [346,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [347,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [348,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [349,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [350,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [351,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [352,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [353,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [354,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [355,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [356,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [357,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [358,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [359,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [360,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [361,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [362,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [363,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [364,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [365,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [366,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [367,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [368,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [369,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [370,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [371,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [372,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [373,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [374,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [375,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [376,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [377,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [378,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [379,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [380,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [381,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [382,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [383,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [384,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [385,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [386,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [387,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [388,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [389,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [390,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [391,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [392,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [393,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [394,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [395,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [396,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [397,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [398,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [399,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [400,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [401,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [402,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [403,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [404,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [405,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [406,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [407,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [408,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [409,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [410,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [411,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [412,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [413,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [414,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [415,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [416,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [417,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [418,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [419,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [420,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [421,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [422,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [423,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [424,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [425,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [426,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [427,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [428,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [429,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [430,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [431,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [432,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [433,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [434,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [435,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [436,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [437,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [438,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [439,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [440,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [441,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [442,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [443,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [444,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [445,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [446,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [447,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [448,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [449,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [450,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [451,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [452,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [453,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [454,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [455,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [456,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [457,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [458,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [459,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [460,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [461,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [462,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [463,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [464,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [465,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [466,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [467,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [468,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [469,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [470,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [471,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [472,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [473,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [474,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [475,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [476,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [477,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [478,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [479,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [480,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [481,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [482,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [483,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [484,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [485,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [486,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [487,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [488,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [489,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [490,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [491,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [492,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [493,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [494,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [495,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [496,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [497,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [498,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [499,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [500,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [501,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [502,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [503,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [504,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [505,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [506,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [507,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [508,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [509,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [510,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [511,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [512,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [513,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [514,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [515,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [516,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [517,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [518,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [519,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [520,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [521,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [522,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [523,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [524,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [525,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [526,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [527,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [528,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [529,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [530,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [531,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [532,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [533,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [534,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [535,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [536,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [537,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [538,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [539,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [540,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [541,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [542,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [543,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [544,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [545,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [546,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [547,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [548,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [549,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [550,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [551,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [552,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [553,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [554,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [555,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [556,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [557,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [558,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [559,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [560,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [561,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [562,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [563,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [564,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [565,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [566,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [567,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [568,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [569,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [570,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [571,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [572,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [573,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [574,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [575,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [576,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [577,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [578,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [579,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [580,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [581,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [582,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [583,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [584,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [585,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [586,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [587,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [588,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [589,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [590,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [591,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [592,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [593,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [594,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [595,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [596,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [597,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [598,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [599,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [600,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [601,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [602,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [603,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [604,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [605,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [606,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [607,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [608,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [609,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [610,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [611,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [612,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [613,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [614,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [615,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [616,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [617,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [618,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [619,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [620,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [621,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [622,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [623,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [624,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [625,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [626,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [627,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [628,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [629,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [630,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [631,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [632,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [633,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [634,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [635,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [636,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [637,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [638,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [639,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [640,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [641,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [642,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [643,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [644,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [645,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [646,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [647,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [648,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [649,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [650,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [651,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [652,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [653,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [654,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [655,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [656,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [657,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [658,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [659,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [660,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [661,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [662,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [663,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [664,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [665,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [666,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [667,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [668,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [669,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [670,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [671,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [672,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [673,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [674,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [675,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [676,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [677,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [678,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [679,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [680,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [681,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [682,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [683,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [684,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [685,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [686,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [687,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [688,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [689,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [690,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [691,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [692,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [693,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [694,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [695,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [696,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [697,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [698,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [699,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [700,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [701,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [702,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [703,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [704,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [705,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [706,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [707,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [708,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [709,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [710,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [711,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [712,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [713,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [714,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [715,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [716,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [717,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [718,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [719,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [720,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [721,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [722,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [723,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [724,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [725,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [726,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [727,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [728,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [729,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [730,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [731,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [732,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [733,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [734,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [735,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [736,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [737,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [738,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [739,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [740,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [741,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [742,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [743,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [744,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [745,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [746,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [747,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [748,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [749,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [750,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [751,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [752,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [753,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [754,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [755,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [756,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [757,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [758,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [759,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [760,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [761,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [762,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [763,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [764,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [765,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [766,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [767,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [768,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [769,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [770,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [771,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [772,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [773,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [774,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [775,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [776,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [777,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [778,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [779,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [780,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [781,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [782,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [783,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [784,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [785,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [786,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [787,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [788,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [789,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [790,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [791,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [792,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [793,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [794,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [795,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [796,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [797,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [798,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [799,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [800,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [801,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [802,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [803,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [804,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [805,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [806,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [807,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [808,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [809,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [810,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [811,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [812,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [813,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [814,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [815,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [816,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [817,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [818,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [819,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [820,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [821,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [822,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [823,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [824,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [825,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [826,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [827,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [828,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [829,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [830,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [831,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [832,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [833,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [834,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [835,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [836,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [837,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [838,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [839,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [840,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [841,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [842,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [843,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [844,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [845,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [846,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [847,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [848,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [849,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [850,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [851,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [852,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [853,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [854,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [855,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [856,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [857,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [858,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [859,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [860,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [861,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [862,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [863,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [864,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [865,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [866,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [867,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [868,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [869,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [870,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [871,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [872,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [873,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [874,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [875,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [876,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [877,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [878,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [879,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [880,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [881,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [882,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [883,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [884,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [885,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [886,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [887,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [888,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [889,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [890,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [891,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [892,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [893,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [894,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [895,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [896,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [897,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [898,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [899,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [900,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [901,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [902,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [903,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [904,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [905,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [906,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [907,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [908,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [909,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [910,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [911,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [912,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [913,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [914,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [915,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [916,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [917,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [918,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [919,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [920,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [921,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [922,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [923,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [924,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [925,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [926,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [927,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [928,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [929,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [930,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [931,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [932,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [933,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [934,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [935,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [936,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [937,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [938,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [939,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [940,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [941,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [942,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [943,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [944,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [945,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [946,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [947,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [948,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [949,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [950,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [951,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [952,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [953,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [954,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [955,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [956,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [957,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [958,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [959,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [960,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [961,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [962,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [963,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [964,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [965,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [966,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [967,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [968,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [969,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [970,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [971,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [972,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [973,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [974,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [975,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [976,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [977,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [978,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [979,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [980,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [981,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [982,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [983,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [984,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [985,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [986,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [987,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [988,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [989,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [990,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [991,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [992,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [993,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [994,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [995,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [996,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [997,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [998,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [999,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1000,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1001,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1002,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1003,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1004,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1005,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1006,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1007,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1008,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1009,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1010,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1011,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1012,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1013,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1014,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1015,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1016,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1017,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1018,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1019,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1020,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1021,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1022,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1023,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1024,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1025,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1026,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1027,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1028,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1029,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1030,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1031,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1032,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1033,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1034,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1035,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1036,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1037,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1038,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1039,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1040,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1041,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1042,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1043,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1044,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1045,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1046,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1047,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1048,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1049,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1050,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1051,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1052,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1053,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1054,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1055,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1056,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1057,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1058,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1059,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1060,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1061,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1062,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1063,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1064,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1065,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1066,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1067,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1068,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1069,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1070,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1071,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1072,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1073,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1074,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1075,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1076,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1077,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1078,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1079,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1080,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1081,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1082,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1083,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1084,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1085,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1086,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1087,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1088,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1089,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1090,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1091,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1092,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1093,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1094,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1095,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1096,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1097,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1098,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1099,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1100,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1101,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1102,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1103,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1104,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1105,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1106,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1107,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1108,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1109,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1110,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1111,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1112,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1113,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1114,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1115,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1116,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1117,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1118,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1119,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1120,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1121,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1122,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1123,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1124,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1125,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1126,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1127,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1128,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1129,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1130,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1131,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1132,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1133,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1134,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1135,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1136,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1137,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1138,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1139,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1140,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1141,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1142,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1143,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1144,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1145,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1146,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1147,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1148,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1149,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1150,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1151,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1152,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1153,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1154,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1155,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1156,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1157,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1158,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1159,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1160,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1161,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1162,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1163,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1164,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1165,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1166,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1167,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1168,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1169,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1170,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1171,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1172,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1173,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1174,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1175,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1176,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1177,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1178,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1179,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1180,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1181,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1182,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1183,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1184,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1185,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1186,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1187,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1188,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1189,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1190,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1191,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1192,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1193,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1194,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1195,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1196,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1197,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1198,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1199,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1200,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1201,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1202,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1203,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1204,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1205,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1206,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1207,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1208,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1209,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1210,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1211,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1212,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1213,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1214,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1215,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1216,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1217,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1218,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1219,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1220,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1221,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1222,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1223,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1224,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1225,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1226,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1227,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1228,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1229,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1230,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1231,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1232,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1233,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1234,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1235,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1236,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1237,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1238,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1239,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1240,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1241,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1242,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1243,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1244,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1245,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1246,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1247,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1248,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1249,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1250,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1251,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1252,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1253,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1254,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1255,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1256,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1257,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1258,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1259,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1260,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1261,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1262,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1263,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1264,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1265,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1266,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1267,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1268,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1269,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1270,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1271,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1272,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1273,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1274,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1275,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1276,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1277,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1278,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1279,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1280,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1281,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1282,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1283,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1284,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1285,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1286,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1287,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1288,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1289,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1290,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1291,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1292,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1293,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1294,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1295,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1296,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1297,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1298,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1299,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1300,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1301,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1302,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1303,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1304,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1305,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1306,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1307,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1308,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1309,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1310,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1311,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1312,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1313,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1314,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1315,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1316,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1317,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1318,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1319,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1320,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1321,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1322,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1323,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1324,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1325,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1326,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1327,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1328,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1329,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1330,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1331,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1332,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1333,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1334,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1335,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1336,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1337,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1338,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1339,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1340,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1341,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1342,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1343,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1344,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1345,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1346,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1347,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1348,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1349,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1350,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1351,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1352,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1353,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1354,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1355,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1356,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1357,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1358,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1359,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1360,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1361,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1362,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1363,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1364,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1365,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1366,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1367,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1368,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1369,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1370,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1371,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1372,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1373,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1374,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1375,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1376,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1377,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1378,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1379,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1380,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1381,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1382,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1383,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1384,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1385,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1386,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1387,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1388,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1389,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1390,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1391,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1392,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1393,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1394,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1395,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1396,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1397,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1398,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1399,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1400,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1401,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1402,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1403,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1404,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1405,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1406,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1407,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1408,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1409,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1410,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1411,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1412,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1413,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1414,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1415,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1416,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1417,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1418,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1419,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1420,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1421,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1422,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1423,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1424,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1425,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1426,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1427,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1428,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1429,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1430,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1431,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1432,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1433,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1434,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1435,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1436,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1437,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1438,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1439,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1440,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1441,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1442,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1443,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1444,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1445,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1446,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1447,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1448,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1449,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1450,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1451,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1452,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1453,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1454,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1455,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1456,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1457,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1458,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1459,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1460,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1461,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1462,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1463,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1464,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1465,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1466,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1467,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1468,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1469,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1470,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1471,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1472,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1473,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1474,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1475,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1476,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1477,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1478,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1479,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1480,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1481,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1482,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1483,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1484,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1485,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1486,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1487,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1488,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1489,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1490,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1491,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1492,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1493,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1494,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1495,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1496,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1497,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1498,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1499,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1500,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1501,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1502,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1503,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1504,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1505,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1506,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1507,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1508,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1509,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1510,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1511,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1512,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1513,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1514,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1515,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1516,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1517,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1518,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1519,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1520,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1521,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1522,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1523,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1524,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1525,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1526,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1527,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1528,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1529,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1530,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1531,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1532,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1533,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1534,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1535,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1536,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1537,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1538,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1539,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1540,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1541,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1542,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1543,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1544,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1545,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1546,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1547,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1548,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1549,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1550,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1551,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1552,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1553,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1554,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1555,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1556,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1557,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1558,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1559,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1560,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1561,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[1562,] .    . .    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......

 ..............................
 ........suppressing 68 columns and 6876 rows in show(); maybe adjust options(max.print=, width=)
 ..............................
                                                                               
 [8439,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8440,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8441,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8442,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8443,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8444,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8445,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8446,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8447,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8448,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8449,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8450,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8451,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8452,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8453,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8454,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8455,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8456,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8457,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8458,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8459,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8460,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8461,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8462,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8463,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8464,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8465,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8466,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8467,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8468,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8469,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8470,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8471,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8472,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8473,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8474,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8475,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8476,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8477,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8478,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8479,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8480,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8481,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8482,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8483,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8484,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8485,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8486,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8487,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8488,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8489,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8490,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8491,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8492,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8493,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8494,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8495,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8496,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8497,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8498,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8499,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8500,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8501,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8502,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8503,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8504,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8505,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8506,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8507,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8508,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8509,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8510,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8511,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8512,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8513,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8514,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8515,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8516,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8517,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8518,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8519,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8520,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8521,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8522,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8523,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8524,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8525,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8526,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8527,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8528,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8529,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8530,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8531,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8532,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8533,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8534,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8535,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8536,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8537,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8538,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8539,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8540,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8541,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8542,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8543,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8544,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8545,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8546,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8547,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8548,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8549,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8550,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8551,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8552,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8553,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8554,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8555,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8556,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8557,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8558,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8559,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8560,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8561,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8562,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8563,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8564,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8565,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8566,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8567,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8568,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8569,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8570,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8571,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8572,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8573,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8574,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8575,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8576,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8577,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8578,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8579,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8580,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8581,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8582,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8583,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8584,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8585,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8586,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8587,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8588,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8589,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8590,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8591,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8592,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8593,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8594,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8595,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8596,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8597,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8598,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8599,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8600,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8601,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8602,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8603,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8604,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8605,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8606,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8607,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8608,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8609,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8610,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8611,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8612,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8613,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8614,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8615,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8616,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8617,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8618,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8619,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8620,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8621,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8622,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8623,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8624,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8625,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8626,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8627,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8628,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8629,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8630,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8631,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8632,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8633,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8634,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8635,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8636,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8637,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8638,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8639,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8640,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8641,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8642,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8643,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8644,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8645,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8646,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8647,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8648,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8649,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8650,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8651,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8652,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8653,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8654,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8655,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8656,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8657,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8658,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8659,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8660,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8661,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8662,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8663,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8664,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8665,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8666,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8667,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8668,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8669,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8670,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8671,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8672,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8673,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8674,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8675,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8676,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8677,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8678,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8679,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8680,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8681,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8682,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8683,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8684,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8685,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8686,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8687,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8688,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8689,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8690,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8691,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8692,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8693,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8694,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8695,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8696,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8697,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8698,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8699,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8700,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8701,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8702,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8703,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8704,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8705,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8706,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8707,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8708,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8709,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8710,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8711,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8712,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8713,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8714,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8715,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8716,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8717,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8718,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8719,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8720,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8721,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8722,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8723,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8724,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8725,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8726,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8727,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8728,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8729,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8730,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8731,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8732,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8733,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8734,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8735,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8736,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8737,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8738,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8739,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8740,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8741,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8742,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8743,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8744,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8745,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8746,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8747,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8748,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8749,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8750,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8751,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8752,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8753,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8754,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8755,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8756,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8757,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8758,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8759,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8760,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8761,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8762,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8763,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8764,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8765,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8766,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8767,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8768,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8769,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8770,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8771,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8772,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8773,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8774,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8775,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8776,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8777,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8778,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8779,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8780,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8781,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8782,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8783,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8784,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8785,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8786,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8787,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8788,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8789,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8790,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8791,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8792,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8793,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8794,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8795,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8796,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8797,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8798,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8799,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8800,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8801,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8802,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8803,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8804,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8805,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8806,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8807,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8808,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8809,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8810,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8811,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8812,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8813,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8814,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8815,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8816,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8817,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8818,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8819,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8820,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8821,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8822,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8823,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8824,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8825,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8826,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8827,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8828,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8829,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8830,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8831,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8832,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8833,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8834,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8835,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8836,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8837,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8838,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8839,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8840,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8841,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8842,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8843,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8844,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8845,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8846,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8847,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8848,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8849,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8850,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8851,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8852,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8853,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8854,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8855,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8856,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8857,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8858,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8859,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8860,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8861,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8862,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8863,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8864,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8865,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8866,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8867,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8868,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8869,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8870,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8871,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8872,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8873,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8874,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8875,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8876,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8877,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8878,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8879,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8880,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8881,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8882,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8883,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8884,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8885,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8886,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8887,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8888,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8889,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8890,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8891,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8892,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8893,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8894,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8895,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8896,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8897,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8898,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8899,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8900,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8901,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8902,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8903,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8904,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8905,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8906,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8907,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8908,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8909,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8910,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8911,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8912,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8913,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8914,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8915,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8916,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8917,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8918,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8919,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8920,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8921,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8922,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8923,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8924,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8925,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8926,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8927,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8928,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8929,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8930,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8931,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8932,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8933,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8934,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8935,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8936,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8937,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8938,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8939,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8940,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8941,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8942,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8943,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8944,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8945,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8946,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8947,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8948,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8949,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8950,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8951,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8952,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8953,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8954,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8955,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8956,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8957,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8958,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8959,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8960,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8961,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8962,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8963,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8964,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8965,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8966,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8967,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8968,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8969,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8970,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8971,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8972,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8973,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8974,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8975,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8976,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8977,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8978,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8979,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8980,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8981,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8982,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8983,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8984,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8985,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8986,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8987,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8988,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8989,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8990,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8991,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8992,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8993,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8994,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8995,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8996,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8997,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8998,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [8999,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9000,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9001,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9002,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9003,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9004,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9005,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9006,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9007,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9008,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9009,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9010,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9011,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9012,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9013,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9014,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9015,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9016,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9017,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9018,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9019,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9020,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9021,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9022,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9023,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9024,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9025,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9026,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9027,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9028,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9029,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9030,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9031,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9032,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9033,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9034,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9035,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9036,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9037,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9038,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9039,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9040,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9041,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9042,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9043,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9044,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9045,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9046,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9047,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9048,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9049,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9050,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9051,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9052,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9053,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9054,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9055,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9056,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9057,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9058,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9059,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9060,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9061,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9062,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9063,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9064,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9065,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9066,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9067,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9068,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9069,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9070,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9071,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9072,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9073,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9074,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9075,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9076,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9077,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9078,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9079,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9080,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9081,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9082,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9083,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9084,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9085,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9086,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9087,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9088,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9089,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9090,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9091,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9092,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9093,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9094,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9095,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9096,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9097,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9098,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9099,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9100,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9101,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9102,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9103,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9104,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9105,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9106,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9107,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9108,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9109,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9110,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9111,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9112,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9113,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9114,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9115,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9116,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9117,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9118,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9119,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9120,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9121,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9122,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9123,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9124,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9125,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9126,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9127,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9128,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9129,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9130,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9131,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9132,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9133,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9134,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9135,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9136,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9137,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9138,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9139,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9140,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9141,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9142,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9143,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9144,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9145,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9146,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9147,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9148,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9149,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9150,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9151,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9152,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9153,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9154,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9155,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9156,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9157,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9158,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9159,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9160,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9161,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9162,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9163,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9164,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9165,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9166,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9167,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9168,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9169,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9170,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9171,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9172,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9173,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9174,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9175,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9176,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9177,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9178,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9179,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9180,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9181,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9182,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9183,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9184,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9185,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9186,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9187,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9188,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9189,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9190,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9191,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9192,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9193,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9194,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9195,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9196,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9197,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9198,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9199,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9200,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9201,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9202,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9203,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9204,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9205,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9206,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9207,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9208,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9209,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9210,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9211,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9212,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9213,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9214,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9215,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9216,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9217,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9218,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9219,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9220,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9221,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9222,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9223,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9224,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9225,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9226,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9227,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9228,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9229,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9230,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9231,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9232,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9233,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9234,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9235,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9236,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9237,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9238,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9239,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9240,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9241,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9242,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9243,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9244,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9245,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9246,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9247,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9248,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9249,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9250,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9251,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9252,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9253,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9254,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9255,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9256,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9257,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9258,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9259,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9260,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9261,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9262,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9263,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9264,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9265,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9266,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9267,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9268,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9269,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9270,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9271,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9272,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9273,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9274,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9275,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9276,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9277,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9278,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9279,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9280,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9281,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9282,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9283,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9284,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9285,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9286,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9287,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9288,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9289,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9290,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9291,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9292,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9293,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9294,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9295,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9296,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9297,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9298,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9299,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9300,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9301,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9302,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9303,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9304,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9305,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9306,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9307,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9308,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9309,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9310,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9311,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9312,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9313,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9314,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9315,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9316,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9317,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9318,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9319,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9320,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9321,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9322,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9323,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9324,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9325,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9326,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9327,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9328,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9329,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9330,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9331,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9332,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9333,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9334,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9335,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9336,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9337,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9338,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9339,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9340,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9341,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9342,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9343,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9344,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9345,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9346,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9347,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9348,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9349,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9350,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9351,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9352,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9353,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9354,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9355,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9356,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9357,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9358,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9359,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9360,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9361,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9362,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9363,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9364,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9365,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9366,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9367,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9368,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9369,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9370,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9371,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9372,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9373,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9374,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9375,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9376,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9377,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9378,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9379,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9380,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9381,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9382,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9383,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9384,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9385,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9386,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9387,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9388,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9389,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9390,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9391,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9392,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9393,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9394,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9395,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9396,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9397,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9398,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9399,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9400,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9401,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9402,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9403,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9404,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9405,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9406,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9407,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9408,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9409,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9410,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9411,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9412,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9413,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9414,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9415,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9416,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9417,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9418,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9419,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9420,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9421,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9422,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9423,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9424,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9425,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9426,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9427,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9428,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9429,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9430,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9431,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9432,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9433,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9434,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9435,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9436,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9437,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9438,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9439,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9440,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9441,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9442,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9443,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9444,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9445,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9446,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9447,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9448,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9449,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9450,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9451,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9452,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9453,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9454,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9455,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9456,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9457,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9458,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9459,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9460,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9461,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9462,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9463,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9464,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9465,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9466,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9467,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9468,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9469,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9470,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9471,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9472,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9473,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9474,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9475,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9476,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9477,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9478,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9479,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9480,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9481,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9482,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9483,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9484,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9485,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9486,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9487,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9488,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9489,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9490,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9491,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9492,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9493,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9494,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9495,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9496,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9497,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9498,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9499,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9500,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9501,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9502,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9503,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9504,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9505,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9506,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9507,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9508,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9509,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9510,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9511,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9512,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9513,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9514,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9515,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9516,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9517,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9518,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9519,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9520,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9521,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9522,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9523,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9524,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9525,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9526,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9527,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9528,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9529,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9530,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9531,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9532,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9533,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9534,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9535,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9536,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9537,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9538,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9539,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9540,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9541,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9542,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9543,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9544,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9545,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9546,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9547,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9548,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9549,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9550,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9551,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9552,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9553,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9554,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9555,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9556,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9557,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9558,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9559,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9560,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9561,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9562,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9563,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9564,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9565,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9566,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9567,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9568,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9569,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9570,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9571,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9572,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9573,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9574,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9575,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9576,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9577,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9578,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9579,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9580,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9581,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9582,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9583,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9584,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9585,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9586,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9587,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9588,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9589,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9590,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9591,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9592,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9593,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9594,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9595,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9596,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9597,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9598,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9599,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9600,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9601,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9602,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9603,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9604,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9605,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9606,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9607,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9608,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9609,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9610,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9611,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9612,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9613,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9614,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9615,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9616,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9617,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9618,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9619,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9620,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9621,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9622,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9623,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9624,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9625,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9626,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9627,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9628,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9629,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9630,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9631,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9632,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9633,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9634,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9635,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9636,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9637,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9638,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9639,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9640,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9641,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9642,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9643,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9644,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9645,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9646,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9647,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9648,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9649,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9650,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9651,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9652,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9653,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9654,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9655,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9656,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9657,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9658,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9659,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9660,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9661,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9662,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9663,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9664,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9665,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9666,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9667,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9668,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9669,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9670,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9671,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9672,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9673,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9674,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9675,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9676,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9677,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9678,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9679,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9680,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9681,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9682,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9683,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9684,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9685,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9686,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9687,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9688,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9689,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9690,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9691,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9692,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9693,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9694,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9695,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9696,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9697,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9698,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9699,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9700,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9701,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9702,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9703,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9704,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9705,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9706,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9707,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9708,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9709,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9710,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9711,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9712,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9713,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9714,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9715,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9716,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9717,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9718,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9719,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9720,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9721,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9722,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9723,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9724,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9725,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9726,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9727,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9728,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9729,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9730,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9731,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9732,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9733,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9734,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9735,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9736,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9737,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9738,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9739,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9740,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9741,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9742,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9743,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9744,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9745,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9746,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9747,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9748,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9749,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9750,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9751,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9752,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9753,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9754,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9755,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9756,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9757,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9758,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9759,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9760,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9761,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9762,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9763,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9764,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9765,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9766,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9767,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9768,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9769,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9770,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9771,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9772,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9773,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9774,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9775,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9776,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9777,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9778,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9779,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9780,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9781,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9782,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9783,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9784,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9785,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9786,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9787,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9788,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9789,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9790,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9791,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9792,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9793,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9794,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9795,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9796,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9797,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9798,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9799,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9800,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9801,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9802,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9803,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9804,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9805,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9806,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9807,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9808,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9809,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9810,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9811,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9812,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9813,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9814,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9815,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9816,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9817,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9818,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9819,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9820,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9821,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9822,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9823,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9824,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9825,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9826,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9827,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9828,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9829,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9830,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9831,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9832,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9833,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9834,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9835,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9836,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9837,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9838,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9839,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9840,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9841,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9842,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9843,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9844,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9845,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9846,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9847,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9848,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9849,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9850,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9851,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9852,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9853,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9854,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9855,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9856,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9857,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9858,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9859,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9860,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9861,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9862,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9863,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9864,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9865,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9866,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9867,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9868,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9869,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9870,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9871,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9872,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9873,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9874,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9875,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9876,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9877,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9878,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9879,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9880,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9881,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9882,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9883,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9884,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9885,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9886,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9887,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9888,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9889,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9890,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9891,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9892,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9893,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9894,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9895,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9896,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9897,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9898,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9899,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9900,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9901,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9902,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9903,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9904,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9905,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9906,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9907,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9908,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9909,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9910,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9911,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9912,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9913,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9914,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9915,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9916,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9917,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9918,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9919,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9920,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9921,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9922,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9923,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9924,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9925,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9926,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9927,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9928,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9929,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9930,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9931,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9932,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9933,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9934,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9935,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9936,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9937,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9938,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9939,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9940,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9941,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9942,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9943,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9944,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9945,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9946,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9947,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9948,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9949,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9950,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9951,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9952,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9953,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9954,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9955,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9956,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9957,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9958,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9959,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9960,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9961,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9962,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9963,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9964,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9965,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9966,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9967,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9968,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9969,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9970,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9971,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9972,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9973,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9974,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9975,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9976,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9977,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9978,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9979,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9980,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9981,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9982,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9983,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9984,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9985,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9986,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9987,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9988,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9989,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9990,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9991,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9992,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9993,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9994,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9995,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9996,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9997,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9998,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
 [9999,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
[10000,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ......
> 
> data(CAex, package = "Matrix")
> dim(CAex) # 72 x 72 matrix
[1] 72 72
> determinant(CAex) # works via sparse lu(.)
$modulus
[1] -1060.756
attr(,"logarithm")
[1] TRUE

$sign
[1] 1

attr(,"class")
[1] "det"
> 
> ## factor -> t( <sparse design matrix> ) :
> (fact <- gl(5, 3, 30, labels = LETTERS[1:5]))
 [1] A A A B B B C C C D D D E E E A A A B B B C C C D D D E E E
Levels: A B C D E
> (Xt <- as(fact, "sparseMatrix"))  # indicator rows
5 x 30 sparse Matrix of class "dgCMatrix"
                                                             
A 1 1 1 . . . . . . . . . . . . 1 1 1 . . . . . . . . . . . .
B . . . 1 1 1 . . . . . . . . . . . . 1 1 1 . . . . . . . . .
C . . . . . . 1 1 1 . . . . . . . . . . . . 1 1 1 . . . . . .
D . . . . . . . . . 1 1 1 . . . . . . . . . . . . 1 1 1 . . .
E . . . . . . . . . . . . 1 1 1 . . . . . . . . . . . . 1 1 1
> 
> ## missing values --> all-0 columns:
> f.mis <- fact
> i.mis <- c(3:5, 17)
> is.na(f.mis) <- i.mis
> Xt != (X. <- as(f.mis, "sparseMatrix")) # differ only in columns 3:5,17
5 x 30 sparse Matrix of class "lgCMatrix"
                                                             
A . . | . . . . . . . . . . . . . | . . . . . . . . . . . . .
B . . . | | . . . . . . . . . . . . . . . . . . . . . . . . .
C . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
D . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
E . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
> stopifnot(all(X.[,i.mis] == 0), all(Xt[,-i.mis] == X.[,-i.mis]))
> 
> 
> 
> cleanEx()
> nameEx("sparseMatrix")
> ### * sparseMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sparseMatrix
> ### Title: General Sparse Matrix Construction from Nonzero Entries
> ### Aliases: sparseMatrix
> ### Keywords: array utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> ## simple example
> i <- c(1,3:8); j <- c(2,9,6:10); x <- 7 * (1:7)
> (A <- sparseMatrix(i, j, x = x))                    ##  8 x 10 "dgCMatrix"
8 x 10 sparse Matrix of class "dgCMatrix"
                             
[1,] . 7 . . .  .  .  .  .  .
[2,] . . . . .  .  .  .  .  .
[3,] . . . . .  .  .  . 14  .
[4,] . . . . . 21  .  .  .  .
[5,] . . . . .  . 28  .  .  .
[6,] . . . . .  .  . 35  .  .
[7,] . . . . .  .  .  . 42  .
[8,] . . . . .  .  .  .  . 49
> summary(A)
8 x 10 sparse Matrix of class "dgCMatrix", with 7 entries
  i  j  x
1 1  2  7
2 4  6 21
3 5  7 28
4 6  8 35
5 3  9 14
6 7  9 42
7 8 10 49
> str(A) # note that *internally* 0-based row indices are used
Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:7] 0 3 4 5 2 6 7
  ..@ p       : int [1:11] 0 0 1 1 1 1 2 3 4 6 ...
  ..@ Dim     : int [1:2] 8 10
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:7] 7 21 28 35 14 42 49
  ..@ factors : list()
> 
> (sA <- sparseMatrix(i, j, x = x, symmetric = TRUE)) ## 10 x 10 "dsCMatrix"
10 x 10 sparse Matrix of class "dsCMatrix"
                                 
 [1,] . 7  .  .  .  .  .  .  .  .
 [2,] 7 .  .  .  .  .  .  .  .  .
 [3,] . .  .  .  .  .  .  . 14  .
 [4,] . .  .  .  . 21  .  .  .  .
 [5,] . .  .  .  .  . 28  .  .  .
 [6,] . .  . 21  .  .  . 35  .  .
 [7,] . .  .  . 28  .  .  . 42  .
 [8,] . .  .  .  . 35  .  .  . 49
 [9,] . . 14  .  .  . 42  .  .  .
[10,] . .  .  .  .  .  . 49  .  .
> (tA <- sparseMatrix(i, j, x = x, triangular= TRUE)) ## 10 x 10 "dtCMatrix"
10 x 10 sparse Matrix of class "dtCMatrix"
                              
 [1,] . 7 . . .  .  .  .  .  .
 [2,] . . . . .  .  .  .  .  .
 [3,] . . . . .  .  .  . 14  .
 [4,] . . . . . 21  .  .  .  .
 [5,] . . . . .  . 28  .  .  .
 [6,] . . . . .  .  . 35  .  .
 [7,] . . . . .  .  .  . 42  .
 [8,] . . . . .  .  .  .  . 49
 [9,] . . . . .  .  .  .  .  .
[10,] . . . . .  .  .  .  .  .
> stopifnot( all(sA == tA + t(tA)) ,
+            identical(sA, as(tA + t(tA), "symmetricMatrix")))
> 
> ## dims can be larger than the maximum row or column indices
> (AA <- sparseMatrix(c(1,3:8), c(2,9,6:10), x = 7 * (1:7), dims = c(10,20)))
10 x 20 sparse Matrix of class "dgCMatrix"
                                                  
 [1,] . 7 . . .  .  .  .  .  . . . . . . . . . . .
 [2,] . . . . .  .  .  .  .  . . . . . . . . . . .
 [3,] . . . . .  .  .  . 14  . . . . . . . . . . .
 [4,] . . . . . 21  .  .  .  . . . . . . . . . . .
 [5,] . . . . .  . 28  .  .  . . . . . . . . . . .
 [6,] . . . . .  .  . 35  .  . . . . . . . . . . .
 [7,] . . . . .  .  .  . 42  . . . . . . . . . . .
 [8,] . . . . .  .  .  .  . 49 . . . . . . . . . .
 [9,] . . . . .  .  .  .  .  . . . . . . . . . . .
[10,] . . . . .  .  .  .  .  . . . . . . . . . . .
> summary(AA)
10 x 20 sparse Matrix of class "dgCMatrix", with 7 entries
  i  j  x
1 1  2  7
2 4  6 21
3 5  7 28
4 6  8 35
5 3  9 14
6 7  9 42
7 8 10 49
> 
> ## i, j and x can be in an arbitrary order, as long as they are consistent
> set.seed(1); (perm <- sample(1:7))
[1] 1 4 7 2 5 3 6
> (A1 <- sparseMatrix(i[perm], j[perm], x = x[perm]))
8 x 10 sparse Matrix of class "dgCMatrix"
                             
[1,] . 7 . . .  .  .  .  .  .
[2,] . . . . .  .  .  .  .  .
[3,] . . . . .  .  .  . 14  .
[4,] . . . . . 21  .  .  .  .
[5,] . . . . .  . 28  .  .  .
[6,] . . . . .  .  . 35  .  .
[7,] . . . . .  .  .  . 42  .
[8,] . . . . .  .  .  .  . 49
> stopifnot(identical(A, A1))
> 
> ## The slots are 0-index based, so
> try( sparseMatrix(i=A@i, p=A@p, x= seq_along(A@x)) )
Error in sparseMatrix(i = A@i, p = A@p, x = seq_along(A@x)) : 
  'i' and 'j' must be positive
> ## fails and you should say so: 1-indexing is FALSE:
>      sparseMatrix(i=A@i, p=A@p, x= seq_along(A@x), index1 = FALSE)
8 x 10 sparse Matrix of class "dgCMatrix"
                        
[1,] . 1 . . . . . . . .
[2,] . . . . . . . . . .
[3,] . . . . . . . . 5 .
[4,] . . . . . 2 . . . .
[5,] . . . . . . 3 . . .
[6,] . . . . . . . 4 . .
[7,] . . . . . . . . 6 .
[8,] . . . . . . . . . 7
> 
> ## the (i,j) pairs can be repeated, in which case the x's are summed
> (args <- data.frame(i = c(i, 1), j = c(j, 2), x = c(x, 2)))
  i  j  x
1 1  2  7
2 3  9 14
3 4  6 21
4 5  7 28
5 6  8 35
6 7  9 42
7 8 10 49
8 1  2  2
> (Aa <- do.call(sparseMatrix, args))
8 x 10 sparse Matrix of class "dgCMatrix"
                             
[1,] . 9 . . .  .  .  .  .  .
[2,] . . . . .  .  .  .  .  .
[3,] . . . . .  .  .  . 14  .
[4,] . . . . . 21  .  .  .  .
[5,] . . . . .  . 28  .  .  .
[6,] . . . . .  .  . 35  .  .
[7,] . . . . .  .  .  . 42  .
[8,] . . . . .  .  .  .  . 49
> ## explicitly ask for elimination of such duplicates, so
> ## that the last one is used:
> (A. <- do.call(sparseMatrix, c(args, list(use.last.ij = TRUE))))
8 x 10 sparse Matrix of class "dgCMatrix"
                             
[1,] . 2 . . .  .  .  .  .  .
[2,] . . . . .  .  .  .  .  .
[3,] . . . . .  .  .  . 14  .
[4,] . . . . . 21  .  .  .  .
[5,] . . . . .  . 28  .  .  .
[6,] . . . . .  .  . 35  .  .
[7,] . . . . .  .  .  . 42  .
[8,] . . . . .  .  .  .  . 49
> stopifnot(Aa[1,2] == 9, # 2+7 == 9
+           A.[1,2] == 2) # 2 was *after* 7
> 
> ## for a pattern matrix, of course there is no "summing":
> (nA <- do.call(sparseMatrix, args[c("i","j")]))
8 x 10 sparse Matrix of class "ngCMatrix"
                        
[1,] . | . . . . . . . .
[2,] . . . . . . . . . .
[3,] . . . . . . . . | .
[4,] . . . . . | . . . .
[5,] . . . . . . | . . .
[6,] . . . . . . . | . .
[7,] . . . . . . . . | .
[8,] . . . . . . . . . |
> 
> dn <- list(LETTERS[1:3], letters[1:5])
> ## pointer vectors can be used, and the (i,x) slots are sorted if necessary:
> m <- sparseMatrix(i = c(3,1, 3:2, 2:1), p= c(0:2, 4,4,6), x = 1:6, dimnames = dn)
> m
3 x 5 sparse Matrix of class "dgCMatrix"
  a b c d e
A . 2 . . 6
B . . 4 . 5
C 1 . 3 . .
> str(m)
Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:6] 2 0 1 2 0 1
  ..@ p       : int [1:6] 0 1 2 4 4 6
  ..@ Dim     : int [1:2] 3 5
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:3] "A" "B" "C"
  .. ..$ : chr [1:5] "a" "b" "c" "d" ...
  ..@ x       : num [1:6] 1 2 4 3 6 5
  ..@ factors : list()
> stopifnot(identical(dimnames(m), dn))
> 
> sparseMatrix(x = 2.72, i=1:3, j=2:4) # recycling x
3 x 4 sparse Matrix of class "dgCMatrix"
                     
[1,] . 2.72 .    .   
[2,] . .    2.72 .   
[3,] . .    .    2.72
> sparseMatrix(x = TRUE, i=1:3, j=2:4) # recycling x, |--> "lgCMatrix"
3 x 4 sparse Matrix of class "lgCMatrix"
            
[1,] . | . .
[2,] . . | .
[3,] . . . |
> 
> ## no 'x' --> patter*n* matrix:
> (n <- sparseMatrix(i=1:6, j=rev(2:7)))# -> ngCMatrix
6 x 7 sparse Matrix of class "ngCMatrix"
                  
[1,] . . . . . . |
[2,] . . . . . | .
[3,] . . . . | . .
[4,] . . . | . . .
[5,] . . | . . . .
[6,] . | . . . . .
> 
> ## an empty sparse matrix:
> (e <- sparseMatrix(dims = c(4,6), i={}, j={}))
4 x 6 sparse Matrix of class "ngCMatrix"
                
[1,] . . . . . .
[2,] . . . . . .
[3,] . . . . . .
[4,] . . . . . .
> 
> ## a symmetric one:
> (sy <- sparseMatrix(i= c(2,4,3:5), j= c(4,7:5,5), x = 1:5,
+                     dims = c(7,7), symmetric=TRUE))
7 x 7 sparse Matrix of class "dsCMatrix"
                  
[1,] . . . . . . .
[2,] . . . 1 . . .
[3,] . . . . . 3 .
[4,] . 1 . . 4 . 2
[5,] . . . 4 5 . .
[6,] . . 3 . . . .
[7,] . . . 2 . . .
> stopifnot(isSymmetric(sy),
+           identical(sy, ## switch i <-> j {and transpose }
+     t( sparseMatrix(j= c(2,4,3:5), i= c(4,7:5,5), x = 1:5,
+                     dims = c(7,7), symmetric=TRUE))))
> 
> ## rsparsematrix() calls sparseMatrix() :
> M1 <- rsparsematrix(1000, 20, nnz = 200)
> summary(M1)
1000 x 20 sparse Matrix of class "dgCMatrix", with 200 entries
      i  j       x
1    29  1 -0.3900
2   219  1  0.7400
3   455  1  0.9200
4   501  1  0.1400
5   664  1 -0.3800
6   719  1  1.7000
7   733  1 -0.0053
8   858  1  0.5700
9   878  1  1.5000
10  101  2 -0.3900
11  218  2 -1.4000
12  222  2 -2.3000
13  530  2  0.4100
14  572  2  1.3000
15  706  2  1.0000
16  790  2 -0.3500
17  822  2  0.0044
18  942  2  0.8600
19  948  2  1.4000
20  330  3 -2.0000
21  762  3 -0.3900
22   45  4  0.0830
23  123  4 -0.4100
24  144  4 -0.5300
25  306  4  1.5000
26  476  4 -1.0000
27  598  4  0.0990
28  747  4  0.9500
29  863  4 -1.7000
30  992  4 -0.1700
31   50  5 -0.0350
32   78  5  0.6800
33  115  5  1.8000
34  182  5 -0.9400
35  225  5  0.4600
36  486  5  1.6000
37  633  5  1.6000
38  907  5 -0.8800
39  934  5  1.7000
40   51  6  1.2000
41   57  6  0.6800
42  136  6 -0.4500
43  388  6 -0.5700
44  447  6 -0.2000
45  522  6 -0.1600
46  936  6 -1.0000
47  217  7  0.3800
48  273  7  0.2200
49  429  7 -0.2600
50  473  7 -0.9900
51  500  7  0.8000
52  519  7 -0.3300
53  526  7 -0.7700
54  563  7 -0.0510
55  611  7 -0.7000
56  655  7 -0.0700
57  763  7 -0.0980
58  789  7 -0.1200
59  877  7 -1.2000
60  881  7  0.3700
61  902  7  0.1600
62   75  8  0.4000
63  131  8 -1.3000
64  146  8 -0.3300
65  233  8 -0.6700
66  514  8 -0.4300
67  793  8  1.9000
68  892  8  0.1700
69  976  8 -0.3100
70  174  9 -2.6000
71  229  9  0.5200
72  462  9 -0.3300
73  465  9  0.1300
74  479  9  0.2600
75  547  9  0.3900
76  613  9 -1.0000
77  615  9  0.5700
78  666  9  0.2500
79  696  9  1.1000
80  749  9 -1.6000
81   86 10  0.7400
82  182 10  0.5600
83  251 10  0.6000
84  326 10  0.0021
85  346 10 -0.6600
86  359 10 -0.5400
87  392 10  0.6400
88  458 10 -0.8500
89  638 10  0.8300
90  714 10 -0.6400
91  803 10  0.8900
92  888 10  0.5400
93  941 10 -1.5000
94  140 11  1.8000
95  148 11 -1.1000
96  271 11  0.5700
97  618 11  2.5000
98  789 11  1.3000
99  816 11  0.4800
100 844 11  2.0000
101  41 12 -0.9300
102  96 12 -1.6000
103 114 12 -0.8600
104 260 12 -0.0690
105 367 12 -1.2000
106 385 12  0.6800
107 478 12 -2.4000
108 546 12  0.2800
109 558 12 -0.1900
110 564 12 -1.4000
111 571 12  2.1000
112 854 12 -0.2800
113 874 12  0.2400
114 878 12  0.7300
115 892 12 -0.1900
116 980 12  0.4100
117 204 13 -0.4300
118 257 13  1.0000
119 399 13 -1.3000
120 414 13  1.0000
121 428 13  0.3200
122 535 13 -2.3000
123 597 13  1.4000
124 631 13  0.4100
125 669 13 -1.2000
126 269 14 -1.9000
127 284 14  0.9900
128 499 14  0.7900
129 602 14  0.7100
130 824 14 -0.0360
131 837 14  1.5000
132 877 14  1.3000
133 903 14  0.2200
134 928 14 -0.4000
135 940 14 -0.4200
136 973 14  0.2000
137 128 15 -0.0600
138 262 15 -1.2000
139 283 15  0.9600
140 330 15  1.0000
141 413 15 -0.1600
142 504 15 -0.2900
143 662 15 -0.7300
144 663 15 -0.2600
145 713 15  0.4000
146 837 15 -2.3000
147 986 15  1.0000
148  29 16  1.1000
149 191 16 -2.9000
150 225 16 -0.3800
151 655 16 -0.2500
152 705 16 -0.0450
153 800 16  2.6000
154  44 17  1.7000
155  89 17 -1.3000
156 168 17  0.5700
157 236 17  0.4900
158 693 17 -0.3500
159 700 17  1.1000
160 802 17  0.7700
161 849 17 -1.4000
162 854 17 -0.3300
163 884 17  1.5000
164 910 17 -0.0130
165 916 17  0.9200
166 920 17  0.7000
167 169 18 -0.4800
168 181 18 -0.1700
169 202 18 -1.0000
170 251 18 -0.3100
171 453 18  0.5100
172 513 18 -0.1600
173 532 18  0.4300
174 556 18 -0.4300
175 626 18  0.3800
176 649 18 -0.8200
177 685 18  1.2000
178 712 18 -0.3300
179 744 18  0.9500
180 175 19  0.4200
181 183 19  0.9800
182 204 19  0.2700
183 217 19  1.5000
184 279 19 -0.6300
185 350 19 -0.3300
186 494 19 -0.6400
187 537 19  0.9500
188 543 19 -1.2000
189 562 19 -0.5800
190 665 19 -1.2000
191 845 19  0.8100
192 964 19 -1.0000
193 242 20  0.6700
194 250 20  1.1000
195 284 20 -0.1800
196 485 20 -0.3400
197 573 20 -0.3700
198 866 20 -1.4000
199 968 20  0.6100
200 989 20 -1.9000
> 
> ## pointers example in converting from other sparse matrix representations.
> if(requireNamespace("SparseM") &&
+    packageVersion("SparseM") >= "0.87" &&
+    nzchar(dfil <- system.file("extdata", "rua_32_ax.rua", package = "SparseM"))) {
+   X <- SparseM::model.matrix(SparseM::read.matrix.hb(dfil))
+   XX <- sparseMatrix(j = X@ja, p = X@ia - 1L, x = X@ra, dims = X@dimension)
+   validObject(XX)
+ 
+   ## Alternatively, and even more user friendly :
+   X. <- as(X, "Matrix")  # or also
+   X2 <- as(X, "sparseMatrix")
+   stopifnot(identical(XX, X.), identical(X., X2))
+ }
Loading required namespace: SparseM
> 
> 
> 
> cleanEx()
> nameEx("sparseQR-class")
> ### * sparseQR-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sparseQR-class
> ### Title: Sparse QR Factorizations
> ### Aliases: sparseQR-class determinant,sparseQR,logical-method
> ###   qr.Q,sparseQR-method qr.R,sparseQR-method qr.X,sparseQR-method
> ###   qr.coef,sparseQR,Matrix-method qr.coef,sparseQR,dgeMatrix-method
> ###   qr.coef,sparseQR,matrix-method qr.coef,sparseQR,vector-method
> ###   qr.fitted,sparseQR,Matrix-method qr.fitted,sparseQR,dgeMatrix-method
> ###   qr.fitted,sparseQR,matrix-method qr.fitted,sparseQR,vector-method
> ###   qr.qty,sparseQR,Matrix-method qr.qty,sparseQR,dgeMatrix-method
> ###   qr.qty,sparseQR,matrix-method qr.qty,sparseQR,vector-method
> ###   qr.qy,sparseQR,Matrix-method qr.qy,sparseQR,dgeMatrix-method
> ###   qr.qy,sparseQR,matrix-method qr.qy,sparseQR,vector-method
> ###   qr.resid,sparseQR,Matrix-method qr.resid,sparseQR,dgeMatrix-method
> ###   qr.resid,sparseQR,matrix-method qr.resid,sparseQR,vector-method qrR
> ### Keywords: algebra array classes utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showClass("sparseQR")
Class "sparseQR" [package "Matrix"]

Slots:
                                                                            
Name:       beta         V         R         p         q       Dim  Dimnames
Class:   numeric dgCMatrix dgCMatrix   integer   integer   integer      list

Extends: 
Class "QR", directly
Class "MatrixFactorization", by class "QR", distance 2
> set.seed(2)
> 
> m <- 300L
> n <- 60L
> A <- rsparsematrix(m, n, 0.05)
> 
> ## With dimnames, to see that they are propagated :
> dimnames(A) <- dn <- list(paste0("r", seq_len(m)),
+                           paste0("c", seq_len(n)))
> 
> (qr.A <- qr(A))
QR factorization of Formal class 'sparseQR' [package "Matrix"] with 7 slots
  ..@ beta    : num [1:60] 0.092 0.1458 0.0993 0.066 0.1095 ...
  ..@ V       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:10202] 0 56 57 58 59 174 181 217 269 272 ...
  .. .. ..@ p       : int [1:61] 0 12 23 32 44 70 80 90 115 128 ...
  .. .. ..@ Dim     : int [1:2] 300 60
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:10202] -3.22 -0.13 1 -0.56 0.83 ...
  .. .. ..@ factors : list()
  ..@ R       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:1595] 0 1 2 3 3 4 5 6 5 6 ...
  .. .. ..@ p       : int [1:61] 0 1 2 3 4 6 7 8 11 12 ...
  .. .. ..@ Dim     : int [1:2] 300 60
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:1595] 3.3731 3.1545 2.9568 4.7129 0.0271 ...
  .. .. ..@ factors : list()
  ..@ p       : int [1:300] 4 23 24 15 99 42 96 101 21 30 ...
  ..@ q       : int [1:60] 8 23 26 46 47 2 21 50 55 0 ...
  ..@ Dim     : int [1:2] 300 60
  ..@ Dimnames:List of 2
  .. ..$ : chr [1:300] "r1" "r2" "r3" "r4" ...
  .. ..$ : chr [1:60] "c1" "c2" "c3" "c4" ...
> str(e.qr.A <- expand2(qr.A, complete = FALSE), max.level = 2L)
List of 4
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ Q1 :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
 $ R1 :Formal class 'dtCMatrix' [package "Matrix"] with 7 slots
 $ P2.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
> str(E.qr.A <- expand2(qr.A, complete =  TRUE), max.level = 2L)
List of 4
 $ P1.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
 $ Q  :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
 $ R  :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
 $ P2.:Formal class 'pMatrix' [package "Matrix"] with 5 slots
> 
> t(sapply(e.qr.A, dim))
    [,1] [,2]
P1.  300  300
Q1   300   60
R1    60   60
P2.   60   60
> t(sapply(E.qr.A, dim))
    [,1] [,2]
P1.  300  300
Q    300  300
R    300   60
P2.   60   60
> 
> ## Horribly inefficient, but instructive :
> slowQ <- function(V, beta) {
+     d <- dim(V)
+     Q <- diag(d[1L])
+     if(d[2L] > 0L) {
+         for(j in d[2L]:1L) {
+             cat(j, "\n", sep = "")
+             Q <- Q - (beta[j] * tcrossprod(V[, j])) %*% Q
+         }
+     }
+     Q
+ }
> 
> ae1 <- function(a, b, ...) all.equal(as(a, "matrix"), as(b, "matrix"), ...)
> ae2 <- function(a, b, ...) ae1(unname(a), unname(b), ...)
> 
> ## A ~ P1' Q R P2' ~ P1' Q1 R1 P2' in floating point
> stopifnot(exprs = {
+     identical(names(e.qr.A), c("P1.", "Q1", "R1", "P2."))
+     identical(names(E.qr.A), c("P1.", "Q" , "R" , "P2."))
+     identical(e.qr.A[["P1."]],
+               new("pMatrix", Dim = c(m, m), Dimnames = c(dn[1L], list(NULL)),
+                   margin = 1L, perm = invertPerm(qr.A@p, 0L, 1L)))
+     identical(e.qr.A[["P2."]],
+               new("pMatrix", Dim = c(n, n), Dimnames = c(list(NULL), dn[2L]),
+                   margin = 2L, perm = invertPerm(qr.A@q, 0L, 1L)))
+     identical(e.qr.A[["R1"]], triu(E.qr.A[["R"]][seq_len(n), ]))
+     identical(e.qr.A[["Q1"]],      E.qr.A[["Q"]][, seq_len(n)] )
+     identical(E.qr.A[["R"]], qr.A@R)
+  ## ae1(E.qr.A[["Q"]], slowQ(qr.A@V, qr.A@beta))
+     ae1(crossprod(E.qr.A[["Q"]]), diag(m))
+     ae1(A, with(e.qr.A, P1. %*% Q1 %*% R1 %*% P2.))
+     ae1(A, with(E.qr.A, P1. %*% Q  %*% R  %*% P2.))
+     ae2(A.perm <- A[qr.A@p + 1L, qr.A@q + 1L], with(e.qr.A, Q1 %*% R1))
+     ae2(A.perm                               , with(E.qr.A, Q  %*% R ))
+ })
> 
> ## More identities
> b <- rnorm(m)
> stopifnot(exprs = {
+     ae1(qrX <- qr.X     (qr.A   ), A)
+     ae2(qrQ <- qr.Q     (qr.A   ), with(e.qr.A, P1. %*% Q1))
+     ae2(       qr.R     (qr.A   ), with(e.qr.A, R1))
+     ae2(qrc <- qr.coef  (qr.A, b), with(e.qr.A, solve(R1 %*% P2., t(qrQ)) %*% b))
+     ae2(qrf <- qr.fitted(qr.A, b), with(e.qr.A, tcrossprod(qrQ) %*% b))
+     ae2(qrr <- qr.resid (qr.A, b), b - qrf)
+     ae2(qrq <- qr.qy    (qr.A, b), with(E.qr.A, P1. %*% Q %*% b))
+     ae2(qr.qty(qr.A, qrq), b)
+ })
> 
> ## Sparse and dense computations should agree here
> qr.Am <- qr(as(A, "matrix")) # <=> qr.default(A)
> stopifnot(exprs = {
+     ae2(qrX, qr.X     (qr.Am   ))
+     ae2(qrc, qr.coef  (qr.Am, b))
+     ae2(qrf, qr.fitted(qr.Am, b))
+     ae2(qrr, qr.resid (qr.Am, b))
+ })
> 
> 
> 
> cleanEx()
> nameEx("sparseVector-class")
> ### * sparseVector-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sparseVector-class
> ### Title: Sparse Vector Classes
> ### Aliases: sparseVector-class nsparseVector-class lsparseVector-class
> ###   isparseVector-class dsparseVector-class zsparseVector-class
> ###   !,sparseVector-method Arith,sparseVector,ddenseMatrix-method
> ###   Arith,sparseVector,dgeMatrix-method
> ###   Arith,sparseVector,sparseVector-method
> ###   Logic,sparseVector,dMatrix-method Logic,sparseVector,lMatrix-method
> ###   Logic,sparseVector,nMatrix-method
> ###   Logic,sparseVector,sparseVector-method Math,sparseVector-method
> ###   Math2,sparseVector-method Ops,ANY,sparseVector-method
> ###   Ops,sparseVector,ANY-method Ops,sparseVector,Matrix-method
> ###   Ops,sparseVector,atomicVector-method
> ###   Ops,sparseVector,sparseVector-method Summary,sparseVector-method
> ###   as.array,sparseVector-method as.complex,sparseVector-method
> ###   as.integer,sparseVector-method as.logical,sparseVector-method
> ###   as.matrix,sparseVector-method as.numeric,sparseVector-method
> ###   as.vector,sparseVector-method coerce,ANY,sparseVector-method
> ###   coerce,matrix,sparseVector-method
> ###   coerce,sparseVector,CsparseMatrix-method
> ###   coerce,sparseVector,Matrix-method
> ###   coerce,sparseVector,RsparseMatrix-method
> ###   coerce,sparseVector,TsparseMatrix-method
> ###   coerce,sparseVector,denseMatrix-method
> ###   coerce,sparseVector,dsparseVector-method
> ###   coerce,sparseVector,generalMatrix-method
> ###   coerce,sparseVector,isparseVector-method
> ###   coerce,sparseVector,lsparseVector-method
> ###   coerce,sparseVector,nsparseVector-method
> ###   coerce,sparseVector,sparseMatrix-method
> ###   coerce,sparseVector,unpackedMatrix-method
> ###   coerce,sparseVector,zsparseVector-method
> ###   coerce,vector,dsparseVector-method coerce,vector,isparseVector-method
> ###   coerce,vector,lsparseVector-method coerce,vector,nsparseVector-method
> ###   coerce,vector,sparseVector-method coerce,vector,zsparseVector-method
> ###   diff,sparseVector-method dim<-,sparseVector-method
> ###   head,sparseVector-method initialize,sparseVector-method
> ###   length,sparseVector-method log,sparseVector-method
> ###   mean,sparseVector-method rep,sparseVector-method
> ###   show,sparseVector-method sort,sparseVector-method
> ###   t,sparseVector-method tail,sparseVector-method
> ###   toeplitz,sparseVector-method zapsmall,sparseVector-method
> ###   !,nsparseVector-method which,nsparseVector-method
> ###   !,lsparseVector-method Logic,lsparseVector,lsparseVector-method
> ###   which,lsparseVector-method -,dsparseVector,missing-method
> ###   Arith,dsparseVector,dsparseVector-method c.sparseVector
> ### Keywords: classes manip
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> getClass("sparseVector")
Virtual Class "sparseVector" [package "Matrix"]

Slots:
                      
Name:   length       i
Class: numeric numeric

Extends: "replValueSp"

Known Subclasses: "nsparseVector", "lsparseVector", "isparseVector", "dsparseVector", 
"zsparseVector"
> getClass("dsparseVector")
Class "dsparseVector" [package "Matrix"]

Slots:
                              
Name:        x  length       i
Class: numeric numeric numeric

Extends: 
Class "sparseVector", directly
Class "replValueSp", by class "sparseVector", distance 2
> 
> sx <- c(0,0,3, 3.2, 0,0,0,-3:1,0,0,2,0,0,5,0,0)
> (ss <- as(sx, "sparseVector"))
sparse vector (nnz/length = 8/20) of class "dsparseVector"
 [1]    .    .  3.0  3.2    .    .    . -3.0 -2.0 -1.0    .  1.0    .    .  2.0
[16]    .    .  5.0    .    .
> 
> ix <- as.integer(round(sx))
> (is <- as(ix, "sparseVector")) ## an "isparseVector" (!)
sparse vector (nnz/length = 8/20) of class "isparseVector"
 [1]  .  .  3  3  .  .  . -3 -2 -1  .  1  .  .  2  .  .  5  .  .
> (ns <- sparseVector(i= c(7, 3, 2), length = 10)) # "nsparseVector"
sparse vector (nnz/length = 3/10) of class "nsparseVector"
 [1] . | | . . . | . . .
> ## rep() works too:
> (ri <- rep(is, length.out= 25))
sparse vector (nnz/length = 10/25) of class "isparseVector"
 [1]  .  .  3  3  .  .  . -3 -2 -1  .  1  .  .  2  .  .  5  .  .  .  .  3  3  .
> 
> ## Using `dim<-`  as in base R :
> r <- ss
> dim(r) <- c(4,5) # becomes a sparse Matrix:
> r
4 x 5 sparse Matrix of class "dgTMatrix"
                  
[1,] .    . -2 . .
[2,] .    . -1 . 5
[3,] 3.0  .  . 2 .
[4,] 3.2 -3  1 . .
> ## or coercion (as as.matrix() in base R):
> as(ss, "Matrix")
20 x 1 sparse Matrix of class "dgCMatrix"
          
 [1,]  .  
 [2,]  .  
 [3,]  3.0
 [4,]  3.2
 [5,]  .  
 [6,]  .  
 [7,]  .  
 [8,] -3.0
 [9,] -2.0
[10,] -1.0
[11,]  .  
[12,]  1.0
[13,]  .  
[14,]  .  
[15,]  2.0
[16,]  .  
[17,]  .  
[18,]  5.0
[19,]  .  
[20,]  .  
> stopifnot(all(ss == print(as(ss, "CsparseMatrix"))))
20 x 1 sparse Matrix of class "dgCMatrix"
          
 [1,]  .  
 [2,]  .  
 [3,]  3.0
 [4,]  3.2
 [5,]  .  
 [6,]  .  
 [7,]  .  
 [8,] -3.0
 [9,] -2.0
[10,] -1.0
[11,]  .  
[12,]  1.0
[13,]  .  
[14,]  .  
[15,]  2.0
[16,]  .  
[17,]  .  
[18,]  5.0
[19,]  .  
[20,]  .  
> 
> ## currently has "non-structural" FALSE -- printing as ":"
> (lis <- is & FALSE)
sparse vector (nnz/length = 0/20) of class "lsparseVector"
 [1] . . . . . . . . . . . . . . . . . . . .
> (nn <- is[is == 0]) # all "structural" FALSE
sparse vector (nnz/length = 0/12) of class "isparseVector"
 [1] . . . . . . . . . . . .
> 
> ## NA-case
> sN <- sx; sN[4] <- NA
> (svN <- as(sN, "sparseVector"))
sparse vector (nnz/length = 8/20) of class "dsparseVector"
 [1]  .  .  3 NA  .  .  . -3 -2 -1  .  1  .  .  2  .  .  5  .  .
> 
> v <- as(c(0,0,3, 3.2, rep(0,9),-3,0,-1, rep(0,20),5,0),
+          "sparseVector")
> v <- rep(rep(v, 50), 5000)
> set.seed(1); v[sample(v@i, 1e6)] <- 0
> str(v)
Formal class 'dsparseVector' [package "Matrix"] with 3 slots
  ..@ x     : num [1:250000] -3 -1 3 -3 3.2 -3 -1 -1 3.2 -1 ...
  ..@ length: int 9500000
  ..@ i     : int [1:250000] 14 16 79 90 156 204 206 244 308 320 ...
> system.time(for(i in 1:4) hv <- head(v, 1e6))
   user  system elapsed 
  0.033   0.000   0.033 
> ##   user  system elapsed
> ##  0.033   0.000   0.032
> system.time(for(i in 1:4) h2 <- v[1:1e6])
   user  system elapsed 
  0.237   0.000   0.239 
> ##   user  system elapsed
> ##  1.317   0.000   1.319
> 
> stopifnot(identical(hv, h2),
+           identical(is | FALSE, is != 0),
+           validObject(svN), validObject(lis), as.logical(is.na(svN[4])),
+           identical(is^2 > 0, is & TRUE),
+           all(!lis), !any(lis), length(nn@i) == 0, !any(nn), all(!nn),
+           sum(lis) == 0, !prod(lis), range(lis) == c(0,0))
> 
> ## create and use the t(.) method:
> t(x20 <- sparseVector(c(9,3:1), i=c(1:2,4,7), length=20))
1 x 20 sparse Matrix of class "dgRMatrix"
                                            
[1,] 9 3 . 2 . . 1 . . . . . . . . . . . . .
> (T20 <- toeplitz(x20))
20 x 20 sparse Matrix of class "dsCMatrix"
                                             
 [1,] 9 3 . 2 . . 1 . . . . . . . . . . . . .
 [2,] 3 9 3 . 2 . . 1 . . . . . . . . . . . .
 [3,] . 3 9 3 . 2 . . 1 . . . . . . . . . . .
 [4,] 2 . 3 9 3 . 2 . . 1 . . . . . . . . . .
 [5,] . 2 . 3 9 3 . 2 . . 1 . . . . . . . . .
 [6,] . . 2 . 3 9 3 . 2 . . 1 . . . . . . . .
 [7,] 1 . . 2 . 3 9 3 . 2 . . 1 . . . . . . .
 [8,] . 1 . . 2 . 3 9 3 . 2 . . 1 . . . . . .
 [9,] . . 1 . . 2 . 3 9 3 . 2 . . 1 . . . . .
[10,] . . . 1 . . 2 . 3 9 3 . 2 . . 1 . . . .
[11,] . . . . 1 . . 2 . 3 9 3 . 2 . . 1 . . .
[12,] . . . . . 1 . . 2 . 3 9 3 . 2 . . 1 . .
[13,] . . . . . . 1 . . 2 . 3 9 3 . 2 . . 1 .
[14,] . . . . . . . 1 . . 2 . 3 9 3 . 2 . . 1
[15,] . . . . . . . . 1 . . 2 . 3 9 3 . 2 . .
[16,] . . . . . . . . . 1 . . 2 . 3 9 3 . 2 .
[17,] . . . . . . . . . . 1 . . 2 . 3 9 3 . 2
[18,] . . . . . . . . . . . 1 . . 2 . 3 9 3 .
[19,] . . . . . . . . . . . . 1 . . 2 . 3 9 3
[20,] . . . . . . . . . . . . . 1 . . 2 . 3 9
> stopifnot(is(T20, "symmetricMatrix"), is(T20, "sparseMatrix"),
+           identical(unname(as.matrix(T20)),
+                     toeplitz(as.vector(x20))))
> 
> ## c() method for "sparseVector" - also available as regular function
> (c1 <- c(x20, 0,0,0, -10*x20))
sparse vector (nnz/length = 8/43) of class "dsparseVector"
 [1]   9   3   .   2   .   .   1   .   .   .   .   .   .   .   .   .   .   .   .
[20]   .   .   .   . -90 -30   . -20   .   . -10   .   .   .   .   .   .   .   .
[39]   .   .   .   .   .
> (c2 <- c(ns, is, FALSE))
sparse vector (nnz/length = 11/31) of class "isparseVector"
 [1]  .  1  1  .  .  .  1  .  .  .  .  .  3  3  .  .  . -3 -2 -1  .  1  .  .  2
[26]  .  .  5  .  .  .
> (c3 <- c(ns, !ns, TRUE, NA, FALSE))
sparse vector (nnz/length = 12/23) of class "lsparseVector"
 [1]    .    |    |    .    .    .    |    .    .    .    |    .    .    |    |
[16]    |    .    |    |    |    | <NA>    .
> (c4 <- c(ns, rev(ns)))
sparse vector (nnz/length = 6/20) of class "nsparseVector"
 [1] . | | . . . | . . . . . . | . . . | | .
> ## here, c() would produce a list {not dispatching to c.sparseVector()}
> (c5 <- c.sparseVector(0,0, x20))
sparse vector (nnz/length = 4/22) of class "dsparseVector"
 [1] . . 9 3 . 2 . . 1 . . . . . . . . . . . . .
> 
> ## checking (consistency)
> .v <- as.vector
> .s <- function(v) as(v, "sparseVector")
> stopifnot(exprs = {
+     all.equal(c1, .s(c(.v(x20), 0,0,0, -10*.v(x20))),      tol = 0)
+     all.equal(c2, .s(c(.v(ns), .v(is), FALSE)),            tol = 0)
+     all.equal(c3, .s(c(.v(ns), !.v(ns), TRUE, NA, FALSE)), tol = 0)
+     all.equal(c4, .s(c(.v(ns), rev(.v(ns)))),              tol = 0,
+               check.class = FALSE)
+     all.equal(c5, .s(c(0,0, .v(x20))),                     tol = 0)
+ })
> 
> 
> 
> cleanEx()
> nameEx("sparseVector")
> ### * sparseVector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sparseVector
> ### Title: Sparse Vector Construction from Nonzero Entries
> ### Aliases: sparseVector
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> str(sv <- sparseVector(x = 1:10, i = sample(999, 10), length=1000))
Formal class 'isparseVector' [package "Matrix"] with 3 slots
  ..@ x     : int [1:10] 3 10 8 7 6 5 2 1 4 9
  ..@ length: num 1000
  ..@ i     : int [1:10] 129 187 270 299 471 509 679 836 930 978
> 
> sx <- c(0,0,3, 3.2, 0,0,0,-3:1,0,0,2,0,0,5,0,0)
> ss <- as(sx, "sparseVector")
> stopifnot(identical(ss,
+    sparseVector(x = c(2, -1, -2, 3, 1, -3, 5, 3.2),
+                 i = c(15L, 10:9, 3L,12L,8L,18L, 4L), length = 20L)))
> 
> (ns <- sparseVector(i= c(7, 3, 2), length = 10))
sparse vector (nnz/length = 3/10) of class "nsparseVector"
 [1] . | | . . . | . . .
> stopifnot(identical(ns,
+       new("nsparseVector", length = 10, i = c(2, 3, 7))))
> 
> 
> 
> cleanEx()
> nameEx("symmetricMatrix-class")
> ### * symmetricMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: symmetricMatrix-class
> ### Title: Virtual Class of Symmetric Matrices in Package Matrix
> ### Aliases: symmetricMatrix-class coerce,matrix,symmetricMatrix-method
> ###   dimnames,symmetricMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> ## An example about the symmetric Dimnames:
> sy <- sparseMatrix(i= c(2,4,3:5), j= c(4,7:5,5), x = 1:5, dims = c(7,7),
+                    symmetric=TRUE, dimnames = list(NULL, letters[1:7]))
> sy # shows symmetrical dimnames
7 x 7 sparse Matrix of class "dsCMatrix"
  a b c d e f g
a . . . . . . .
b . . . 1 . . .
c . . . . . 3 .
d . 1 . . 4 . 2
e . . . 4 5 . .
f . . 3 . . . .
g . . . 2 . . .
> sy@Dimnames  # internally only one part is stored
[[1]]
NULL

[[2]]
[1] "a" "b" "c" "d" "e" "f" "g"

> dimnames(sy) # both parts - as sy *is* symmetrical
[[1]]
[1] "a" "b" "c" "d" "e" "f" "g"

[[2]]
[1] "a" "b" "c" "d" "e" "f" "g"

> ## Don't show: 
> local({ nm <- letters[1:7]
+   stopifnot(identical(dimnames(sy), list(  nm, nm)),
+ 	    identical(sy@Dimnames , list(NULL, nm)))
+ })
> ## End(Don't show)
> showClass("symmetricMatrix")
Virtual Class "symmetricMatrix" [package "Matrix"]

Slots:
                                              
Name:       uplo   factors       Dim  Dimnames
Class: character      list   integer      list

Extends: 
Class "compMatrix", directly
Class "Matrix", by class "compMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 3

Known Subclasses: 
Class "nsyMatrix", directly
Class "nspMatrix", directly
Class "lsyMatrix", directly
Class "lspMatrix", directly
Class "dsyMatrix", directly
Class "dspMatrix", directly
Class "nsCMatrix", directly
Class "nsRMatrix", directly
Class "nsTMatrix", directly
Class "lsCMatrix", directly
Class "lsRMatrix", directly
Class "lsTMatrix", directly
Class "dsCMatrix", directly
Class "dsRMatrix", directly
Class "dsTMatrix", directly
Class "dpoMatrix", by class "dsyMatrix", distance 2
Class "dppMatrix", by class "dspMatrix", distance 2
Class "corMatrix", by class "dsyMatrix", distance 3
Class "pcorMatrix", by class "dspMatrix", distance 3
> 
> ## The names of direct subclasses:
> scl <- getClass("symmetricMatrix")@subclasses
> directly <- sapply(lapply(scl, slot, "by"), length) == 0
> names(scl)[directly]
 [1] "nsyMatrix" "nspMatrix" "lsyMatrix" "lspMatrix" "dsyMatrix" "dspMatrix"
 [7] "nsCMatrix" "nsRMatrix" "nsTMatrix" "lsCMatrix" "lsRMatrix" "lsTMatrix"
[13] "dsCMatrix" "dsRMatrix" "dsTMatrix"
> 
> ## Methods -- applicaple to all subclasses above:
> showMethods(classes = "symmetricMatrix")
Function: Cholesky (package Matrix)
A="symmetricMatrix"

Function: Schur (package Matrix)
x="symmetricMatrix"


Function "as.matrix.coo":
 <not an S4 generic function>

Function "as.matrix.csc":
 <not an S4 generic function>

Function "as.matrix.csr":
 <not an S4 generic function>

Function "as.matrix.ssc":
 <not an S4 generic function>

Function "as.matrix.ssr":
 <not an S4 generic function>

Function "backsolve":
 <not an S4 generic function>
Function: chol (package base)
x="symmetricMatrix"

Function: chol2inv (package base)
x="symmetricMatrix"

Function: coerce (package methods)
from="Matrix", to="symmetricMatrix"
from="diagonalMatrix", to="symmetricMatrix"
from="dpoMatrix", to="symmetricMatrix"
from="dsCMatrix", to="symmetricMatrix"
from="dsRMatrix", to="symmetricMatrix"
from="dsTMatrix", to="symmetricMatrix"
from="dsyMatrix", to="symmetricMatrix"
from="lsCMatrix", to="symmetricMatrix"
from="lsTMatrix", to="symmetricMatrix"
from="lspMatrix", to="symmetricMatrix"
from="lsyMatrix", to="symmetricMatrix"
from="matrix", to="symmetricMatrix"
from="nsCMatrix", to="symmetricMatrix"
from="nsTMatrix", to="symmetricMatrix"

Function: dimnames (package base)
x="symmetricMatrix"


Function "forwardsolve":
 <not an S4 generic function>

Function "model.guess":
 <not an S4 generic function>

Function "model.matrix":
 <not an S4 generic function>

Function "model.response":
 <not an S4 generic function>

Function "model.xexact":
 <not an S4 generic function>
> 
> 
> 
> cleanEx()
> nameEx("symmpart")
> ### * symmpart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: symmpart-methods
> ### Title: Symmetric Part and Skew(symmetric) Part of a Matrix
> ### Aliases: symmpart symmpart-methods skewpart skewpart-methods
> ###   symmpart,CsparseMatrix-method symmpart,RsparseMatrix-method
> ###   symmpart,TsparseMatrix-method symmpart,denseMatrix-method
> ###   symmpart,diagonalMatrix-method symmpart,indMatrix-method
> ###   symmpart,matrix-method skewpart,CsparseMatrix-method
> ###   skewpart,RsparseMatrix-method skewpart,TsparseMatrix-method
> ###   skewpart,denseMatrix-method skewpart,diagonalMatrix-method
> ###   skewpart,indMatrix-method skewpart,matrix-method
> ### Keywords: algebra arith array methods
> 
> ### ** Examples
> 
> m <- Matrix(1:4, 2,2)
> symmpart(m)
2 x 2 Matrix of class "dsyMatrix"
     [,1] [,2]
[1,]  1.0  2.5
[2,]  2.5  4.0
> skewpart(m)
2 x 2 Matrix of class "dgeMatrix"
     [,1] [,2]
[1,]  0.0  0.5
[2,] -0.5  0.0
> 
> stopifnot(all(m == symmpart(m) + skewpart(m)))
> 
> dn <- dimnames(m) <- list(row = c("r1", "r2"), col = c("var.1", "var.2"))
> stopifnot(all(m == symmpart(m) + skewpart(m)))
> colnames(m) <- NULL
> stopifnot(all(m == symmpart(m) + skewpart(m)))
> dimnames(m) <- unname(dn)
> stopifnot(all(m == symmpart(m) + skewpart(m)))
> 
> 
> ## investigate the current methods:
> showMethods(skewpart, include = TRUE)
Function: skewpart (package Matrix)
x="CsparseMatrix"
function (x) 
.Call(R_sparse_skewpart, x)


x="RsparseMatrix"
function (x) 
.Call(R_sparse_skewpart, x)


x="TsparseMatrix"
function (x) 
.Call(R_sparse_skewpart, x)


x="denseMatrix"
function (x) 
.Call(R_dense_skewpart, x)


x="diagonalMatrix"
function (x) 
{
    kind <- .M.kind(x)
    r <- new(if (kind == "z") 
        "zdiMatrix"
    else "ddiMatrix")
    r@Dim <- d <- x@Dim
    r@Dimnames <- symDN(x@Dimnames)
    r@x <- if (kind == "z") {
        if (x@diag != "N") 
            complex(d[1L])
        else complex(real = 0, imaginary = Im(x@x))
    }
    else double(d[1L])
    r
}


x="indMatrix"
function (x) 
skewpart(.M2kind(x, "d"))


x="matrix"
function (x) 
symmetrizeDN(0.5 * (x - t(x)))



> 
> 
> 
> cleanEx()
> nameEx("triangularMatrix-class")
> ### * triangularMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: triangularMatrix-class
> ### Title: Virtual Class of Triangular Matrices in Package Matrix
> ### Aliases: triangularMatrix-class
> ###   Arith,triangularMatrix,diagonalMatrix-method
> ###   Compare,triangularMatrix,diagonalMatrix-method
> ###   Logic,triangularMatrix,diagonalMatrix-method
> ###   coerce,matrix,triangularMatrix-method
> ###   determinant,triangularMatrix,logical-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("triangularMatrix")
Virtual Class "triangularMatrix" [package "Matrix"]

Slots:
                                              
Name:       uplo      diag       Dim  Dimnames
Class: character character   integer      list

Extends: 
Class "Matrix", directly
Class "replValueSp", by class "Matrix", distance 2

Known Subclasses: "ntrMatrix", "ntpMatrix", "ltrMatrix", "ltpMatrix", "dtrMatrix", "dtpMatrix", 
"ntCMatrix", "ntRMatrix", "ntTMatrix", "ltCMatrix", "ltRMatrix", "ltTMatrix", 
"dtCMatrix", "dtRMatrix", "dtTMatrix"
> 
> ## The names of direct subclasses:
> scl <- getClass("triangularMatrix")@subclasses
> directly <- sapply(lapply(scl, slot, "by"), length) == 0
> names(scl)[directly]
 [1] "ntrMatrix" "ntpMatrix" "ltrMatrix" "ltpMatrix" "dtrMatrix" "dtpMatrix"
 [7] "ntCMatrix" "ntRMatrix" "ntTMatrix" "ltCMatrix" "ltRMatrix" "ltTMatrix"
[13] "dtCMatrix" "dtRMatrix" "dtTMatrix"
> 
> (m <- matrix(c(5,1,0,3), 2))
     [,1] [,2]
[1,]    5    0
[2,]    1    3
> as(m, "triangularMatrix")
2 x 2 Matrix of class "dtrMatrix"
     [,1] [,2]
[1,]    5    .
[2,]    1    3
> 
> 
> 
> cleanEx()
> nameEx("uniqTsparse")
> ### * uniqTsparse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asUniqueT
> ### Title: Standardize a Sparse Matrix in Triplet Format
> ### Aliases: anyDuplicatedT isUniqueT asUniqueT aggregateT uniqTsparse
> ### Keywords: array logic manip utilities
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> example("dgTMatrix-class", echo=FALSE)
Formal class 'dgTMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:9] 0 1 3 0 1 3 2 3 2
  ..@ j       : int [1:9] 0 0 0 2 2 2 4 5 6
  ..@ Dim     : int [1:2] 4 7
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:9] 1 2 4 9 10 12 19 24 27
  ..@ factors : list()
Formal class 'dgTMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:5] 1 1 0 3 3
  ..@ j       : int [1:5] 2 2 4 0 0
  ..@ Dim     : int [1:2] 4 5
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:5] 10 20 30 40 50
  ..@ factors : list()
> ## -> 'T2'  with (i,j,x) slots of length 5 each
> T2u <- asUniqueT(T2)
> stopifnot(## They "are" the same (and print the same):
+           all.equal(T2, T2u, tol=0),
+           ## but not internally:
+           anyDuplicatedT(T2)  == 2,
+           anyDuplicatedT(T2u) == 0,
+           length(T2 @x) == 5,
+           length(T2u@x) == 3)
> 
> isUniqueT(T2 ) # FALSE
[1] FALSE
> isUniqueT(T2u) # TRUE
[1] TRUE
> 
> T3 <- T2u
> T3[1, c(1,3)] <- 10; T3[2, c(1,5)] <- 20
> T3u <- asUniqueT(T3)
> str(T3u) # sorted in 'j', and within j, sorted in i
Formal class 'dgTMatrix' [package "Matrix"] with 6 slots
  ..@ i       : int [1:7] 0 1 3 0 1 0 1
  ..@ j       : int [1:7] 0 0 0 2 2 4 4
  ..@ Dim     : int [1:2] 4 5
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:7] 10 20 90 10 30 30 20
  ..@ factors : list()
> stopifnot(isUniqueT(T3u))
> 
> ## Logical l.TMatrix and n.TMatrix :
> (L2 <- T2 > 0)
4 x 5 sparse Matrix of class "lgTMatrix"
              
[1,] . . . . |
[2,] . . | . .
[3,] . . . . .
[4,] | . . . .
> validObject(L2u <- asUniqueT(L2))
[1] TRUE
> (N2 <- as(L2, "nMatrix"))
4 x 5 sparse Matrix of class "ngTMatrix"
              
[1,] . . . . |
[2,] . . | . .
[3,] . . . . .
[4,] | . . . .
> validObject(N2u <- asUniqueT(N2))
[1] TRUE
> stopifnot(N2u@i == L2u@i, L2u@i == T2u@i,  N2@i == L2@i, L2@i == T2@i,
+           N2u@j == L2u@j, L2u@j == T2u@j,  N2@j == L2@j, L2@j == T2@j)
> # now with a nasty NA  [partly failed in Matrix 1.1-5]:
> L.0N <- L.1N <- L2
> L.0N@x[1:2] <- c(FALSE, NA)
> L.1N@x[1:2] <- c(TRUE, NA)
> validObject(L.0N)
[1] TRUE
> validObject(L.1N)
[1] TRUE
> (m.0N <- as.matrix(L.0N))
      [,1]  [,2]  [,3]  [,4]  [,5]
[1,] FALSE FALSE FALSE FALSE  TRUE
[2,] FALSE FALSE    NA FALSE FALSE
[3,] FALSE FALSE FALSE FALSE FALSE
[4,]  TRUE FALSE FALSE FALSE FALSE
> (m.1N <- as.matrix(L.1N))
      [,1]  [,2]  [,3]  [,4]  [,5]
[1,] FALSE FALSE FALSE FALSE  TRUE
[2,] FALSE FALSE  TRUE FALSE FALSE
[3,] FALSE FALSE FALSE FALSE FALSE
[4,]  TRUE FALSE FALSE FALSE FALSE
> stopifnot(identical(10L, which(is.na(m.0N))), !anyNA(m.1N))
> symnum(m.0N)
              
[1,] . . . . |
[2,] . . ? . .
[3,] . . . . .
[4,] | . . . .
> symnum(m.1N)
              
[1,] . . . . |
[2,] . . | . .
[3,] . . . . .
[4,] | . . . .
> 
> 
> 
> cleanEx()
> nameEx("unpack")
> ### * unpack
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pack
> ### Title: Representation of Packed and Unpacked Dense Matrices
> ### Aliases: pack pack-methods unpack unpack-methods pack,dgeMatrix-method
> ###   pack,lgeMatrix-method pack,matrix-method pack,ngeMatrix-method
> ###   pack,packedMatrix-method pack,sparseMatrix-method
> ###   pack,unpackedMatrix-method unpack,matrix-method
> ###   unpack,packedMatrix-method unpack,sparseMatrix-method
> ###   unpack,unpackedMatrix-method
> ### Keywords: array methods
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> showMethods("pack")
Function: pack (package Matrix)
x="dgeMatrix"
x="dpoMatrix"
    (inherited from: x="unpackedMatrix")
x="dsyMatrix"
    (inherited from: x="unpackedMatrix")
x="dtrMatrix"
    (inherited from: x="unpackedMatrix")
x="lgeMatrix"
x="ltrMatrix"
    (inherited from: x="unpackedMatrix")
x="matrix"
x="ngeMatrix"
x="ntrMatrix"
    (inherited from: x="unpackedMatrix")
x="packedMatrix"
x="unpackedMatrix"

> (s <- crossprod(matrix(sample(15), 5,3))) # traditional symmetric matrix
     [,1] [,2] [,3]
[1,]  151  214  212
[2,]  214  507  424
[3,]  212  424  582
> (sp <- pack(s))
3 x 3 Matrix of class "dspMatrix"
     [,1] [,2] [,3]
[1,]  151  214  212
[2,]  214  507  424
[3,]  212  424  582
> mt <- as.matrix(tt <- tril(s))
> (pt <- pack(mt))
3 x 3 Matrix of class "dtpMatrix"
     [,1] [,2] [,3]
[1,]  151    .    .
[2,]  214  507    .
[3,]  212  424  582
> stopifnot(identical(pt, pack(tt)),
+ 	  dim(s ) == dim(sp), all(s  == sp),
+ 	  dim(mt) == dim(pt), all(mt == pt), all(mt == tt))
> 
> showMethods("unpack")
Function: unpack (package Matrix)
x="matrix"
x="packedMatrix"
x="unpackedMatrix"

> (cp4 <- chol(Hilbert(4))) # is triangular
4 x 4 Matrix of class "dtrMatrix"
     [,1]       [,2]       [,3]       [,4]      
[1,] 1.00000000 0.50000000 0.33333333 0.25000000
[2,]          . 0.28867513 0.28867513 0.25980762
[3,]          .          . 0.07453560 0.11180340
[4,]          .          .          . 0.01889822
> tp4 <- pack(cp4) # [t]riangular [p]acked
> str(tp4)
Formal class 'dtpMatrix' [package "Matrix"] with 5 slots
  ..@ uplo    : chr "U"
  ..@ Dim     : int [1:2] 4 4
  ..@ Dimnames:List of 2
  .. ..$ : NULL
  .. ..$ : NULL
  ..@ x       : num [1:10] 1 0.5 0.289 0.333 0.289 ...
  ..@ diag    : chr "N"
> (unpack(tp4))
4 x 4 Matrix of class "dtrMatrix"
     [,1]       [,2]       [,3]       [,4]      
[1,] 1.00000000 0.50000000 0.33333333 0.25000000
[2,]          . 0.28867513 0.28867513 0.25980762
[3,]          .          . 0.07453560 0.11180340
[4,]          .          .          . 0.01889822
> stopifnot(identical(tp4, pack(unpack(tp4))))
> 
> z1 <- new("dsyMatrix", Dim = c(2L, 2L), x = as.double(1:4), uplo = "U")
> z2 <- unpack(pack(z1))
> stopifnot(!identical(z1, z2), # _not_ identical
+           all(z1 == z2)) # but mathematically equal
> cbind(z1@x, z2@x) # (unused!) lower triangle is "lost" in translation
     [,1] [,2]
[1,]    1    1
[2,]    2    0
[3,]    3    3
[4,]    4    4
> 
> 
> 
> cleanEx()
> nameEx("unpackedMatrix-class")
> ### * unpackedMatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unpackedMatrix-class
> ### Title: Virtual Class '"unpackedMatrix"' of Unpacked Dense Matrices
> ### Aliases: unpackedMatrix-class coerce,matrix,unpackedMatrix-method
> ###   coerce,vector,unpackedMatrix-method cov2cor,unpackedMatrix-method
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("unpackedMatrix")
Virtual Class "unpackedMatrix" [package "Matrix"]

Slots:
                        
Name:       Dim Dimnames
Class:  integer     list

Extends: 
Class "denseMatrix", directly
Class "Matrix", by class "denseMatrix", distance 2
Class "replValueSp", by class "Matrix", distance 3

Known Subclasses: 
Class "ngeMatrix", directly
Class "ntrMatrix", directly
Class "nsyMatrix", directly
Class "lgeMatrix", directly
Class "ltrMatrix", directly
Class "lsyMatrix", directly
Class "dgeMatrix", directly
Class "dtrMatrix", directly
Class "dsyMatrix", directly
Class "dpoMatrix", by class "dsyMatrix", distance 2
Class "corMatrix", by class "dpoMatrix", distance 3
> showMethods(classes = "unpackedMatrix")

Function "as.matrix.coo":
 <not an S4 generic function>

Function "as.matrix.csc":
 <not an S4 generic function>

Function "as.matrix.csr":
 <not an S4 generic function>

Function "as.matrix.ssc":
 <not an S4 generic function>

Function "as.matrix.ssr":
 <not an S4 generic function>

Function "backsolve":
 <not an S4 generic function>
Function: coerce (package methods)
from="Matrix", to="unpackedMatrix"
from="dgeMatrix", to="unpackedMatrix"
from="dpoMatrix", to="unpackedMatrix"
from="dsyMatrix", to="unpackedMatrix"
from="dtrMatrix", to="unpackedMatrix"
from="lgeMatrix", to="unpackedMatrix"
from="lsyMatrix", to="unpackedMatrix"
from="matrix", to="unpackedMatrix"
from="sparseVector", to="unpackedMatrix"
from="vector", to="unpackedMatrix"

Function: cov2cor (package stats)
V="unpackedMatrix"


Function "forwardsolve":
 <not an S4 generic function>

Function "model.guess":
 <not an S4 generic function>

Function "model.matrix":
 <not an S4 generic function>

Function "model.response":
 <not an S4 generic function>

Function "model.xexact":
 <not an S4 generic function>
Function: pack (package Matrix)
x="unpackedMatrix"

Function: unpack (package Matrix)
x="unpackedMatrix"

> 
> 
> 
> cleanEx()
> nameEx("unused-classes")
> ### * unused-classes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Matrix-notyet
> ### Title: Virtual Classes Not Yet Really Implemented and Used
> ### Aliases: Matrix-notyet iMatrix-class zMatrix-class
> ### Keywords: array classes
> 
> ### ** Examples
> 
> showClass("iMatrix")
Virtual Class "iMatrix" [package "Matrix"]

Slots:
                                 
Name:         x      Dim Dimnames
Class:  integer  integer     list

Extends: 
Class "Matrix", directly
Class "replValueSp", by class "Matrix", distance 2
> showClass("zMatrix")
Virtual Class "zMatrix" [package "Matrix"]

Slots:
                                 
Name:         x      Dim Dimnames
Class:  complex  integer     list

Extends: 
Class "Matrix", directly
Class "replValueSp", by class "Matrix", distance 2
> 
> 
> 
> cleanEx()
> nameEx("updown")
> ### * updown
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: updown-methods
> ### Title: Updating and Downdating Sparse Cholesky Factorizations
> ### Aliases: updown updown-methods updown,character,ANY,ANY-method
> ###   updown,logical,Matrix,CHMfactor-method
> ###   updown,logical,dgCMatrix,CHMfactor-method
> ###   updown,logical,dsCMatrix,CHMfactor-method
> ###   updown,logical,dtCMatrix,CHMfactor-method
> ###   updown,logical,matrix,CHMfactor-method
> ### Keywords: algebra array methods
> 
> ### ** Examples
> 
> m <- sparseMatrix(i = c(3, 1, 3:2, 2:1), p = c(0:2, 4, 4, 6), x = 1:6,
+                   dimnames = list(LETTERS[1:3], letters[1:5]))
> uc0 <- Cholesky(A <- crossprod(m) + Diagonal(5))
> uc1 <- updown("+", Diagonal(5, 1), uc0)
> uc2 <- updown("-", Diagonal(5, 1), uc1)
> stopifnot(all.equal(uc0, uc2))
> ## Don't show: 
> if(FALSE) {
+ ## Hmm: this loses positive definiteness:
+ uc2 <- updown("-", Diagonal(5, 2), uc0)
+ image(show(as(uc0, "CsparseMatrix")))
+ image(show(as(uc2, "CsparseMatrix"))) # severely negative entries
+ }
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("wrld_1deg")
> ### * wrld_1deg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wrld_1deg
> ### Title: Contiguity Matrix of World One-Degree Grid Cells
> ### Aliases: wrld_1deg
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Don't show: 
>  
> library(stats, pos = "package:base", verbose = FALSE)
> library(utils, pos = "package:base", verbose = FALSE)
> ## End(Don't show)
> data(wrld_1deg, package = "Matrix")
> (n <- ncol(wrld_1deg))
[1] 15260
> I <- .symDiagonal(n)
> 
> doExtras <- interactive() || nzchar(Sys.getenv("R_MATRIX_CHECK_EXTRA"))
> set.seed(1)
> r <- if(doExtras) 20L else 3L
> rho <- 1 / runif(r, 0, 0.5)
> 
> system.time(MJ0 <- sapply(rho, function(mult)
+     determinant(wrld_1deg + mult * I, logarithm = TRUE)$modulus))
   user  system elapsed 
  0.167   0.000   0.168 
> 
> ## Can be done faster by updating the Cholesky factor:
> 
> C1 <- Cholesky(wrld_1deg, Imult = 2)
> system.time(MJ1 <- sapply(rho, function(mult)
+     determinant(update(C1, wrld_1deg, mult), sqrt = FALSE)$modulus))
   user  system elapsed 
  0.087   0.000   0.087 
> stopifnot(all.equal(MJ0, MJ1))
> 
> C2 <- Cholesky(wrld_1deg, super = TRUE, Imult = 2)
> system.time(MJ2 <- sapply(rho, function(mult)
+     determinant(update(C2, wrld_1deg, mult), sqrt = FALSE)$modulus))
   user  system elapsed 
  0.070   0.024   0.051 
> stopifnot(all.equal(MJ0, MJ2))
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  16.397 1.54 16.85 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
